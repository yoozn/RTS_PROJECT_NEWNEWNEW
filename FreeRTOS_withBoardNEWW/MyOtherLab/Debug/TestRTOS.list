
TestRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08005358  08005358  00006358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005478  08005478  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005478  08005478  00006478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005480  08005480  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005480  08005480  00006480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005484  08005484  00006484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005488  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007070  2**0
                  CONTENTS
 10 .bss          00012ed0  20000070  20000070  00007070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012f40  20012f40  00007070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dfba  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002518  00000000  00000000  0001505a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e98  00000000  00000000  00017578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b3f  00000000  00000000  00018410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020a42  00000000  00000000  00018f4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010ab4  00000000  00000000  00039991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d97b3  00000000  00000000  0004a445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00123bf8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004604  00000000  00000000  00123c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00128240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005340 	.word	0x08005340

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005340 	.word	0x08005340

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f103 0208 	add.w	r2, r3, #8
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f04f 32ff 	mov.w	r2, #4294967295
 8000578:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f103 0208 	add.w	r2, r3, #8
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f103 0208 	add.w	r2, r3, #8
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80005ba:	b480      	push	{r7}
 80005bc:	b085      	sub	sp, #20
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
 80005c2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d0:	d103      	bne.n	80005da <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	691b      	ldr	r3, [r3, #16]
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	e00c      	b.n	80005f4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	3308      	adds	r3, #8
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	e002      	b.n	80005e8 <vListInsert+0x2e>
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	68ba      	ldr	r2, [r7, #8]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d2f6      	bcs.n	80005e2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	685a      	ldr	r2, [r3, #4]
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	683a      	ldr	r2, [r7, #0]
 8000602:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	68fa      	ldr	r2, [r7, #12]
 8000608:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	691b      	ldr	r3, [r3, #16]
 8000638:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	6892      	ldr	r2, [r2, #8]
 8000642:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	6852      	ldr	r2, [r2, #4]
 800064c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	429a      	cmp	r2, r3
 8000656:	d103      	bne.n	8000660 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	689a      	ldr	r2, [r3, #8]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	1e5a      	subs	r2, r3, #1
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	681b      	ldr	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800068a:	2301      	movs	r3, #1
 800068c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d10b      	bne.n	80006b0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800069c:	f383 8811 	msr	BASEPRI, r3
 80006a0:	f3bf 8f6f 	isb	sy
 80006a4:	f3bf 8f4f 	dsb	sy
 80006a8:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80006aa:	bf00      	nop
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d05d      	beq.n	8000772 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d059      	beq.n	8000772 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006c6:	2100      	movs	r1, #0
 80006c8:	fba3 2302 	umull	r2, r3, r3, r2
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d000      	beq.n	80006d2 <xQueueGenericReset+0x52>
 80006d0:	2101      	movs	r1, #1
 80006d2:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d14c      	bne.n	8000772 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 80006d8:	f001 fd54 	bl	8002184 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006e4:	6939      	ldr	r1, [r7, #16]
 80006e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80006e8:	fb01 f303 	mul.w	r3, r1, r3
 80006ec:	441a      	add	r2, r3
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	2200      	movs	r2, #0
 80006f6:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000708:	3b01      	subs	r3, #1
 800070a:	6939      	ldr	r1, [r7, #16]
 800070c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800070e:	fb01 f303 	mul.w	r3, r1, r3
 8000712:	441a      	add	r2, r3
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	22ff      	movs	r2, #255	@ 0xff
 800071c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	22ff      	movs	r2, #255	@ 0xff
 8000724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d114      	bne.n	8000758 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	691b      	ldr	r3, [r3, #16]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d01a      	beq.n	800076c <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000736:	693b      	ldr	r3, [r7, #16]
 8000738:	3310      	adds	r3, #16
 800073a:	4618      	mov	r0, r3
 800073c:	f001 f862 	bl	8001804 <xTaskRemoveFromEventList>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d012      	beq.n	800076c <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000746:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <xQueueGenericReset+0x120>)
 8000748:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	f3bf 8f4f 	dsb	sy
 8000752:	f3bf 8f6f 	isb	sy
 8000756:	e009      	b.n	800076c <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	3310      	adds	r3, #16
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff feff 	bl	8000560 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000762:	693b      	ldr	r3, [r7, #16]
 8000764:	3324      	adds	r3, #36	@ 0x24
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fefa 	bl	8000560 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800076c:	f001 fd3c 	bl	80021e8 <vPortExitCritical>
 8000770:	e001      	b.n	8000776 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d10b      	bne.n	8000794 <xQueueGenericReset+0x114>
    __asm volatile
 800077c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000780:	f383 8811 	msr	BASEPRI, r3
 8000784:	f3bf 8f6f 	isb	sy
 8000788:	f3bf 8f4f 	dsb	sy
 800078c:	60bb      	str	r3, [r7, #8]
}
 800078e:	bf00      	nop
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8000794:	697b      	ldr	r3, [r7, #20]
}
 8000796:	4618      	mov	r0, r3
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	e000ed04 	.word	0xe000ed04

080007a4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	@ 0x28
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	4613      	mov	r3, r2
 80007b0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d02e      	beq.n	800081a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80007bc:	2100      	movs	r1, #0
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	fba3 2302 	umull	r2, r3, r3, r2
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d000      	beq.n	80007cc <xQueueGenericCreate+0x28>
 80007ca:	2101      	movs	r1, #1
 80007cc:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d123      	bne.n	800081a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	68ba      	ldr	r2, [r7, #8]
 80007d6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80007da:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80007de:	d81c      	bhi.n	800081a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	fb02 f303 	mul.w	r3, r2, r3
 80007e8:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	3350      	adds	r3, #80	@ 0x50
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 fda4 	bl	800233c <pvPortMalloc>
 80007f4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d01d      	beq.n	8000838 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	3350      	adds	r3, #80	@ 0x50
 8000804:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000806:	79fa      	ldrb	r2, [r7, #7]
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	4613      	mov	r3, r2
 800080e:	697a      	ldr	r2, [r7, #20]
 8000810:	68b9      	ldr	r1, [r7, #8]
 8000812:	68f8      	ldr	r0, [r7, #12]
 8000814:	f000 f815 	bl	8000842 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000818:	e00e      	b.n	8000838 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d10b      	bne.n	8000838 <xQueueGenericCreate+0x94>
    __asm volatile
 8000820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000824:	f383 8811 	msr	BASEPRI, r3
 8000828:	f3bf 8f6f 	isb	sy
 800082c:	f3bf 8f4f 	dsb	sy
 8000830:	613b      	str	r3, [r7, #16]
}
 8000832:	bf00      	nop
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8000838:	69fb      	ldr	r3, [r7, #28]
    }
 800083a:	4618      	mov	r0, r3
 800083c:	3720      	adds	r7, #32
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b084      	sub	sp, #16
 8000846:	af00      	add	r7, sp, #0
 8000848:	60f8      	str	r0, [r7, #12]
 800084a:	60b9      	str	r1, [r7, #8]
 800084c:	607a      	str	r2, [r7, #4]
 800084e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d103      	bne.n	800085e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000856:	69bb      	ldr	r3, [r7, #24]
 8000858:	69ba      	ldr	r2, [r7, #24]
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	e002      	b.n	8000864 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800085e:	69bb      	ldr	r3, [r7, #24]
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800086a:	69bb      	ldr	r3, [r7, #24]
 800086c:	68ba      	ldr	r2, [r7, #8]
 800086e:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000870:	2101      	movs	r1, #1
 8000872:	69b8      	ldr	r0, [r7, #24]
 8000874:	f7ff ff04 	bl	8000680 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	78fa      	ldrb	r2, [r7, #3]
 800087c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08c      	sub	sp, #48	@ 0x30
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
 8000894:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000896:	2300      	movs	r3, #0
 8000898:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 800089e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d10b      	bne.n	80008bc <xQueueGenericSend+0x34>
    __asm volatile
 80008a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008a8:	f383 8811 	msr	BASEPRI, r3
 80008ac:	f3bf 8f6f 	isb	sy
 80008b0:	f3bf 8f4f 	dsb	sy
 80008b4:	623b      	str	r3, [r7, #32]
}
 80008b6:	bf00      	nop
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d103      	bne.n	80008ca <xQueueGenericSend+0x42>
 80008c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d101      	bne.n	80008ce <xQueueGenericSend+0x46>
 80008ca:	2301      	movs	r3, #1
 80008cc:	e000      	b.n	80008d0 <xQueueGenericSend+0x48>
 80008ce:	2300      	movs	r3, #0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d10b      	bne.n	80008ec <xQueueGenericSend+0x64>
    __asm volatile
 80008d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008d8:	f383 8811 	msr	BASEPRI, r3
 80008dc:	f3bf 8f6f 	isb	sy
 80008e0:	f3bf 8f4f 	dsb	sy
 80008e4:	61fb      	str	r3, [r7, #28]
}
 80008e6:	bf00      	nop
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d103      	bne.n	80008fa <xQueueGenericSend+0x72>
 80008f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d101      	bne.n	80008fe <xQueueGenericSend+0x76>
 80008fa:	2301      	movs	r3, #1
 80008fc:	e000      	b.n	8000900 <xQueueGenericSend+0x78>
 80008fe:	2300      	movs	r3, #0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d10b      	bne.n	800091c <xQueueGenericSend+0x94>
    __asm volatile
 8000904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000908:	f383 8811 	msr	BASEPRI, r3
 800090c:	f3bf 8f6f 	isb	sy
 8000910:	f3bf 8f4f 	dsb	sy
 8000914:	61bb      	str	r3, [r7, #24]
}
 8000916:	bf00      	nop
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <xQueueGenericSend+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800091c:	f001 fc32 	bl	8002184 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000922:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000928:	429a      	cmp	r2, r3
 800092a:	d302      	bcc.n	8000932 <xQueueGenericSend+0xaa>
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	2b02      	cmp	r3, #2
 8000930:	d129      	bne.n	8000986 <xQueueGenericSend+0xfe>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000932:	683a      	ldr	r2, [r7, #0]
 8000934:	68b9      	ldr	r1, [r7, #8]
 8000936:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000938:	f000 f95a 	bl	8000bf0 <prvCopyDataToQueue>
 800093c:	6278      	str	r0, [r7, #36]	@ 0x24

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800093e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000942:	2b00      	cmp	r3, #0
 8000944:	d010      	beq.n	8000968 <xQueueGenericSend+0xe0>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000948:	3324      	adds	r3, #36	@ 0x24
 800094a:	4618      	mov	r0, r3
 800094c:	f000 ff5a 	bl	8001804 <xTaskRemoveFromEventList>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d013      	beq.n	800097e <xQueueGenericSend+0xf6>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000956:	4b40      	ldr	r3, [pc, #256]	@ (8000a58 <xQueueGenericSend+0x1d0>)
 8000958:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	f3bf 8f4f 	dsb	sy
 8000962:	f3bf 8f6f 	isb	sy
 8000966:	e00a      	b.n	800097e <xQueueGenericSend+0xf6>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8000968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800096a:	2b00      	cmp	r3, #0
 800096c:	d007      	beq.n	800097e <xQueueGenericSend+0xf6>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800096e:	4b3a      	ldr	r3, [pc, #232]	@ (8000a58 <xQueueGenericSend+0x1d0>)
 8000970:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	f3bf 8f4f 	dsb	sy
 800097a:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800097e:	f001 fc33 	bl	80021e8 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8000982:	2301      	movs	r3, #1
 8000984:	e063      	b.n	8000a4e <xQueueGenericSend+0x1c6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d103      	bne.n	8000994 <xQueueGenericSend+0x10c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800098c:	f001 fc2c 	bl	80021e8 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8000990:	2300      	movs	r3, #0
 8000992:	e05c      	b.n	8000a4e <xQueueGenericSend+0x1c6>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000996:	2b00      	cmp	r3, #0
 8000998:	d106      	bne.n	80009a8 <xQueueGenericSend+0x120>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800099a:	f107 0310 	add.w	r3, r7, #16
 800099e:	4618      	mov	r0, r3
 80009a0:	f001 f80a 	bl	80019b8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80009a4:	2301      	movs	r3, #1
 80009a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80009a8:	f001 fc1e 	bl	80021e8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80009ac:	f000 fc76 	bl	800129c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80009b0:	f001 fbe8 	bl	8002184 <vPortEnterCritical>
 80009b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80009ba:	b25b      	sxtb	r3, r3
 80009bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c0:	d103      	bne.n	80009ca <xQueueGenericSend+0x142>
 80009c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009c4:	2200      	movs	r2, #0
 80009c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80009ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80009d0:	b25b      	sxtb	r3, r3
 80009d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d6:	d103      	bne.n	80009e0 <xQueueGenericSend+0x158>
 80009d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009da:	2200      	movs	r2, #0
 80009dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80009e0:	f001 fc02 	bl	80021e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80009e4:	1d3a      	adds	r2, r7, #4
 80009e6:	f107 0310 	add.w	r3, r7, #16
 80009ea:	4611      	mov	r1, r2
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 fff9 	bl	80019e4 <xTaskCheckForTimeOut>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d124      	bne.n	8000a42 <xQueueGenericSend+0x1ba>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80009f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80009fa:	f000 f9f1 	bl	8000de0 <prvIsQueueFull>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d018      	beq.n	8000a36 <xQueueGenericSend+0x1ae>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a06:	3310      	adds	r3, #16
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 fed3 	bl	80017b8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000a12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000a14:	f000 f97c 	bl	8000d10 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000a18:	f000 fc4e 	bl	80012b8 <xTaskResumeAll>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	f47f af7c 	bne.w	800091c <xQueueGenericSend+0x94>
                {
                    taskYIELD_WITHIN_API();
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <xQueueGenericSend+0x1d0>)
 8000a26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	f3bf 8f4f 	dsb	sy
 8000a30:	f3bf 8f6f 	isb	sy
 8000a34:	e772      	b.n	800091c <xQueueGenericSend+0x94>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000a36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000a38:	f000 f96a 	bl	8000d10 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000a3c:	f000 fc3c 	bl	80012b8 <xTaskResumeAll>
 8000a40:	e76c      	b.n	800091c <xQueueGenericSend+0x94>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000a42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000a44:	f000 f964 	bl	8000d10 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000a48:	f000 fc36 	bl	80012b8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8000a4c:	2300      	movs	r3, #0
        }
    }
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3730      	adds	r7, #48	@ 0x30
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	e000ed04 	.word	0xe000ed04

08000a5c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08c      	sub	sp, #48	@ 0x30
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d10b      	bne.n	8000a8e <xQueueReceive+0x32>
    __asm volatile
 8000a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a7a:	f383 8811 	msr	BASEPRI, r3
 8000a7e:	f3bf 8f6f 	isb	sy
 8000a82:	f3bf 8f4f 	dsb	sy
 8000a86:	623b      	str	r3, [r7, #32]
}
 8000a88:	bf00      	nop
 8000a8a:	bf00      	nop
 8000a8c:	e7fd      	b.n	8000a8a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d103      	bne.n	8000a9c <xQueueReceive+0x40>
 8000a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d101      	bne.n	8000aa0 <xQueueReceive+0x44>
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	e000      	b.n	8000aa2 <xQueueReceive+0x46>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d10b      	bne.n	8000abe <xQueueReceive+0x62>
    __asm volatile
 8000aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000aaa:	f383 8811 	msr	BASEPRI, r3
 8000aae:	f3bf 8f6f 	isb	sy
 8000ab2:	f3bf 8f4f 	dsb	sy
 8000ab6:	61fb      	str	r3, [r7, #28]
}
 8000ab8:	bf00      	nop
 8000aba:	bf00      	nop
 8000abc:	e7fd      	b.n	8000aba <xQueueReceive+0x5e>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000abe:	f001 fb61 	bl	8002184 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d01f      	beq.n	8000b0e <xQueueReceive+0xb2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000ace:	68b9      	ldr	r1, [r7, #8]
 8000ad0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000ad2:	f000 f8f7 	bl	8000cc4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8000ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad8:	1e5a      	subs	r2, r3, #1
 8000ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000adc:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ae0:	691b      	ldr	r3, [r3, #16]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d00f      	beq.n	8000b06 <xQueueReceive+0xaa>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ae8:	3310      	adds	r3, #16
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 fe8a 	bl	8001804 <xTaskRemoveFromEventList>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d007      	beq.n	8000b06 <xQueueReceive+0xaa>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000af6:	4b3d      	ldr	r3, [pc, #244]	@ (8000bec <xQueueReceive+0x190>)
 8000af8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	f3bf 8f4f 	dsb	sy
 8000b02:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000b06:	f001 fb6f 	bl	80021e8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e069      	b.n	8000be2 <xQueueReceive+0x186>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d103      	bne.n	8000b1c <xQueueReceive+0xc0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000b14:	f001 fb68 	bl	80021e8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e062      	b.n	8000be2 <xQueueReceive+0x186>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d106      	bne.n	8000b30 <xQueueReceive+0xd4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 ff46 	bl	80019b8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000b30:	f001 fb5a 	bl	80021e8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000b34:	f000 fbb2 	bl	800129c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000b38:	f001 fb24 	bl	8002184 <vPortEnterCritical>
 8000b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b3e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000b42:	b25b      	sxtb	r3, r3
 8000b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b48:	d103      	bne.n	8000b52 <xQueueReceive+0xf6>
 8000b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000b58:	b25b      	sxtb	r3, r3
 8000b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b5e:	d103      	bne.n	8000b68 <xQueueReceive+0x10c>
 8000b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b62:	2200      	movs	r2, #0
 8000b64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000b68:	f001 fb3e 	bl	80021e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000b6c:	1d3a      	adds	r2, r7, #4
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4611      	mov	r1, r2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 ff35 	bl	80019e4 <xTaskCheckForTimeOut>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d123      	bne.n	8000bc8 <xQueueReceive+0x16c>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000b80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000b82:	f000 f917 	bl	8000db4 <prvIsQueueEmpty>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d017      	beq.n	8000bbc <xQueueReceive+0x160>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b8e:	3324      	adds	r3, #36	@ 0x24
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	4611      	mov	r1, r2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 fe0f 	bl	80017b8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000b9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000b9c:	f000 f8b8 	bl	8000d10 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000ba0:	f000 fb8a 	bl	80012b8 <xTaskResumeAll>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d189      	bne.n	8000abe <xQueueReceive+0x62>
                {
                    taskYIELD_WITHIN_API();
 8000baa:	4b10      	ldr	r3, [pc, #64]	@ (8000bec <xQueueReceive+0x190>)
 8000bac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	f3bf 8f4f 	dsb	sy
 8000bb6:	f3bf 8f6f 	isb	sy
 8000bba:	e780      	b.n	8000abe <xQueueReceive+0x62>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000bbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000bbe:	f000 f8a7 	bl	8000d10 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000bc2:	f000 fb79 	bl	80012b8 <xTaskResumeAll>
 8000bc6:	e77a      	b.n	8000abe <xQueueReceive+0x62>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000bc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000bca:	f000 f8a1 	bl	8000d10 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000bce:	f000 fb73 	bl	80012b8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000bd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000bd4:	f000 f8ee 	bl	8000db4 <prvIsQueueEmpty>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f43f af6f 	beq.w	8000abe <xQueueReceive+0x62>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8000be0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3730      	adds	r7, #48	@ 0x30
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	e000ed04 	.word	0xe000ed04

08000bf0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c04:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d10d      	bne.n	8000c2a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f001 f808 	bl	8001c30 <xTaskPriorityDisinherit>
 8000c20:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	e043      	b.n	8000cb2 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d119      	bne.n	8000c64 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	6858      	ldr	r0, [r3, #4]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c38:	461a      	mov	r2, r3
 8000c3a:	68b9      	ldr	r1, [r7, #8]
 8000c3c:	f003 fd4b 	bl	80046d6 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c48:	441a      	add	r2, r3
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d32b      	bcc.n	8000cb2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	e026      	b.n	8000cb2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	68d8      	ldr	r0, [r3, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	68b9      	ldr	r1, [r7, #8]
 8000c70:	f003 fd31 	bl	80046d6 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	68da      	ldr	r2, [r3, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7c:	425b      	negs	r3, r3
 8000c7e:	441a      	add	r2, r3
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	68da      	ldr	r2, [r3, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d207      	bcs.n	8000ca0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	689a      	ldr	r2, [r3, #8]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c98:	425b      	negs	r3, r3
 8000c9a:	441a      	add	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d105      	bne.n	8000cb2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d002      	beq.n	8000cb2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	1c5a      	adds	r2, r3, #1
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8000cba:	697b      	ldr	r3, [r7, #20]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d018      	beq.n	8000d08 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68da      	ldr	r2, [r3, #12]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	441a      	add	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d303      	bcc.n	8000cf8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	68d9      	ldr	r1, [r3, #12]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d00:	461a      	mov	r2, r3
 8000d02:	6838      	ldr	r0, [r7, #0]
 8000d04:	f003 fce7 	bl	80046d6 <memcpy>
    }
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000d18:	f001 fa34 	bl	8002184 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000d22:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000d24:	e011      	b.n	8000d4a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d012      	beq.n	8000d54 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3324      	adds	r3, #36	@ 0x24
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 fd66 	bl	8001804 <xTaskRemoveFromEventList>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000d3e:	f000 feb9 	bl	8001ab4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	dce9      	bgt.n	8000d26 <prvUnlockQueue+0x16>
 8000d52:	e000      	b.n	8000d56 <prvUnlockQueue+0x46>
                    break;
 8000d54:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	22ff      	movs	r2, #255	@ 0xff
 8000d5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8000d5e:	f001 fa43 	bl	80021e8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000d62:	f001 fa0f 	bl	8002184 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000d6c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000d6e:	e011      	b.n	8000d94 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	691b      	ldr	r3, [r3, #16]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d012      	beq.n	8000d9e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3310      	adds	r3, #16
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 fd41 	bl	8001804 <xTaskRemoveFromEventList>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000d88:	f000 fe94 	bl	8001ab4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000d8c:	7bbb      	ldrb	r3, [r7, #14]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000d94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	dce9      	bgt.n	8000d70 <prvUnlockQueue+0x60>
 8000d9c:	e000      	b.n	8000da0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000d9e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	22ff      	movs	r2, #255	@ 0xff
 8000da4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8000da8:	f001 fa1e 	bl	80021e8 <vPortExitCritical>
}
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000dbc:	f001 f9e2 	bl	8002184 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d102      	bne.n	8000dce <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	e001      	b.n	8000dd2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000dd2:	f001 fa09 	bl	80021e8 <vPortExitCritical>

    return xReturn;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000de8:	f001 f9cc 	bl	8002184 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d102      	bne.n	8000dfe <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	e001      	b.n	8000e02 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000e02:	f001 f9f1 	bl	80021e8 <vPortExitCritical>

    return xReturn;
 8000e06:	68fb      	ldr	r3, [r7, #12]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	@ 0x28
 8000e14:	af04      	add	r7, sp, #16
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
 8000e1c:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4618      	mov	r0, r3
 8000e24:	f001 fa8a 	bl	800233c <pvPortMalloc>
 8000e28:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d013      	beq.n	8000e58 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8000e30:	2058      	movs	r0, #88	@ 0x58
 8000e32:	f001 fa83 	bl	800233c <pvPortMalloc>
 8000e36:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d008      	beq.n	8000e50 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000e3e:	2258      	movs	r2, #88	@ 0x58
 8000e40:	2100      	movs	r1, #0
 8000e42:	6978      	ldr	r0, [r7, #20]
 8000e44:	f003 fb9d 	bl	8004582 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e4e:	e005      	b.n	8000e5c <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000e50:	6938      	ldr	r0, [r7, #16]
 8000e52:	f001 fac7 	bl	80023e4 <vPortFree>
 8000e56:	e001      	b.n	8000e5c <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d00d      	beq.n	8000e7e <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000e62:	2300      	movs	r3, #0
 8000e64:	9303      	str	r3, [sp, #12]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	9302      	str	r3, [sp, #8]
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e6c:	9301      	str	r3, [sp, #4]
 8000e6e:	6a3b      	ldr	r3, [r7, #32]
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	68b9      	ldr	r1, [r7, #8]
 8000e78:	68f8      	ldr	r0, [r7, #12]
 8000e7a:	f000 f828 	bl	8000ece <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8000e7e:	697b      	ldr	r3, [r7, #20]
    }
 8000e80:	4618      	mov	r0, r3
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af02      	add	r7, sp, #8
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8000e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e98:	9301      	str	r3, [sp, #4]
 8000e9a:	6a3b      	ldr	r3, [r7, #32]
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	68b9      	ldr	r1, [r7, #8]
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f7ff ffb3 	bl	8000e10 <prvCreateTask>
 8000eaa:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d005      	beq.n	8000ebe <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8000eb2:	6938      	ldr	r0, [r7, #16]
 8000eb4:	f000 f89c 	bl	8000ff0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	e002      	b.n	8000ec4 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec2:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8000ec4:	697b      	ldr	r3, [r7, #20]
    }
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b088      	sub	sp, #32
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	60f8      	str	r0, [r7, #12]
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8000edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ede:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	21a5      	movs	r1, #165	@ 0xa5
 8000ee8:	f003 fb4b 	bl	8004582 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8000eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000eee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	f023 0307 	bic.w	r3, r3, #7
 8000f04:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	f003 0307 	and.w	r3, r3, #7
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d00b      	beq.n	8000f28 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8000f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f14:	f383 8811 	msr	BASEPRI, r3
 8000f18:	f3bf 8f6f 	isb	sy
 8000f1c:	f3bf 8f4f 	dsb	sy
 8000f20:	617b      	str	r3, [r7, #20]
}
 8000f22:	bf00      	nop
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d01e      	beq.n	8000f6c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
 8000f32:	e012      	b.n	8000f5a <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000f34:	68ba      	ldr	r2, [r7, #8]
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	4413      	add	r3, r2
 8000f3a:	7819      	ldrb	r1, [r3, #0]
 8000f3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	4413      	add	r3, r2
 8000f42:	3334      	adds	r3, #52	@ 0x34
 8000f44:	460a      	mov	r2, r1
 8000f46:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000f48:	68ba      	ldr	r2, [r7, #8]
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d006      	beq.n	8000f62 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	3301      	adds	r3, #1
 8000f58:	61fb      	str	r3, [r7, #28]
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	2b09      	cmp	r3, #9
 8000f5e:	d9e9      	bls.n	8000f34 <prvInitialiseNewTask+0x66>
 8000f60:	e000      	b.n	8000f64 <prvInitialiseNewTask+0x96>
            {
                break;
 8000f62:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8000f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	d90b      	bls.n	8000f8a <prvInitialiseNewTask+0xbc>
    __asm volatile
 8000f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f76:	f383 8811 	msr	BASEPRI, r3
 8000f7a:	f3bf 8f6f 	isb	sy
 8000f7e:	f3bf 8f4f 	dsb	sy
 8000f82:	613b      	str	r3, [r7, #16]
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	e7fd      	b.n	8000f86 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f8c:	2b04      	cmp	r3, #4
 8000f8e:	d901      	bls.n	8000f94 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000f90:	2304      	movs	r3, #4
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f98:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f9e:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fafb 	bl	80005a0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fac:	3318      	adds	r3, #24
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff faf6 	bl	80005a0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000fb8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8000fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fbc:	f1c3 0205 	rsb	r2, r3, #5
 8000fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fc2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000fc8:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	68f9      	ldr	r1, [r7, #12]
 8000fce:	69b8      	ldr	r0, [r7, #24]
 8000fd0:	f000 ff58 	bl	8001e84 <pxPortInitialiseStack>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fd8:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8000fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d002      	beq.n	8000fe6 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000fe4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000fe6:	bf00      	nop
 8000fe8:	3720      	adds	r7, #32
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8000ff8:	f001 f8c4 	bl	8002184 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8000ffc:	4b41      	ldr	r3, [pc, #260]	@ (8001104 <prvAddNewTaskToReadyList+0x114>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	3301      	adds	r3, #1
 8001002:	4a40      	ldr	r2, [pc, #256]	@ (8001104 <prvAddNewTaskToReadyList+0x114>)
 8001004:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8001006:	4b40      	ldr	r3, [pc, #256]	@ (8001108 <prvAddNewTaskToReadyList+0x118>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d109      	bne.n	8001022 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 800100e:	4a3e      	ldr	r2, [pc, #248]	@ (8001108 <prvAddNewTaskToReadyList+0x118>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001014:	4b3b      	ldr	r3, [pc, #236]	@ (8001104 <prvAddNewTaskToReadyList+0x114>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d110      	bne.n	800103e <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 800101c:	f000 fd6e 	bl	8001afc <prvInitialiseTaskLists>
 8001020:	e00d      	b.n	800103e <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8001022:	4b3a      	ldr	r3, [pc, #232]	@ (800110c <prvAddNewTaskToReadyList+0x11c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d109      	bne.n	800103e <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800102a:	4b37      	ldr	r3, [pc, #220]	@ (8001108 <prvAddNewTaskToReadyList+0x118>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001034:	429a      	cmp	r2, r3
 8001036:	d802      	bhi.n	800103e <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8001038:	4a33      	ldr	r2, [pc, #204]	@ (8001108 <prvAddNewTaskToReadyList+0x118>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 800103e:	4b34      	ldr	r3, [pc, #208]	@ (8001110 <prvAddNewTaskToReadyList+0x120>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	4a32      	ldr	r2, [pc, #200]	@ (8001110 <prvAddNewTaskToReadyList+0x120>)
 8001046:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001048:	4b31      	ldr	r3, [pc, #196]	@ (8001110 <prvAddNewTaskToReadyList+0x120>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001054:	2201      	movs	r2, #1
 8001056:	409a      	lsls	r2, r3
 8001058:	4b2e      	ldr	r3, [pc, #184]	@ (8001114 <prvAddNewTaskToReadyList+0x124>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4313      	orrs	r3, r2
 800105e:	4a2d      	ldr	r2, [pc, #180]	@ (8001114 <prvAddNewTaskToReadyList+0x124>)
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001066:	492c      	ldr	r1, [pc, #176]	@ (8001118 <prvAddNewTaskToReadyList+0x128>)
 8001068:	4613      	mov	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	440b      	add	r3, r1
 8001072:	3304      	adds	r3, #4
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	689a      	ldr	r2, [r3, #8]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	3204      	adds	r2, #4
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	1d1a      	adds	r2, r3, #4
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4a1c      	ldr	r2, [pc, #112]	@ (8001118 <prvAddNewTaskToReadyList+0x128>)
 80010a6:	441a      	add	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	615a      	str	r2, [r3, #20]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010b0:	4919      	ldr	r1, [pc, #100]	@ (8001118 <prvAddNewTaskToReadyList+0x128>)
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	440b      	add	r3, r1
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80010c2:	1c59      	adds	r1, r3, #1
 80010c4:	4814      	ldr	r0, [pc, #80]	@ (8001118 <prvAddNewTaskToReadyList+0x128>)
 80010c6:	4613      	mov	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4403      	add	r3, r0
 80010d0:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80010d2:	f001 f889 	bl	80021e8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80010d6:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <prvAddNewTaskToReadyList+0x11c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d00e      	beq.n	80010fc <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 80010de:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <prvAddNewTaskToReadyList+0x118>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d207      	bcs.n	80010fc <prvAddNewTaskToReadyList+0x10c>
 80010ec:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <prvAddNewTaskToReadyList+0x12c>)
 80010ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	f3bf 8f4f 	dsb	sy
 80010f8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000164 	.word	0x20000164
 8001108:	2000008c 	.word	0x2000008c
 800110c:	20000170 	.word	0x20000170
 8001110:	20000180 	.word	0x20000180
 8001114:	2000016c 	.word	0x2000016c
 8001118:	20000090 	.word	0x20000090
 800111c:	e000ed04 	.word	0xe000ed04

08001120 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d018      	beq.n	8001164 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 8001132:	f000 f8b3 	bl	800129c <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8001136:	4b13      	ldr	r3, [pc, #76]	@ (8001184 <vTaskDelay+0x64>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d00b      	beq.n	8001156 <vTaskDelay+0x36>
    __asm volatile
 800113e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001142:	f383 8811 	msr	BASEPRI, r3
 8001146:	f3bf 8f6f 	isb	sy
 800114a:	f3bf 8f4f 	dsb	sy
 800114e:	60bb      	str	r3, [r7, #8]
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	e7fd      	b.n	8001152 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001156:	2100      	movs	r1, #0
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f000 fe11 	bl	8001d80 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800115e:	f000 f8ab 	bl	80012b8 <xTaskResumeAll>
 8001162:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d107      	bne.n	800117a <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 800116a:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <vTaskDelay+0x68>)
 800116c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	f3bf 8f4f 	dsb	sy
 8001176:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	2000018c 	.word	0x2000018c
 8001188:	e000ed04 	.word	0xe000ed04

0800118c <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	@ 0x28
 8001190:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8001192:	2301      	movs	r3, #1
 8001194:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	e011      	b.n	80011c4 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80011a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001214 <prvCreateIdleTasks+0x88>)
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	4413      	add	r3, r2
 80011a6:	7819      	ldrb	r1, [r3, #0]
 80011a8:	1d3a      	adds	r2, r7, #4
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	4413      	add	r3, r2
 80011ae:	460a      	mov	r2, r1
 80011b0:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80011b2:	1d3a      	adds	r2, r7, #4
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	4413      	add	r3, r2
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d006      	beq.n	80011cc <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	3301      	adds	r3, #1
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	2b09      	cmp	r3, #9
 80011c8:	ddea      	ble.n	80011a0 <prvCreateIdleTasks+0x14>
 80011ca:	e000      	b.n	80011ce <prvCreateIdleTasks+0x42>
        {
            break;
 80011cc:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
 80011d2:	e015      	b.n	8001200 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80011d4:	4b10      	ldr	r3, [pc, #64]	@ (8001218 <prvCreateIdleTasks+0x8c>)
 80011d6:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4a0f      	ldr	r2, [pc, #60]	@ (800121c <prvCreateIdleTasks+0x90>)
 80011de:	4413      	add	r3, r2
 80011e0:	1d39      	adds	r1, r7, #4
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	2300      	movs	r3, #0
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2300      	movs	r3, #0
 80011ea:	2282      	movs	r2, #130	@ 0x82
 80011ec:	6938      	ldr	r0, [r7, #16]
 80011ee:	f7ff fe4b 	bl	8000e88 <xTaskCreate>
 80011f2:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d006      	beq.n	8001208 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	3301      	adds	r3, #1
 80011fe:	61bb      	str	r3, [r7, #24]
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	2b00      	cmp	r3, #0
 8001204:	dde6      	ble.n	80011d4 <prvCreateIdleTasks+0x48>
 8001206:	e000      	b.n	800120a <prvCreateIdleTasks+0x7e>
        {
            break;
 8001208:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800120a:	69fb      	ldr	r3, [r7, #28]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3720      	adds	r7, #32
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	08005358 	.word	0x08005358
 8001218:	08001acd 	.word	0x08001acd
 800121c:	20000188 	.word	0x20000188

08001220 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8001226:	f7ff ffb1 	bl	800118c <prvCreateIdleTasks>
 800122a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d116      	bne.n	8001260 <vTaskStartScheduler+0x40>
    __asm volatile
 8001232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001236:	f383 8811 	msr	BASEPRI, r3
 800123a:	f3bf 8f6f 	isb	sy
 800123e:	f3bf 8f4f 	dsb	sy
 8001242:	60bb      	str	r3, [r7, #8]
}
 8001244:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001246:	4b11      	ldr	r3, [pc, #68]	@ (800128c <vTaskStartScheduler+0x6c>)
 8001248:	f04f 32ff 	mov.w	r2, #4294967295
 800124c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800124e:	4b10      	ldr	r3, [pc, #64]	@ (8001290 <vTaskStartScheduler+0x70>)
 8001250:	2201      	movs	r2, #1
 8001252:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001254:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <vTaskStartScheduler+0x74>)
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800125a:	f000 fea3 	bl	8001fa4 <xPortStartScheduler>
 800125e:	e00f      	b.n	8001280 <vTaskStartScheduler+0x60>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001266:	d10b      	bne.n	8001280 <vTaskStartScheduler+0x60>
    __asm volatile
 8001268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800126c:	f383 8811 	msr	BASEPRI, r3
 8001270:	f3bf 8f6f 	isb	sy
 8001274:	f3bf 8f4f 	dsb	sy
 8001278:	607b      	str	r3, [r7, #4]
}
 800127a:	bf00      	nop
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <vTaskStartScheduler+0x5c>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001280:	4b05      	ldr	r3, [pc, #20]	@ (8001298 <vTaskStartScheduler+0x78>)
 8001282:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000184 	.word	0x20000184
 8001290:	20000170 	.word	0x20000170
 8001294:	20000168 	.word	0x20000168
 8001298:	20000000 	.word	0x20000000

0800129c <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80012a0:	4b04      	ldr	r3, [pc, #16]	@ (80012b4 <vTaskSuspendAll+0x18>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	3301      	adds	r3, #1
 80012a6:	4a03      	ldr	r2, [pc, #12]	@ (80012b4 <vTaskSuspendAll+0x18>)
 80012a8:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	2000018c 	.word	0x2000018c

080012b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80012c6:	f000 ff5d 	bl	8002184 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80012ce:	4b75      	ldr	r3, [pc, #468]	@ (80014a4 <xTaskResumeAll+0x1ec>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10b      	bne.n	80012ee <xTaskResumeAll+0x36>
    __asm volatile
 80012d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012da:	f383 8811 	msr	BASEPRI, r3
 80012de:	f3bf 8f6f 	isb	sy
 80012e2:	f3bf 8f4f 	dsb	sy
 80012e6:	603b      	str	r3, [r7, #0]
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	e7fd      	b.n	80012ea <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80012ee:	4b6d      	ldr	r3, [pc, #436]	@ (80014a4 <xTaskResumeAll+0x1ec>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	4a6b      	ldr	r2, [pc, #428]	@ (80014a4 <xTaskResumeAll+0x1ec>)
 80012f6:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80012f8:	4b6a      	ldr	r3, [pc, #424]	@ (80014a4 <xTaskResumeAll+0x1ec>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f040 80ca 	bne.w	8001496 <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001302:	4b69      	ldr	r3, [pc, #420]	@ (80014a8 <xTaskResumeAll+0x1f0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 80c5 	beq.w	8001496 <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800130c:	e08e      	b.n	800142c <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800130e:	4b67      	ldr	r3, [pc, #412]	@ (80014ac <xTaskResumeAll+0x1f4>)
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	69fa      	ldr	r2, [r7, #28]
 8001322:	6a12      	ldr	r2, [r2, #32]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	69fa      	ldr	r2, [r7, #28]
 800132c:	69d2      	ldr	r2, [r2, #28]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	3318      	adds	r3, #24
 8001338:	429a      	cmp	r2, r3
 800133a:	d103      	bne.n	8001344 <xTaskResumeAll+0x8c>
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	6a1a      	ldr	r2, [r3, #32]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	2200      	movs	r2, #0
 8001348:	629a      	str	r2, [r3, #40]	@ 0x28
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	1e5a      	subs	r2, r3, #1
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	69fa      	ldr	r2, [r7, #28]
 8001360:	68d2      	ldr	r2, [r2, #12]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	6892      	ldr	r2, [r2, #8]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3304      	adds	r3, #4
 8001376:	429a      	cmp	r2, r3
 8001378:	d103      	bne.n	8001382 <xTaskResumeAll+0xca>
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	68da      	ldr	r2, [r3, #12]
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	2200      	movs	r2, #0
 8001386:	615a      	str	r2, [r3, #20]
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	1e5a      	subs	r2, r3, #1
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001396:	2201      	movs	r2, #1
 8001398:	409a      	lsls	r2, r3
 800139a:	4b45      	ldr	r3, [pc, #276]	@ (80014b0 <xTaskResumeAll+0x1f8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4313      	orrs	r3, r2
 80013a0:	4a43      	ldr	r2, [pc, #268]	@ (80014b0 <xTaskResumeAll+0x1f8>)
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013a8:	4942      	ldr	r1, [pc, #264]	@ (80014b4 <xTaskResumeAll+0x1fc>)
 80013aa:	4613      	mov	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	3304      	adds	r3, #4
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	69fa      	ldr	r2, [r7, #28]
 80013ce:	3204      	adds	r2, #4
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	1d1a      	adds	r2, r3, #4
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4a33      	ldr	r2, [pc, #204]	@ (80014b4 <xTaskResumeAll+0x1fc>)
 80013e8:	441a      	add	r2, r3
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	615a      	str	r2, [r3, #20]
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013f2:	4930      	ldr	r1, [pc, #192]	@ (80014b4 <xTaskResumeAll+0x1fc>)
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	69fa      	ldr	r2, [r7, #28]
 8001402:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001404:	1c59      	adds	r1, r3, #1
 8001406:	482b      	ldr	r0, [pc, #172]	@ (80014b4 <xTaskResumeAll+0x1fc>)
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4403      	add	r3, r0
 8001412:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001418:	4b27      	ldr	r3, [pc, #156]	@ (80014b8 <xTaskResumeAll+0x200>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800141e:	429a      	cmp	r2, r3
 8001420:	d904      	bls.n	800142c <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8001422:	4a26      	ldr	r2, [pc, #152]	@ (80014bc <xTaskResumeAll+0x204>)
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	2101      	movs	r1, #1
 8001428:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800142c:	4b1f      	ldr	r3, [pc, #124]	@ (80014ac <xTaskResumeAll+0x1f4>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	f47f af6c 	bne.w	800130e <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 800143c:	f000 fbdc 	bl	8001bf8 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001440:	4b1f      	ldr	r3, [pc, #124]	@ (80014c0 <xTaskResumeAll+0x208>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d012      	beq.n	8001472 <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 800144c:	f000 f83c 	bl	80014c8 <xTaskIncrementTick>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d004      	beq.n	8001460 <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8001456:	4a19      	ldr	r2, [pc, #100]	@ (80014bc <xTaskResumeAll+0x204>)
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	2101      	movs	r1, #1
 800145c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	3b01      	subs	r3, #1
 8001464:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1ef      	bne.n	800144c <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 800146c:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <xTaskResumeAll+0x208>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8001472:	4a12      	ldr	r2, [pc, #72]	@ (80014bc <xTaskResumeAll+0x204>)
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00b      	beq.n	8001496 <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800147e:	2301      	movs	r3, #1
 8001480:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8001482:	4b0d      	ldr	r3, [pc, #52]	@ (80014b8 <xTaskResumeAll+0x200>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <xTaskResumeAll+0x20c>)
 8001488:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	f3bf 8f4f 	dsb	sy
 8001492:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001496:	f000 fea7 	bl	80021e8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 800149a:	69bb      	ldr	r3, [r7, #24]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3720      	adds	r7, #32
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	2000018c 	.word	0x2000018c
 80014a8:	20000164 	.word	0x20000164
 80014ac:	20000124 	.word	0x20000124
 80014b0:	2000016c 	.word	0x2000016c
 80014b4:	20000090 	.word	0x20000090
 80014b8:	2000008c 	.word	0x2000008c
 80014bc:	20000178 	.word	0x20000178
 80014c0:	20000174 	.word	0x20000174
 80014c4:	e000ed04 	.word	0xe000ed04

080014c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	@ 0x28
 80014cc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80014d2:	4b7f      	ldr	r3, [pc, #508]	@ (80016d0 <xTaskIncrementTick+0x208>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f040 80ef 	bne.w	80016ba <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80014dc:	4b7d      	ldr	r3, [pc, #500]	@ (80016d4 <xTaskIncrementTick+0x20c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	3301      	adds	r3, #1
 80014e2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80014e4:	4a7b      	ldr	r2, [pc, #492]	@ (80016d4 <xTaskIncrementTick+0x20c>)
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80014ea:	6a3b      	ldr	r3, [r7, #32]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d121      	bne.n	8001534 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80014f0:	4b79      	ldr	r3, [pc, #484]	@ (80016d8 <xTaskIncrementTick+0x210>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00b      	beq.n	8001512 <xTaskIncrementTick+0x4a>
    __asm volatile
 80014fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014fe:	f383 8811 	msr	BASEPRI, r3
 8001502:	f3bf 8f6f 	isb	sy
 8001506:	f3bf 8f4f 	dsb	sy
 800150a:	607b      	str	r3, [r7, #4]
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	e7fd      	b.n	800150e <xTaskIncrementTick+0x46>
 8001512:	4b71      	ldr	r3, [pc, #452]	@ (80016d8 <xTaskIncrementTick+0x210>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	61fb      	str	r3, [r7, #28]
 8001518:	4b70      	ldr	r3, [pc, #448]	@ (80016dc <xTaskIncrementTick+0x214>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a6e      	ldr	r2, [pc, #440]	@ (80016d8 <xTaskIncrementTick+0x210>)
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	4a6e      	ldr	r2, [pc, #440]	@ (80016dc <xTaskIncrementTick+0x214>)
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	4b6e      	ldr	r3, [pc, #440]	@ (80016e0 <xTaskIncrementTick+0x218>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	3301      	adds	r3, #1
 800152c:	4a6c      	ldr	r2, [pc, #432]	@ (80016e0 <xTaskIncrementTick+0x218>)
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	f000 fb62 	bl	8001bf8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001534:	4b6b      	ldr	r3, [pc, #428]	@ (80016e4 <xTaskIncrementTick+0x21c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6a3a      	ldr	r2, [r7, #32]
 800153a:	429a      	cmp	r2, r3
 800153c:	f0c0 80a8 	bcc.w	8001690 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001540:	4b65      	ldr	r3, [pc, #404]	@ (80016d8 <xTaskIncrementTick+0x210>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d104      	bne.n	8001554 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800154a:	4b66      	ldr	r3, [pc, #408]	@ (80016e4 <xTaskIncrementTick+0x21c>)
 800154c:	f04f 32ff 	mov.w	r2, #4294967295
 8001550:	601a      	str	r2, [r3, #0]
                    break;
 8001552:	e09d      	b.n	8001690 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001554:	4b60      	ldr	r3, [pc, #384]	@ (80016d8 <xTaskIncrementTick+0x210>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001564:	6a3a      	ldr	r2, [r7, #32]
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	429a      	cmp	r2, r3
 800156a:	d203      	bcs.n	8001574 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800156c:	4a5d      	ldr	r2, [pc, #372]	@ (80016e4 <xTaskIncrementTick+0x21c>)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	6013      	str	r3, [r2, #0]
                        break;
 8001572:	e08d      	b.n	8001690 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	68d2      	ldr	r2, [r2, #12]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	6892      	ldr	r2, [r2, #8]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	3304      	adds	r3, #4
 8001596:	429a      	cmp	r2, r3
 8001598:	d103      	bne.n	80015a2 <xTaskIncrementTick+0xda>
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	68da      	ldr	r2, [r3, #12]
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	2200      	movs	r2, #0
 80015a6:	615a      	str	r2, [r3, #20]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	1e5a      	subs	r2, r3, #1
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d01e      	beq.n	80015f8 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	6a12      	ldr	r2, [r2, #32]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	69d2      	ldr	r2, [r2, #28]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	3318      	adds	r3, #24
 80015dc:	429a      	cmp	r2, r3
 80015de:	d103      	bne.n	80015e8 <xTaskIncrementTick+0x120>
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	6a1a      	ldr	r2, [r3, #32]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	2200      	movs	r2, #0
 80015ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	1e5a      	subs	r2, r3, #1
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015fc:	2201      	movs	r2, #1
 80015fe:	409a      	lsls	r2, r3
 8001600:	4b39      	ldr	r3, [pc, #228]	@ (80016e8 <xTaskIncrementTick+0x220>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4313      	orrs	r3, r2
 8001606:	4a38      	ldr	r2, [pc, #224]	@ (80016e8 <xTaskIncrementTick+0x220>)
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800160e:	4937      	ldr	r1, [pc, #220]	@ (80016ec <xTaskIncrementTick+0x224>)
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	3304      	adds	r3, #4
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	3204      	adds	r2, #4
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	1d1a      	adds	r2, r3, #4
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4a27      	ldr	r2, [pc, #156]	@ (80016ec <xTaskIncrementTick+0x224>)
 800164e:	441a      	add	r2, r3
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	615a      	str	r2, [r3, #20]
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001658:	4924      	ldr	r1, [pc, #144]	@ (80016ec <xTaskIncrementTick+0x224>)
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800166a:	1c59      	adds	r1, r3, #1
 800166c:	481f      	ldr	r0, [pc, #124]	@ (80016ec <xTaskIncrementTick+0x224>)
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4403      	add	r3, r0
 8001678:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800167e:	4b1c      	ldr	r3, [pc, #112]	@ (80016f0 <xTaskIncrementTick+0x228>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001684:	429a      	cmp	r2, r3
 8001686:	f67f af5b 	bls.w	8001540 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 800168a:	2301      	movs	r3, #1
 800168c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800168e:	e757      	b.n	8001540 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8001690:	4b17      	ldr	r3, [pc, #92]	@ (80016f0 <xTaskIncrementTick+0x228>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001696:	4915      	ldr	r1, [pc, #84]	@ (80016ec <xTaskIncrementTick+0x224>)
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d901      	bls.n	80016ac <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 80016a8:	2301      	movs	r3, #1
 80016aa:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80016ac:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <xTaskIncrementTick+0x22c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d007      	beq.n	80016c4 <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 80016b4:	2301      	movs	r3, #1
 80016b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80016b8:	e004      	b.n	80016c4 <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80016ba:	4b0f      	ldr	r3, [pc, #60]	@ (80016f8 <xTaskIncrementTick+0x230>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	3301      	adds	r3, #1
 80016c0:	4a0d      	ldr	r2, [pc, #52]	@ (80016f8 <xTaskIncrementTick+0x230>)
 80016c2:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 80016c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3728      	adds	r7, #40	@ 0x28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	2000018c 	.word	0x2000018c
 80016d4:	20000168 	.word	0x20000168
 80016d8:	2000011c 	.word	0x2000011c
 80016dc:	20000120 	.word	0x20000120
 80016e0:	2000017c 	.word	0x2000017c
 80016e4:	20000184 	.word	0x20000184
 80016e8:	2000016c 	.word	0x2000016c
 80016ec:	20000090 	.word	0x20000090
 80016f0:	2000008c 	.word	0x2000008c
 80016f4:	20000178 	.word	0x20000178
 80016f8:	20000174 	.word	0x20000174

080016fc <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80016fc:	b480      	push	{r7}
 80016fe:	b087      	sub	sp, #28
 8001700:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8001702:	4b28      	ldr	r3, [pc, #160]	@ (80017a4 <vTaskSwitchContext+0xa8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800170a:	4b27      	ldr	r3, [pc, #156]	@ (80017a8 <vTaskSwitchContext+0xac>)
 800170c:	2201      	movs	r2, #1
 800170e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8001710:	e041      	b.n	8001796 <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 8001712:	4b25      	ldr	r3, [pc, #148]	@ (80017a8 <vTaskSwitchContext+0xac>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8001718:	4b24      	ldr	r3, [pc, #144]	@ (80017ac <vTaskSwitchContext+0xb0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	fab3 f383 	clz	r3, r3
 8001724:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8001726:	7afb      	ldrb	r3, [r7, #11]
 8001728:	f1c3 031f 	rsb	r3, r3, #31
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	4920      	ldr	r1, [pc, #128]	@ (80017b0 <vTaskSwitchContext+0xb4>)
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	440b      	add	r3, r1
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10b      	bne.n	800175a <vTaskSwitchContext+0x5e>
    __asm volatile
 8001742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001746:	f383 8811 	msr	BASEPRI, r3
 800174a:	f3bf 8f6f 	isb	sy
 800174e:	f3bf 8f4f 	dsb	sy
 8001752:	607b      	str	r3, [r7, #4]
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	e7fd      	b.n	8001756 <vTaskSwitchContext+0x5a>
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4a12      	ldr	r2, [pc, #72]	@ (80017b0 <vTaskSwitchContext+0xb4>)
 8001766:	4413      	add	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	3308      	adds	r3, #8
 800177c:	429a      	cmp	r2, r3
 800177e:	d103      	bne.n	8001788 <vTaskSwitchContext+0x8c>
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	68da      	ldr	r2, [r3, #12]
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	4a09      	ldr	r2, [pc, #36]	@ (80017b4 <vTaskSwitchContext+0xb8>)
 8001790:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8001792:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <vTaskSwitchContext+0xb8>)
 8001794:	681b      	ldr	r3, [r3, #0]
    }
 8001796:	bf00      	nop
 8001798:	371c      	adds	r7, #28
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	2000018c 	.word	0x2000018c
 80017a8:	20000178 	.word	0x20000178
 80017ac:	2000016c 	.word	0x2000016c
 80017b0:	20000090 	.word	0x20000090
 80017b4:	2000008c 	.word	0x2000008c

080017b8 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10b      	bne.n	80017e0 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 80017c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017cc:	f383 8811 	msr	BASEPRI, r3
 80017d0:	f3bf 8f6f 	isb	sy
 80017d4:	f3bf 8f4f 	dsb	sy
 80017d8:	60fb      	str	r3, [r7, #12]
}
 80017da:	bf00      	nop
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80017e0:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <vTaskPlaceOnEventList+0x48>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	3318      	adds	r3, #24
 80017e6:	4619      	mov	r1, r3
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7fe fee6 	bl	80005ba <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80017ee:	2101      	movs	r1, #1
 80017f0:	6838      	ldr	r0, [r7, #0]
 80017f2:	f000 fac5 	bl	8001d80 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2000008c 	.word	0x2000008c

08001804 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001804:	b480      	push	{r7}
 8001806:	b08b      	sub	sp, #44	@ 0x2c
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001814:	6a3b      	ldr	r3, [r7, #32]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10b      	bne.n	8001832 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 800181a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800181e:	f383 8811 	msr	BASEPRI, r3
 8001822:	f3bf 8f6f 	isb	sy
 8001826:	f3bf 8f4f 	dsb	sy
 800182a:	60fb      	str	r3, [r7, #12]
}
 800182c:	bf00      	nop
 800182e:	bf00      	nop
 8001830:	e7fd      	b.n	800182e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001836:	61fb      	str	r3, [r7, #28]
 8001838:	6a3b      	ldr	r3, [r7, #32]
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	6a3a      	ldr	r2, [r7, #32]
 800183e:	6a12      	ldr	r2, [r2, #32]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	6a3a      	ldr	r2, [r7, #32]
 8001848:	69d2      	ldr	r2, [r2, #28]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	6a3b      	ldr	r3, [r7, #32]
 8001852:	3318      	adds	r3, #24
 8001854:	429a      	cmp	r2, r3
 8001856:	d103      	bne.n	8001860 <xTaskRemoveFromEventList+0x5c>
 8001858:	6a3b      	ldr	r3, [r7, #32]
 800185a:	6a1a      	ldr	r2, [r3, #32]
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	2200      	movs	r2, #0
 8001864:	629a      	str	r2, [r3, #40]	@ 0x28
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	1e5a      	subs	r2, r3, #1
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001870:	4b4b      	ldr	r3, [pc, #300]	@ (80019a0 <xTaskRemoveFromEventList+0x19c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d160      	bne.n	800193a <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001878:	6a3b      	ldr	r3, [r7, #32]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	6a3a      	ldr	r2, [r7, #32]
 8001884:	68d2      	ldr	r2, [r2, #12]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	6a3b      	ldr	r3, [r7, #32]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	6a3a      	ldr	r2, [r7, #32]
 800188e:	6892      	ldr	r2, [r2, #8]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	6a3b      	ldr	r3, [r7, #32]
 8001898:	3304      	adds	r3, #4
 800189a:	429a      	cmp	r2, r3
 800189c:	d103      	bne.n	80018a6 <xTaskRemoveFromEventList+0xa2>
 800189e:	6a3b      	ldr	r3, [r7, #32]
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	2200      	movs	r2, #0
 80018aa:	615a      	str	r2, [r3, #20]
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	1e5a      	subs	r2, r3, #1
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80018b6:	6a3b      	ldr	r3, [r7, #32]
 80018b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ba:	2201      	movs	r2, #1
 80018bc:	409a      	lsls	r2, r3
 80018be:	4b39      	ldr	r3, [pc, #228]	@ (80019a4 <xTaskRemoveFromEventList+0x1a0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	4a37      	ldr	r2, [pc, #220]	@ (80019a4 <xTaskRemoveFromEventList+0x1a0>)
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018cc:	4936      	ldr	r1, [pc, #216]	@ (80019a8 <xTaskRemoveFromEventList+0x1a4>)
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	440b      	add	r3, r1
 80018d8:	3304      	adds	r3, #4
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	6a3b      	ldr	r3, [r7, #32]
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	60da      	str	r2, [r3, #12]
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	6a3a      	ldr	r2, [r7, #32]
 80018f2:	3204      	adds	r2, #4
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	1d1a      	adds	r2, r3, #4
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4a27      	ldr	r2, [pc, #156]	@ (80019a8 <xTaskRemoveFromEventList+0x1a4>)
 800190c:	441a      	add	r2, r3
 800190e:	6a3b      	ldr	r3, [r7, #32]
 8001910:	615a      	str	r2, [r3, #20]
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001916:	4924      	ldr	r1, [pc, #144]	@ (80019a8 <xTaskRemoveFromEventList+0x1a4>)
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6a3a      	ldr	r2, [r7, #32]
 8001926:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001928:	1c59      	adds	r1, r3, #1
 800192a:	481f      	ldr	r0, [pc, #124]	@ (80019a8 <xTaskRemoveFromEventList+0x1a4>)
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4403      	add	r3, r0
 8001936:	6019      	str	r1, [r3, #0]
 8001938:	e01b      	b.n	8001972 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800193a:	4b1c      	ldr	r3, [pc, #112]	@ (80019ac <xTaskRemoveFromEventList+0x1a8>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	61bb      	str	r3, [r7, #24]
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	61da      	str	r2, [r3, #28]
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	621a      	str	r2, [r3, #32]
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	6a3a      	ldr	r2, [r7, #32]
 8001954:	3218      	adds	r2, #24
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	6a3b      	ldr	r3, [r7, #32]
 800195a:	f103 0218 	add.w	r2, r3, #24
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	4a11      	ldr	r2, [pc, #68]	@ (80019ac <xTaskRemoveFromEventList+0x1a8>)
 8001966:	629a      	str	r2, [r3, #40]	@ 0x28
 8001968:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <xTaskRemoveFromEventList+0x1a8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	3301      	adds	r3, #1
 800196e:	4a0f      	ldr	r2, [pc, #60]	@ (80019ac <xTaskRemoveFromEventList+0x1a8>)
 8001970:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001976:	4b0e      	ldr	r3, [pc, #56]	@ (80019b0 <xTaskRemoveFromEventList+0x1ac>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800197c:	429a      	cmp	r2, r3
 800197e:	d905      	bls.n	800198c <xTaskRemoveFromEventList+0x188>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8001980:	2301      	movs	r3, #1
 8001982:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001984:	4b0b      	ldr	r3, [pc, #44]	@ (80019b4 <xTaskRemoveFromEventList+0x1b0>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	e001      	b.n	8001990 <xTaskRemoveFromEventList+0x18c>
        }
        else
        {
            xReturn = pdFALSE;
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8001990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001992:	4618      	mov	r0, r3
 8001994:	372c      	adds	r7, #44	@ 0x2c
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	2000018c 	.word	0x2000018c
 80019a4:	2000016c 	.word	0x2000016c
 80019a8:	20000090 	.word	0x20000090
 80019ac:	20000124 	.word	0x20000124
 80019b0:	2000008c 	.word	0x2000008c
 80019b4:	20000178 	.word	0x20000178

080019b8 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80019c0:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <vTaskInternalSetTimeOutState+0x24>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80019c8:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <vTaskInternalSetTimeOutState+0x28>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	2000017c 	.word	0x2000017c
 80019e0:	20000168 	.word	0x20000168

080019e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b088      	sub	sp, #32
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d10b      	bne.n	8001a0c <xTaskCheckForTimeOut+0x28>
    __asm volatile
 80019f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019f8:	f383 8811 	msr	BASEPRI, r3
 80019fc:	f3bf 8f6f 	isb	sy
 8001a00:	f3bf 8f4f 	dsb	sy
 8001a04:	613b      	str	r3, [r7, #16]
}
 8001a06:	bf00      	nop
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10b      	bne.n	8001a2a <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8001a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a16:	f383 8811 	msr	BASEPRI, r3
 8001a1a:	f3bf 8f6f 	isb	sy
 8001a1e:	f3bf 8f4f 	dsb	sy
 8001a22:	60fb      	str	r3, [r7, #12]
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	e7fd      	b.n	8001a26 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8001a2a:	f000 fbab 	bl	8002184 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001aac <xTaskCheckForTimeOut+0xc8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a46:	d102      	bne.n	8001a4e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
 8001a4c:	e026      	b.n	8001a9c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	4b17      	ldr	r3, [pc, #92]	@ (8001ab0 <xTaskCheckForTimeOut+0xcc>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d00a      	beq.n	8001a70 <xTaskCheckForTimeOut+0x8c>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d305      	bcc.n	8001a70 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001a64:	2301      	movs	r3, #1
 8001a66:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	e015      	b.n	8001a9c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d20b      	bcs.n	8001a92 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	1ad2      	subs	r2, r2, r3
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ff96 	bl	80019b8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]
 8001a90:	e004      	b.n	8001a9c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001a9c:	f000 fba4 	bl	80021e8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8001aa0:	69fb      	ldr	r3, [r7, #28]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3720      	adds	r7, #32
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000168 	.word	0x20000168
 8001ab0:	2000017c 	.word	0x2000017c

08001ab4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8001ab8:	4b03      	ldr	r3, [pc, #12]	@ (8001ac8 <vTaskMissedYield+0x14>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8001abe:	bf00      	nop
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	20000178 	.word	0x20000178

08001acc <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001ad4:	f000 f852 	bl	8001b7c <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <prvIdleTask+0x28>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d9f9      	bls.n	8001ad4 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001ae0:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <prvIdleTask+0x2c>)
 8001ae2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	f3bf 8f4f 	dsb	sy
 8001aec:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001af0:	e7f0      	b.n	8001ad4 <prvIdleTask+0x8>
 8001af2:	bf00      	nop
 8001af4:	20000090 	.word	0x20000090
 8001af8:	e000ed04 	.word	0xe000ed04

08001afc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b02:	2300      	movs	r3, #0
 8001b04:	607b      	str	r3, [r7, #4]
 8001b06:	e00c      	b.n	8001b22 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4a12      	ldr	r2, [pc, #72]	@ (8001b5c <prvInitialiseTaskLists+0x60>)
 8001b14:	4413      	add	r3, r2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fd22 	bl	8000560 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	607b      	str	r3, [r7, #4]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d9ef      	bls.n	8001b08 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001b28:	480d      	ldr	r0, [pc, #52]	@ (8001b60 <prvInitialiseTaskLists+0x64>)
 8001b2a:	f7fe fd19 	bl	8000560 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001b2e:	480d      	ldr	r0, [pc, #52]	@ (8001b64 <prvInitialiseTaskLists+0x68>)
 8001b30:	f7fe fd16 	bl	8000560 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001b34:	480c      	ldr	r0, [pc, #48]	@ (8001b68 <prvInitialiseTaskLists+0x6c>)
 8001b36:	f7fe fd13 	bl	8000560 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001b3a:	480c      	ldr	r0, [pc, #48]	@ (8001b6c <prvInitialiseTaskLists+0x70>)
 8001b3c:	f7fe fd10 	bl	8000560 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001b40:	480b      	ldr	r0, [pc, #44]	@ (8001b70 <prvInitialiseTaskLists+0x74>)
 8001b42:	f7fe fd0d 	bl	8000560 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001b46:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <prvInitialiseTaskLists+0x78>)
 8001b48:	4a05      	ldr	r2, [pc, #20]	@ (8001b60 <prvInitialiseTaskLists+0x64>)
 8001b4a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b78 <prvInitialiseTaskLists+0x7c>)
 8001b4e:	4a05      	ldr	r2, [pc, #20]	@ (8001b64 <prvInitialiseTaskLists+0x68>)
 8001b50:	601a      	str	r2, [r3, #0]
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000090 	.word	0x20000090
 8001b60:	200000f4 	.word	0x200000f4
 8001b64:	20000108 	.word	0x20000108
 8001b68:	20000124 	.word	0x20000124
 8001b6c:	20000138 	.word	0x20000138
 8001b70:	20000150 	.word	0x20000150
 8001b74:	2000011c 	.word	0x2000011c
 8001b78:	20000120 	.word	0x20000120

08001b7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001b82:	e019      	b.n	8001bb8 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8001b84:	f000 fafe 	bl	8002184 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001b88:	4b10      	ldr	r3, [pc, #64]	@ (8001bcc <prvCheckTasksWaitingTermination+0x50>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3304      	adds	r3, #4
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fd49 	bl	800062c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd0 <prvCheckTasksWaitingTermination+0x54>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	4a0b      	ldr	r2, [pc, #44]	@ (8001bd0 <prvCheckTasksWaitingTermination+0x54>)
 8001ba2:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd4 <prvCheckTasksWaitingTermination+0x58>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd4 <prvCheckTasksWaitingTermination+0x58>)
 8001bac:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8001bae:	f000 fb1b 	bl	80021e8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f810 	bl	8001bd8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001bb8:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <prvCheckTasksWaitingTermination+0x58>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1e1      	bne.n	8001b84 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000138 	.word	0x20000138
 8001bd0:	20000164 	.word	0x20000164
 8001bd4:	2000014c 	.word	0x2000014c

08001bd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 fbfd 	bl	80023e4 <vPortFree>
            vPortFree( pxTCB );
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 fbfa 	bl	80023e4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <prvResetNextTaskUnblockTime+0x30>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d104      	bne.n	8001c10 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001c06:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <prvResetNextTaskUnblockTime+0x34>)
 8001c08:	f04f 32ff 	mov.w	r2, #4294967295
 8001c0c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001c0e:	e005      	b.n	8001c1c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001c10:	4b05      	ldr	r3, [pc, #20]	@ (8001c28 <prvResetNextTaskUnblockTime+0x30>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a04      	ldr	r2, [pc, #16]	@ (8001c2c <prvResetNextTaskUnblockTime+0x34>)
 8001c1a:	6013      	str	r3, [r2, #0]
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	2000011c 	.word	0x2000011c
 8001c2c:	20000184 	.word	0x20000184

08001c30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 8090 	beq.w	8001d68 <xTaskPriorityDisinherit+0x138>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001c48:	4b4a      	ldr	r3, [pc, #296]	@ (8001d74 <xTaskPriorityDisinherit+0x144>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d00b      	beq.n	8001c6a <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 8001c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c56:	f383 8811 	msr	BASEPRI, r3
 8001c5a:	f3bf 8f6f 	isb	sy
 8001c5e:	f3bf 8f4f 	dsb	sy
 8001c62:	613b      	str	r3, [r7, #16]
}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	e7fd      	b.n	8001c66 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10b      	bne.n	8001c8a <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 8001c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c76:	f383 8811 	msr	BASEPRI, r3
 8001c7a:	f3bf 8f6f 	isb	sy
 8001c7e:	f3bf 8f4f 	dsb	sy
 8001c82:	60fb      	str	r3, [r7, #12]
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	e7fd      	b.n	8001c86 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8e:	1e5a      	subs	r2, r3, #1
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d063      	beq.n	8001d68 <xTaskPriorityDisinherit+0x138>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d15f      	bne.n	8001d68 <xTaskPriorityDisinherit+0x138>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	3304      	adds	r3, #4
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fcbd 	bl	800062c <uxListRemove>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10a      	bne.n	8001cce <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	4b2c      	ldr	r3, [pc, #176]	@ (8001d78 <xTaskPriorityDisinherit+0x148>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	4a2b      	ldr	r2, [pc, #172]	@ (8001d78 <xTaskPriorityDisinherit+0x148>)
 8001ccc:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cda:	f1c3 0205 	rsb	r2, r3, #5
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	4b23      	ldr	r3, [pc, #140]	@ (8001d78 <xTaskPriorityDisinherit+0x148>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	4a21      	ldr	r2, [pc, #132]	@ (8001d78 <xTaskPriorityDisinherit+0x148>)
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cf8:	4920      	ldr	r1, [pc, #128]	@ (8001d7c <xTaskPriorityDisinherit+0x14c>)
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	440b      	add	r3, r1
 8001d04:	3304      	adds	r3, #4
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	60da      	str	r2, [r3, #12]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	3204      	adds	r2, #4
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	1d1a      	adds	r2, r3, #4
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4a11      	ldr	r2, [pc, #68]	@ (8001d7c <xTaskPriorityDisinherit+0x14c>)
 8001d38:	441a      	add	r2, r3
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	615a      	str	r2, [r3, #20]
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d42:	490e      	ldr	r1, [pc, #56]	@ (8001d7c <xTaskPriorityDisinherit+0x14c>)
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001d54:	1c59      	adds	r1, r3, #1
 8001d56:	4809      	ldr	r0, [pc, #36]	@ (8001d7c <xTaskPriorityDisinherit+0x14c>)
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4403      	add	r3, r0
 8001d62:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001d64:	2301      	movs	r3, #1
 8001d66:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8001d68:	69fb      	ldr	r3, [r7, #28]
    }
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3720      	adds	r7, #32
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	2000008c 	.word	0x2000008c
 8001d78:	2000016c 	.word	0x2000016c
 8001d7c:	20000090 	.word	0x20000090

08001d80 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001d8a:	4b37      	ldr	r3, [pc, #220]	@ (8001e68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8001d90:	4b36      	ldr	r3, [pc, #216]	@ (8001e6c <prvAddCurrentTaskToDelayedList+0xec>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8001d96:	4b36      	ldr	r3, [pc, #216]	@ (8001e70 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d9c:	4b35      	ldr	r3, [pc, #212]	@ (8001e74 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	3304      	adds	r3, #4
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fc42 	bl	800062c <uxListRemove>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10b      	bne.n	8001dc6 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001dae:	4b31      	ldr	r3, [pc, #196]	@ (8001e74 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db4:	2201      	movs	r2, #1
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43da      	mvns	r2, r3
 8001dbc:	4b2e      	ldr	r3, [pc, #184]	@ (8001e78 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	4a2d      	ldr	r2, [pc, #180]	@ (8001e78 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001dc4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dcc:	d124      	bne.n	8001e18 <prvAddCurrentTaskToDelayedList+0x98>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d021      	beq.n	8001e18 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001dd4:	4b29      	ldr	r3, [pc, #164]	@ (8001e7c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	4b26      	ldr	r3, [pc, #152]	@ (8001e74 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	4b24      	ldr	r3, [pc, #144]	@ (8001e74 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	6892      	ldr	r2, [r2, #8]
 8001dea:	60da      	str	r2, [r3, #12]
 8001dec:	4b21      	ldr	r3, [pc, #132]	@ (8001e74 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	3204      	adds	r2, #4
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e74 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	1d1a      	adds	r2, r3, #4
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	4b1c      	ldr	r3, [pc, #112]	@ (8001e74 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a1d      	ldr	r2, [pc, #116]	@ (8001e7c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001e08:	615a      	str	r2, [r3, #20]
 8001e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001e7c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	4a1a      	ldr	r2, [pc, #104]	@ (8001e7c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001e16:	e022      	b.n	8001e5e <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001e18:	69fa      	ldr	r2, [r7, #28]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001e20:	4b14      	ldr	r3, [pc, #80]	@ (8001e74 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d207      	bcs.n	8001e40 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8001e30:	4b10      	ldr	r3, [pc, #64]	@ (8001e74 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	3304      	adds	r3, #4
 8001e36:	4619      	mov	r1, r3
 8001e38:	6978      	ldr	r0, [r7, #20]
 8001e3a:	f7fe fbbe 	bl	80005ba <vListInsert>
}
 8001e3e:	e00e      	b.n	8001e5e <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8001e40:	4b0c      	ldr	r3, [pc, #48]	@ (8001e74 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	3304      	adds	r3, #4
 8001e46:	4619      	mov	r1, r3
 8001e48:	69b8      	ldr	r0, [r7, #24]
 8001e4a:	f7fe fbb6 	bl	80005ba <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e80 <prvAddCurrentTaskToDelayedList+0x100>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d202      	bcs.n	8001e5e <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8001e58:	4a09      	ldr	r2, [pc, #36]	@ (8001e80 <prvAddCurrentTaskToDelayedList+0x100>)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6013      	str	r3, [r2, #0]
}
 8001e5e:	bf00      	nop
 8001e60:	3720      	adds	r7, #32
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000168 	.word	0x20000168
 8001e6c:	2000011c 	.word	0x2000011c
 8001e70:	20000120 	.word	0x20000120
 8001e74:	2000008c 	.word	0x2000008c
 8001e78:	2000016c 	.word	0x2000016c
 8001e7c:	20000150 	.word	0x20000150
 8001e80:	20000184 	.word	0x20000184

08001e84 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	3b04      	subs	r3, #4
 8001e94:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e9c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	3b04      	subs	r3, #4
 8001ea2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	f023 0201 	bic.w	r2, r3, #1
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	3b04      	subs	r3, #4
 8001eb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee8 <pxPortInitialiseStack+0x64>)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	3b14      	subs	r3, #20
 8001ebe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	3b04      	subs	r3, #4
 8001eca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f06f 0202 	mvn.w	r2, #2
 8001ed2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	3b20      	subs	r3, #32
 8001ed8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001eda:	68fb      	ldr	r3, [r7, #12]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	08001eed 	.word	0x08001eed

08001eec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001ef6:	4b13      	ldr	r3, [pc, #76]	@ (8001f44 <prvTaskExitError+0x58>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efe:	d00b      	beq.n	8001f18 <prvTaskExitError+0x2c>
    __asm volatile
 8001f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f04:	f383 8811 	msr	BASEPRI, r3
 8001f08:	f3bf 8f6f 	isb	sy
 8001f0c:	f3bf 8f4f 	dsb	sy
 8001f10:	60fb      	str	r3, [r7, #12]
}
 8001f12:	bf00      	nop
 8001f14:	bf00      	nop
 8001f16:	e7fd      	b.n	8001f14 <prvTaskExitError+0x28>
    __asm volatile
 8001f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f1c:	f383 8811 	msr	BASEPRI, r3
 8001f20:	f3bf 8f6f 	isb	sy
 8001f24:	f3bf 8f4f 	dsb	sy
 8001f28:	60bb      	str	r3, [r7, #8]
}
 8001f2a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001f2c:	bf00      	nop
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0fc      	beq.n	8001f2e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001f34:	bf00      	nop
 8001f36:	bf00      	nop
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20000004 	.word	0x20000004
	...

08001f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001f50:	4b07      	ldr	r3, [pc, #28]	@ (8001f70 <pxCurrentTCBConst2>)
 8001f52:	6819      	ldr	r1, [r3, #0]
 8001f54:	6808      	ldr	r0, [r1, #0]
 8001f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f5a:	f380 8809 	msr	PSP, r0
 8001f5e:	f3bf 8f6f 	isb	sy
 8001f62:	f04f 0000 	mov.w	r0, #0
 8001f66:	f380 8811 	msr	BASEPRI, r0
 8001f6a:	4770      	bx	lr
 8001f6c:	f3af 8000 	nop.w

08001f70 <pxCurrentTCBConst2>:
 8001f70:	2000008c 	.word	0x2000008c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop

08001f78 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001f78:	4808      	ldr	r0, [pc, #32]	@ (8001f9c <prvPortStartFirstTask+0x24>)
 8001f7a:	6800      	ldr	r0, [r0, #0]
 8001f7c:	6800      	ldr	r0, [r0, #0]
 8001f7e:	f380 8808 	msr	MSP, r0
 8001f82:	f04f 0000 	mov.w	r0, #0
 8001f86:	f380 8814 	msr	CONTROL, r0
 8001f8a:	b662      	cpsie	i
 8001f8c:	b661      	cpsie	f
 8001f8e:	f3bf 8f4f 	dsb	sy
 8001f92:	f3bf 8f6f 	isb	sy
 8001f96:	df00      	svc	0
 8001f98:	bf00      	nop
 8001f9a:	0000      	.short	0x0000
 8001f9c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop

08001fa4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	@ 0x30
 8001fa8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001faa:	4b69      	ldr	r3, [pc, #420]	@ (8002150 <xPortStartScheduler+0x1ac>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a69      	ldr	r2, [pc, #420]	@ (8002154 <xPortStartScheduler+0x1b0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d10b      	bne.n	8001fcc <xPortStartScheduler+0x28>
    __asm volatile
 8001fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fb8:	f383 8811 	msr	BASEPRI, r3
 8001fbc:	f3bf 8f6f 	isb	sy
 8001fc0:	f3bf 8f4f 	dsb	sy
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001fc6:	bf00      	nop
 8001fc8:	bf00      	nop
 8001fca:	e7fd      	b.n	8001fc8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001fcc:	4b60      	ldr	r3, [pc, #384]	@ (8002150 <xPortStartScheduler+0x1ac>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a61      	ldr	r2, [pc, #388]	@ (8002158 <xPortStartScheduler+0x1b4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d10b      	bne.n	8001fee <xPortStartScheduler+0x4a>
    __asm volatile
 8001fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fda:	f383 8811 	msr	BASEPRI, r3
 8001fde:	f3bf 8f6f 	isb	sy
 8001fe2:	f3bf 8f4f 	dsb	sy
 8001fe6:	623b      	str	r3, [r7, #32]
}
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
 8001fec:	e7fd      	b.n	8001fea <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8001fee:	4b5b      	ldr	r3, [pc, #364]	@ (800215c <xPortStartScheduler+0x1b8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8001ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ff6:	332c      	adds	r3, #44	@ 0x2c
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a59      	ldr	r2, [pc, #356]	@ (8002160 <xPortStartScheduler+0x1bc>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d00b      	beq.n	8002018 <xPortStartScheduler+0x74>
    __asm volatile
 8002000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002004:	f383 8811 	msr	BASEPRI, r3
 8002008:	f3bf 8f6f 	isb	sy
 800200c:	f3bf 8f4f 	dsb	sy
 8002010:	61fb      	str	r3, [r7, #28]
}
 8002012:	bf00      	nop
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8002018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800201a:	3338      	adds	r3, #56	@ 0x38
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a51      	ldr	r2, [pc, #324]	@ (8002164 <xPortStartScheduler+0x1c0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d00b      	beq.n	800203c <xPortStartScheduler+0x98>
    __asm volatile
 8002024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002028:	f383 8811 	msr	BASEPRI, r3
 800202c:	f3bf 8f6f 	isb	sy
 8002030:	f3bf 8f4f 	dsb	sy
 8002034:	61bb      	str	r3, [r7, #24]
}
 8002036:	bf00      	nop
 8002038:	bf00      	nop
 800203a:	e7fd      	b.n	8002038 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002040:	4b49      	ldr	r3, [pc, #292]	@ (8002168 <xPortStartScheduler+0x1c4>)
 8002042:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8002044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800204c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800204e:	22ff      	movs	r2, #255	@ 0xff
 8002050:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002062:	b2da      	uxtb	r2, r3
 8002064:	4b41      	ldr	r3, [pc, #260]	@ (800216c <xPortStartScheduler+0x1c8>)
 8002066:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8002068:	4b40      	ldr	r3, [pc, #256]	@ (800216c <xPortStartScheduler+0x1c8>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10b      	bne.n	8002088 <xPortStartScheduler+0xe4>
    __asm volatile
 8002070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002074:	f383 8811 	msr	BASEPRI, r3
 8002078:	f3bf 8f6f 	isb	sy
 800207c:	f3bf 8f4f 	dsb	sy
 8002080:	617b      	str	r3, [r7, #20]
}
 8002082:	bf00      	nop
 8002084:	bf00      	nop
 8002086:	e7fd      	b.n	8002084 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002092:	2b00      	cmp	r3, #0
 8002094:	d013      	beq.n	80020be <xPortStartScheduler+0x11a>
    __asm volatile
 8002096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800209a:	f383 8811 	msr	BASEPRI, r3
 800209e:	f3bf 8f6f 	isb	sy
 80020a2:	f3bf 8f4f 	dsb	sy
 80020a6:	613b      	str	r3, [r7, #16]
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	e7fd      	b.n	80020aa <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	3301      	adds	r3, #1
 80020b2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020c6:	2b80      	cmp	r3, #128	@ 0x80
 80020c8:	d0f1      	beq.n	80020ae <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d103      	bne.n	80020d8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80020d0:	4b27      	ldr	r3, [pc, #156]	@ (8002170 <xPortStartScheduler+0x1cc>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	e004      	b.n	80020e2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f1c3 0307 	rsb	r3, r3, #7
 80020de:	4a24      	ldr	r2, [pc, #144]	@ (8002170 <xPortStartScheduler+0x1cc>)
 80020e0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80020e2:	4b23      	ldr	r3, [pc, #140]	@ (8002170 <xPortStartScheduler+0x1cc>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	021b      	lsls	r3, r3, #8
 80020e8:	4a21      	ldr	r2, [pc, #132]	@ (8002170 <xPortStartScheduler+0x1cc>)
 80020ea:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80020ec:	4b20      	ldr	r3, [pc, #128]	@ (8002170 <xPortStartScheduler+0x1cc>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80020f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002170 <xPortStartScheduler+0x1cc>)
 80020f6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020fe:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002100:	4b1c      	ldr	r3, [pc, #112]	@ (8002174 <xPortStartScheduler+0x1d0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a1b      	ldr	r2, [pc, #108]	@ (8002174 <xPortStartScheduler+0x1d0>)
 8002106:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800210a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800210c:	4b19      	ldr	r3, [pc, #100]	@ (8002174 <xPortStartScheduler+0x1d0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a18      	ldr	r2, [pc, #96]	@ (8002174 <xPortStartScheduler+0x1d0>)
 8002112:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002116:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8002118:	4b17      	ldr	r3, [pc, #92]	@ (8002178 <xPortStartScheduler+0x1d4>)
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800211e:	f000 f8e5 	bl	80022ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002122:	4b16      	ldr	r3, [pc, #88]	@ (800217c <xPortStartScheduler+0x1d8>)
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002128:	f000 f8fc 	bl	8002324 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800212c:	4b14      	ldr	r3, [pc, #80]	@ (8002180 <xPortStartScheduler+0x1dc>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a13      	ldr	r2, [pc, #76]	@ (8002180 <xPortStartScheduler+0x1dc>)
 8002132:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002136:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002138:	f7ff ff1e 	bl	8001f78 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800213c:	f7ff fade 	bl	80016fc <vTaskSwitchContext>
    prvTaskExitError();
 8002140:	f7ff fed4 	bl	8001eec <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3730      	adds	r7, #48	@ 0x30
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	e000ed00 	.word	0xe000ed00
 8002154:	410fc271 	.word	0x410fc271
 8002158:	410fc270 	.word	0x410fc270
 800215c:	e000ed08 	.word	0xe000ed08
 8002160:	08001f51 	.word	0x08001f51
 8002164:	08002241 	.word	0x08002241
 8002168:	e000e400 	.word	0xe000e400
 800216c:	20000190 	.word	0x20000190
 8002170:	20000194 	.word	0x20000194
 8002174:	e000ed20 	.word	0xe000ed20
 8002178:	e000ed1c 	.word	0xe000ed1c
 800217c:	20000004 	.word	0x20000004
 8002180:	e000ef34 	.word	0xe000ef34

08002184 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
    __asm volatile
 800218a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800218e:	f383 8811 	msr	BASEPRI, r3
 8002192:	f3bf 8f6f 	isb	sy
 8002196:	f3bf 8f4f 	dsb	sy
 800219a:	607b      	str	r3, [r7, #4]
}
 800219c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800219e:	4b10      	ldr	r3, [pc, #64]	@ (80021e0 <vPortEnterCritical+0x5c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	3301      	adds	r3, #1
 80021a4:	4a0e      	ldr	r2, [pc, #56]	@ (80021e0 <vPortEnterCritical+0x5c>)
 80021a6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80021a8:	4b0d      	ldr	r3, [pc, #52]	@ (80021e0 <vPortEnterCritical+0x5c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d110      	bne.n	80021d2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80021b0:	4b0c      	ldr	r3, [pc, #48]	@ (80021e4 <vPortEnterCritical+0x60>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00b      	beq.n	80021d2 <vPortEnterCritical+0x4e>
    __asm volatile
 80021ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021be:	f383 8811 	msr	BASEPRI, r3
 80021c2:	f3bf 8f6f 	isb	sy
 80021c6:	f3bf 8f4f 	dsb	sy
 80021ca:	603b      	str	r3, [r7, #0]
}
 80021cc:	bf00      	nop
 80021ce:	bf00      	nop
 80021d0:	e7fd      	b.n	80021ce <vPortEnterCritical+0x4a>
    }
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000004 	.word	0x20000004
 80021e4:	e000ed04 	.word	0xe000ed04

080021e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80021ee:	4b12      	ldr	r3, [pc, #72]	@ (8002238 <vPortExitCritical+0x50>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10b      	bne.n	800220e <vPortExitCritical+0x26>
    __asm volatile
 80021f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021fa:	f383 8811 	msr	BASEPRI, r3
 80021fe:	f3bf 8f6f 	isb	sy
 8002202:	f3bf 8f4f 	dsb	sy
 8002206:	607b      	str	r3, [r7, #4]
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	e7fd      	b.n	800220a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800220e:	4b0a      	ldr	r3, [pc, #40]	@ (8002238 <vPortExitCritical+0x50>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	3b01      	subs	r3, #1
 8002214:	4a08      	ldr	r2, [pc, #32]	@ (8002238 <vPortExitCritical+0x50>)
 8002216:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002218:	4b07      	ldr	r3, [pc, #28]	@ (8002238 <vPortExitCritical+0x50>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d105      	bne.n	800222c <vPortExitCritical+0x44>
 8002220:	2300      	movs	r3, #0
 8002222:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800222a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	20000004 	.word	0x20000004
 800223c:	00000000 	.word	0x00000000

08002240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002240:	f3ef 8009 	mrs	r0, PSP
 8002244:	f3bf 8f6f 	isb	sy
 8002248:	4b15      	ldr	r3, [pc, #84]	@ (80022a0 <pxCurrentTCBConst>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	f01e 0f10 	tst.w	lr, #16
 8002250:	bf08      	it	eq
 8002252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800225a:	6010      	str	r0, [r2, #0]
 800225c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002260:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002264:	f380 8811 	msr	BASEPRI, r0
 8002268:	f3bf 8f4f 	dsb	sy
 800226c:	f3bf 8f6f 	isb	sy
 8002270:	f7ff fa44 	bl	80016fc <vTaskSwitchContext>
 8002274:	f04f 0000 	mov.w	r0, #0
 8002278:	f380 8811 	msr	BASEPRI, r0
 800227c:	bc09      	pop	{r0, r3}
 800227e:	6819      	ldr	r1, [r3, #0]
 8002280:	6808      	ldr	r0, [r1, #0]
 8002282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002286:	f01e 0f10 	tst.w	lr, #16
 800228a:	bf08      	it	eq
 800228c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002290:	f380 8809 	msr	PSP, r0
 8002294:	f3bf 8f6f 	isb	sy
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	f3af 8000 	nop.w

080022a0 <pxCurrentTCBConst>:
 80022a0:	2000008c 	.word	0x2000008c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop

080022a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
    __asm volatile
 80022ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022b2:	f383 8811 	msr	BASEPRI, r3
 80022b6:	f3bf 8f6f 	isb	sy
 80022ba:	f3bf 8f4f 	dsb	sy
 80022be:	607b      	str	r3, [r7, #4]
}
 80022c0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80022c2:	f7ff f901 	bl	80014c8 <xTaskIncrementTick>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80022cc:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <SysTick_Handler+0x40>)
 80022ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	2300      	movs	r3, #0
 80022d6:	603b      	str	r3, [r7, #0]
    __asm volatile
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	f383 8811 	msr	BASEPRI, r3
}
 80022de:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	e000ed04 	.word	0xe000ed04

080022ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80022f0:	4b08      	ldr	r3, [pc, #32]	@ (8002314 <vPortSetupTimerInterrupt+0x28>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80022f6:	4b08      	ldr	r3, [pc, #32]	@ (8002318 <vPortSetupTimerInterrupt+0x2c>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80022fc:	4b07      	ldr	r3, [pc, #28]	@ (800231c <vPortSetupTimerInterrupt+0x30>)
 80022fe:	4a08      	ldr	r2, [pc, #32]	@ (8002320 <vPortSetupTimerInterrupt+0x34>)
 8002300:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002302:	4b04      	ldr	r3, [pc, #16]	@ (8002314 <vPortSetupTimerInterrupt+0x28>)
 8002304:	2207      	movs	r2, #7
 8002306:	601a      	str	r2, [r3, #0]
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000e010 	.word	0xe000e010
 8002318:	e000e018 	.word	0xe000e018
 800231c:	e000e014 	.word	0xe000e014
 8002320:	0002903f 	.word	0x0002903f

08002324 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002324:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002334 <vPortEnableVFP+0x10>
 8002328:	6801      	ldr	r1, [r0, #0]
 800232a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800232e:	6001      	str	r1, [r0, #0]
 8002330:	4770      	bx	lr
 8002332:	0000      	.short	0x0000
 8002334:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8002338:	bf00      	nop
 800233a:	bf00      	nop

0800233c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00e      	beq.n	8002370 <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f023 0307 	bic.w	r3, r3, #7
 8002358:	3308      	adds	r3, #8
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	429a      	cmp	r2, r3
 800235e:	d205      	bcs.n	800236c <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f023 0307 	bic.w	r3, r3, #7
 8002366:	3308      	adds	r3, #8
 8002368:	607b      	str	r3, [r7, #4]
 800236a:	e001      	b.n	8002370 <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8002370:	f7fe ff94 	bl	800129c <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8002374:	4b17      	ldr	r3, [pc, #92]	@ (80023d4 <pvPortMalloc+0x98>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d105      	bne.n	8002388 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800237c:	4b16      	ldr	r3, [pc, #88]	@ (80023d8 <pvPortMalloc+0x9c>)
 800237e:	f023 0307 	bic.w	r3, r3, #7
 8002382:	461a      	mov	r2, r3
 8002384:	4b13      	ldr	r3, [pc, #76]	@ (80023d4 <pvPortMalloc+0x98>)
 8002386:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d01a      	beq.n	80023c4 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800238e:	4b13      	ldr	r3, [pc, #76]	@ (80023dc <pvPortMalloc+0xa0>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8002396:	4a12      	ldr	r2, [pc, #72]	@ (80023e0 <pvPortMalloc+0xa4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d813      	bhi.n	80023c4 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 800239c:	4b0f      	ldr	r3, [pc, #60]	@ (80023dc <pvPortMalloc+0xa0>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	441a      	add	r2, r3
 80023a4:	4b0d      	ldr	r3, [pc, #52]	@ (80023dc <pvPortMalloc+0xa0>)
 80023a6:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d90b      	bls.n	80023c4 <pvPortMalloc+0x88>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 80023ac:	4b09      	ldr	r3, [pc, #36]	@ (80023d4 <pvPortMalloc+0x98>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b0a      	ldr	r3, [pc, #40]	@ (80023dc <pvPortMalloc+0xa0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4413      	add	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 80023b8:	4b08      	ldr	r3, [pc, #32]	@ (80023dc <pvPortMalloc+0xa0>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4413      	add	r3, r2
 80023c0:	4a06      	ldr	r2, [pc, #24]	@ (80023dc <pvPortMalloc+0xa0>)
 80023c2:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80023c4:	f7fe ff78 	bl	80012b8 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 80023c8:	68fb      	ldr	r3, [r7, #12]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20012d9c 	.word	0x20012d9c
 80023d8:	2000019f 	.word	0x2000019f
 80023dc:	20012d98 	.word	0x20012d98
 80023e0:	00012bf7 	.word	0x00012bf7

080023e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00b      	beq.n	800240a <vPortFree+0x26>
    __asm volatile
 80023f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023f6:	f383 8811 	msr	BASEPRI, r3
 80023fa:	f3bf 8f6f 	isb	sy
 80023fe:	f3bf 8f4f 	dsb	sy
 8002402:	60fb      	str	r3, [r7, #12]
}
 8002404:	bf00      	nop
 8002406:	bf00      	nop
 8002408:	e7fd      	b.n	8002406 <vPortFree+0x22>
}
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	srand(time(NULL));
 800241e:	2000      	movs	r0, #0
 8002420:	f002 f8b8 	bl	8004594 <time>
 8002424:	4603      	mov	r3, r0
 8002426:	4618      	mov	r0, r3
 8002428:	f001 ff78 	bl	800431c <srand>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800242c:	f000 fd52 	bl	8002ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002430:	f000 f84a 	bl	80024c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002434:	f000 f8a6 	bl	8002584 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  const TickType_t xTimerPeriod = mainTIMER_SEND_FREQUENCY_MS;
 8002438:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800243c:	607b      	str	r3, [r7, #4]

    	/* Create the queue. */
    	xQueue = xQueueCreate( mainQUEUE_LENGTH, sizeof( uint32_t ) );
 800243e:	2200      	movs	r2, #0
 8002440:	2104      	movs	r1, #4
 8002442:	2003      	movs	r0, #3
 8002444:	f7fe f9ae 	bl	80007a4 <xQueueGenericCreate>
 8002448:	4603      	mov	r3, r0
 800244a:	4a17      	ldr	r2, [pc, #92]	@ (80024a8 <main+0x90>)
 800244c:	6013      	str	r3, [r2, #0]
      /* USER CODE BEGIN 1 */
    	if( xQueue != NULL )
 800244e:	4b16      	ldr	r3, [pc, #88]	@ (80024a8 <main+0x90>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d020      	beq.n	8002498 <main+0x80>
    		{
  		xTaskCreate( prvStartDefaultTask,			/* The function that implements the task. */
 8002456:	2300      	movs	r3, #0
 8002458:	9301      	str	r3, [sp, #4]
 800245a:	2303      	movs	r3, #3
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	2300      	movs	r3, #0
 8002460:	2282      	movs	r2, #130	@ 0x82
 8002462:	4912      	ldr	r1, [pc, #72]	@ (80024ac <main+0x94>)
 8002464:	4812      	ldr	r0, [pc, #72]	@ (80024b0 <main+0x98>)
 8002466:	f7fe fd0f 	bl	8000e88 <xTaskCreate>
  							configMINIMAL_STACK_SIZE, 		/* The size of the stack to allocate to the task. */
  							NULL, 							/* The parameter passed to the task - not used in this simple case. */
  							mainONE_LEDTASK_PRIORITY,/* The priority assigned to the task. */
  							NULL );							/* The task handle is not required, so NULL is passed. */

  		xTaskCreate( prvStartTask02, "Other LED", configMINIMAL_STACK_SIZE, NULL, mainOTHER_LED_TASK_PRIORITY, NULL );
 800246a:	2300      	movs	r3, #0
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	2302      	movs	r3, #2
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	2300      	movs	r3, #0
 8002474:	2282      	movs	r2, #130	@ 0x82
 8002476:	490f      	ldr	r1, [pc, #60]	@ (80024b4 <main+0x9c>)
 8002478:	480f      	ldr	r0, [pc, #60]	@ (80024b8 <main+0xa0>)
 800247a:	f7fe fd05 	bl	8000e88 <xTaskCreate>
  		xTaskCreate( prvStartTask03, "Other LED2", configMINIMAL_STACK_SIZE, NULL, mainOTHER2_LED_TASK_PRIORITY, NULL );
 800247e:	2300      	movs	r3, #0
 8002480:	9301      	str	r3, [sp, #4]
 8002482:	2301      	movs	r3, #1
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	2300      	movs	r3, #0
 8002488:	2282      	movs	r2, #130	@ 0x82
 800248a:	490c      	ldr	r1, [pc, #48]	@ (80024bc <main+0xa4>)
 800248c:	480c      	ldr	r0, [pc, #48]	@ (80024c0 <main+0xa8>)
 800248e:	f7fe fcfb 	bl	8000e88 <xTaskCreate>
//  		if( xTimer != NULL )
//  				{
//  					xTimerStart( xTimer, 0 );
//  				}
  //	  /* Start the scheduler so the tasks start executing. */
  	  vTaskStartScheduler();
 8002492:	f7fe fec5 	bl	8001220 <vTaskStartScheduler>
 8002496:	e005      	b.n	80024a4 <main+0x8c>
  	}
  	else
  	{
  		//throw led if queue can't be created.. debug led
  		HAL_GPIO_TogglePin( GPIOD, GPIO_PIN_12 );
 8002498:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800249c:	4809      	ldr	r0, [pc, #36]	@ (80024c4 <main+0xac>)
 800249e:	f001 f80a 	bl	80034b6 <HAL_GPIO_TogglePin>
  	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80024a2:	bf00      	nop
 80024a4:	bf00      	nop
 80024a6:	e7fd      	b.n	80024a4 <main+0x8c>
 80024a8:	20012da0 	.word	0x20012da0
 80024ac:	08005360 	.word	0x08005360
 80024b0:	08002629 	.word	0x08002629
 80024b4:	08005368 	.word	0x08005368
 80024b8:	08002705 	.word	0x08002705
 80024bc:	08005374 	.word	0x08005374
 80024c0:	08002b11 	.word	0x08002b11
 80024c4:	40020c00 	.word	0x40020c00

080024c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b094      	sub	sp, #80	@ 0x50
 80024cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ce:	f107 0320 	add.w	r3, r7, #32
 80024d2:	2230      	movs	r2, #48	@ 0x30
 80024d4:	2100      	movs	r1, #0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f002 f853 	bl	8004582 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024dc:	f107 030c 	add.w	r3, r7, #12
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ec:	2300      	movs	r3, #0
 80024ee:	60bb      	str	r3, [r7, #8]
 80024f0:	4b22      	ldr	r3, [pc, #136]	@ (800257c <SystemClock_Config+0xb4>)
 80024f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f4:	4a21      	ldr	r2, [pc, #132]	@ (800257c <SystemClock_Config+0xb4>)
 80024f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80024fc:	4b1f      	ldr	r3, [pc, #124]	@ (800257c <SystemClock_Config+0xb4>)
 80024fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002500:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002508:	2300      	movs	r3, #0
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	4b1c      	ldr	r3, [pc, #112]	@ (8002580 <SystemClock_Config+0xb8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1b      	ldr	r2, [pc, #108]	@ (8002580 <SystemClock_Config+0xb8>)
 8002512:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	4b19      	ldr	r3, [pc, #100]	@ (8002580 <SystemClock_Config+0xb8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002520:	607b      	str	r3, [r7, #4]
 8002522:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002524:	2302      	movs	r3, #2
 8002526:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002528:	2301      	movs	r3, #1
 800252a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800252c:	2310      	movs	r3, #16
 800252e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002530:	2300      	movs	r3, #0
 8002532:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002534:	f107 0320 	add.w	r3, r7, #32
 8002538:	4618      	mov	r0, r3
 800253a:	f000 ffd7 	bl	80034ec <HAL_RCC_OscConfig>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002544:	f000 fafe 	bl	8002b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002548:	230f      	movs	r3, #15
 800254a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800254c:	2300      	movs	r3, #0
 800254e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002554:	2300      	movs	r3, #0
 8002556:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002558:	2300      	movs	r3, #0
 800255a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800255c:	f107 030c 	add.w	r3, r7, #12
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f001 fa3a 	bl	80039dc <HAL_RCC_ClockConfig>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800256e:	f000 fae9 	bl	8002b44 <Error_Handler>
  }
}
 8002572:	bf00      	nop
 8002574:	3750      	adds	r7, #80	@ 0x50
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800
 8002580:	40007000 	.word	0x40007000

08002584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258a:	f107 030c 	add.w	r3, r7, #12
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	605a      	str	r2, [r3, #4]
 8002594:	609a      	str	r2, [r3, #8]
 8002596:	60da      	str	r2, [r3, #12]
 8002598:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	4b1f      	ldr	r3, [pc, #124]	@ (800261c <MX_GPIO_Init+0x98>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a2:	4a1e      	ldr	r2, [pc, #120]	@ (800261c <MX_GPIO_Init+0x98>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025aa:	4b1c      	ldr	r3, [pc, #112]	@ (800261c <MX_GPIO_Init+0x98>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	607b      	str	r3, [r7, #4]
 80025ba:	4b18      	ldr	r3, [pc, #96]	@ (800261c <MX_GPIO_Init+0x98>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025be:	4a17      	ldr	r2, [pc, #92]	@ (800261c <MX_GPIO_Init+0x98>)
 80025c0:	f043 0308 	orr.w	r3, r3, #8
 80025c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c6:	4b15      	ldr	r3, [pc, #84]	@ (800261c <MX_GPIO_Init+0x98>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	607b      	str	r3, [r7, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|orange_led_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80025d2:	2200      	movs	r2, #0
 80025d4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80025d8:	4811      	ldr	r0, [pc, #68]	@ (8002620 <MX_GPIO_Init+0x9c>)
 80025da:	f000 ff53 	bl	8003484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025de:	2301      	movs	r3, #1
 80025e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ea:	f107 030c 	add.w	r3, r7, #12
 80025ee:	4619      	mov	r1, r3
 80025f0:	480c      	ldr	r0, [pc, #48]	@ (8002624 <MX_GPIO_Init+0xa0>)
 80025f2:	f000 fd93 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 orange_led_Pin PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|orange_led_Pin|GPIO_PIN_14|GPIO_PIN_15;
 80025f6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80025fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fc:	2301      	movs	r3, #1
 80025fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002604:	2300      	movs	r3, #0
 8002606:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002608:	f107 030c 	add.w	r3, r7, #12
 800260c:	4619      	mov	r1, r3
 800260e:	4804      	ldr	r0, [pc, #16]	@ (8002620 <MX_GPIO_Init+0x9c>)
 8002610:	f000 fd84 	bl	800311c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002614:	bf00      	nop
 8002616:	3720      	adds	r7, #32
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40023800 	.word	0x40023800
 8002620:	40020c00 	.word	0x40020c00
 8002624:	40020000 	.word	0x40020000

08002628 <prvStartDefaultTask>:

/* USER CODE BEGIN 4 */
static void prvStartDefaultTask(void  * argument)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	uint32_t currentLED = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]
  {
	  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
	  //vTaskDelay(pdMS_TO_TICKS(500));
	  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);

	  switch (currentLED) {
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b03      	cmp	r3, #3
 8002638:	d83e      	bhi.n	80026b8 <prvStartDefaultTask+0x90>
 800263a:	a201      	add	r2, pc, #4	@ (adr r2, 8002640 <prvStartDefaultTask+0x18>)
 800263c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002640:	08002651 	.word	0x08002651
 8002644:	0800266b 	.word	0x0800266b
 8002648:	08002685 	.word	0x08002685
 800264c:	0800269f 	.word	0x0800269f
		  case 0:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8002650:	2201      	movs	r2, #1
 8002652:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002656:	4828      	ldr	r0, [pc, #160]	@ (80026f8 <prvStartDefaultTask+0xd0>)
 8002658:	f000 ff14 	bl	8003484 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800265c:	2200      	movs	r2, #0
 800265e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002662:	4825      	ldr	r0, [pc, #148]	@ (80026f8 <prvStartDefaultTask+0xd0>)
 8002664:	f000 ff0e 	bl	8003484 <HAL_GPIO_WritePin>
			  break;
 8002668:	e026      	b.n	80026b8 <prvStartDefaultTask+0x90>
		  case 1:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800266a:	2201      	movs	r2, #1
 800266c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002670:	4821      	ldr	r0, [pc, #132]	@ (80026f8 <prvStartDefaultTask+0xd0>)
 8002672:	f000 ff07 	bl	8003484 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8002676:	2200      	movs	r2, #0
 8002678:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800267c:	481e      	ldr	r0, [pc, #120]	@ (80026f8 <prvStartDefaultTask+0xd0>)
 800267e:	f000 ff01 	bl	8003484 <HAL_GPIO_WritePin>
			  break;
 8002682:	e019      	b.n	80026b8 <prvStartDefaultTask+0x90>
		  case 2:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002684:	2201      	movs	r2, #1
 8002686:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800268a:	481b      	ldr	r0, [pc, #108]	@ (80026f8 <prvStartDefaultTask+0xd0>)
 800268c:	f000 fefa 	bl	8003484 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8002690:	2200      	movs	r2, #0
 8002692:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002696:	4818      	ldr	r0, [pc, #96]	@ (80026f8 <prvStartDefaultTask+0xd0>)
 8002698:	f000 fef4 	bl	8003484 <HAL_GPIO_WritePin>
			  break;
 800269c:	e00c      	b.n	80026b8 <prvStartDefaultTask+0x90>
		  case 3:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800269e:	2201      	movs	r2, #1
 80026a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026a4:	4814      	ldr	r0, [pc, #80]	@ (80026f8 <prvStartDefaultTask+0xd0>)
 80026a6:	f000 feed 	bl	8003484 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80026aa:	2200      	movs	r2, #0
 80026ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80026b0:	4811      	ldr	r0, [pc, #68]	@ (80026f8 <prvStartDefaultTask+0xd0>)
 80026b2:	f000 fee7 	bl	8003484 <HAL_GPIO_WritePin>
			  break;
 80026b6:	bf00      	nop
	  }
      currentLED = (currentLED + 1) % 4;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	3301      	adds	r3, #1
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	60fb      	str	r3, [r7, #12]
      vTaskDelay(pdMS_TO_TICKS(15));
 80026c2:	200f      	movs	r0, #15
 80026c4:	f7fe fd2c 	bl	8001120 <vTaskDelay>

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 80026c8:	2101      	movs	r1, #1
 80026ca:	480c      	ldr	r0, [pc, #48]	@ (80026fc <prvStartDefaultTask+0xd4>)
 80026cc:	f000 fec2 	bl	8003454 <HAL_GPIO_ReadPin>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d1ae      	bne.n	8002634 <prvStartDefaultTask+0xc>
		  uint32_t startSignal = 1;
 80026d6:	2301      	movs	r3, #1
 80026d8:	60bb      	str	r3, [r7, #8]
		  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
		  xQueueSend(xQueue, &startSignal, portMAX_DELAY);
 80026da:	4b09      	ldr	r3, [pc, #36]	@ (8002700 <prvStartDefaultTask+0xd8>)
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	f107 0108 	add.w	r1, r7, #8
 80026e2:	2300      	movs	r3, #0
 80026e4:	f04f 32ff 	mov.w	r2, #4294967295
 80026e8:	f7fe f8ce 	bl	8000888 <xQueueGenericSend>
		  vTaskDelay(pdMS_TO_TICKS(750));
 80026ec:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80026f0:	f7fe fd16 	bl	8001120 <vTaskDelay>
	  switch (currentLED) {
 80026f4:	e79e      	b.n	8002634 <prvStartDefaultTask+0xc>
 80026f6:	bf00      	nop
 80026f8:	40020c00 	.word	0x40020c00
 80026fc:	40020000 	.word	0x40020000
 8002700:	20012da0 	.word	0x20012da0

08002704 <prvStartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
static void prvStartTask02(void  * argument)
{
 8002704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002708:	b0a0      	sub	sp, #128	@ 0x80
 800270a:	af00      	add	r7, sp, #0
 800270c:	64f8      	str	r0, [r7, #76]	@ 0x4c
  uint32_t receivedSignal;
  uint32_t numGreenFlashes, numBlueFlashes, numRedFlashes, numOrangeFlashes;

  for(;;)
  {
      if (xQueueReceive(xQueue, &receivedSignal, portMAX_DELAY)) {
 800270e:	4b9b      	ldr	r3, [pc, #620]	@ (800297c <prvStartTask02+0x278>)
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002716:	f04f 32ff 	mov.w	r2, #4294967295
 800271a:	4619      	mov	r1, r3
 800271c:	f7fe f99e 	bl	8000a5c <xQueueReceive>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f3      	beq.n	800270e <prvStartTask02+0xa>
    	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8002726:	2200      	movs	r2, #0
 8002728:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800272c:	4894      	ldr	r0, [pc, #592]	@ (8002980 <prvStartTask02+0x27c>)
 800272e:	f000 fea9 	bl	8003484 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8002732:	2200      	movs	r2, #0
 8002734:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002738:	4891      	ldr	r0, [pc, #580]	@ (8002980 <prvStartTask02+0x27c>)
 800273a:	f000 fea3 	bl	8003484 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800273e:	2200      	movs	r2, #0
 8002740:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002744:	488e      	ldr	r0, [pc, #568]	@ (8002980 <prvStartTask02+0x27c>)
 8002746:	f000 fe9d 	bl	8003484 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800274a:	2200      	movs	r2, #0
 800274c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002750:	488b      	ldr	r0, [pc, #556]	@ (8002980 <prvStartTask02+0x27c>)
 8002752:	f000 fe97 	bl	8003484 <HAL_GPIO_WritePin>

    	  //numGreenFlashes = (rand() % 4) + 4;
    	  numGreenFlashes = 5;
 8002756:	2305      	movs	r3, #5
 8002758:	667b      	str	r3, [r7, #100]	@ 0x64
    	  for (int i = 0; i < numGreenFlashes; i++) {
 800275a:	2300      	movs	r3, #0
 800275c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800275e:	e04d      	b.n	80027fc <prvStartTask02+0xf8>
    		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8002760:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002764:	4886      	ldr	r0, [pc, #536]	@ (8002980 <prvStartTask02+0x27c>)
 8002766:	f000 fea6 	bl	80034b6 <HAL_GPIO_TogglePin>
              vTaskDelay(pdMS_TO_TICKS(25-i*2));
 800276a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	f1c3 0319 	rsb	r3, r3, #25
 8002772:	17da      	asrs	r2, r3, #31
 8002774:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002776:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002778:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800277c:	f04f 0000 	mov.w	r0, #0
 8002780:	f04f 0100 	mov.w	r1, #0
 8002784:	0159      	lsls	r1, r3, #5
 8002786:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800278a:	0150      	lsls	r0, r2, #5
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002792:	1a54      	subs	r4, r2, r1
 8002794:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002796:	eb63 0501 	sbc.w	r5, r3, r1
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	00ab      	lsls	r3, r5, #2
 80027a4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80027a8:	00a2      	lsls	r2, r4, #2
 80027aa:	4614      	mov	r4, r2
 80027ac:	461d      	mov	r5, r3
 80027ae:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80027b2:	460b      	mov	r3, r1
 80027b4:	18e3      	adds	r3, r4, r3
 80027b6:	61bb      	str	r3, [r7, #24]
 80027b8:	4613      	mov	r3, r2
 80027ba:	eb45 0303 	adc.w	r3, r5, r3
 80027be:	61fb      	str	r3, [r7, #28]
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	69f9      	ldr	r1, [r7, #28]
 80027ca:	00cb      	lsls	r3, r1, #3
 80027cc:	69b9      	ldr	r1, [r7, #24]
 80027ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027d2:	69b9      	ldr	r1, [r7, #24]
 80027d4:	00ca      	lsls	r2, r1, #3
 80027d6:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80027da:	4610      	mov	r0, r2
 80027dc:	4619      	mov	r1, r3
 80027de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	f7fd fd43 	bl	8000270 <__aeabi_uldivmod>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4613      	mov	r3, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe fc95 	bl	8001120 <vTaskDelay>
    	  for (int i = 0; i < numGreenFlashes; i++) {
 80027f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027f8:	3301      	adds	r3, #1
 80027fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80027fc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80027fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002800:	4293      	cmp	r3, r2
 8002802:	d8ad      	bhi.n	8002760 <prvStartTask02+0x5c>
    	  }

    	  //numOrangeFlashes = (rand() % 4) + 4;
    	  numOrangeFlashes = 5;
 8002804:	2305      	movs	r3, #5
 8002806:	663b      	str	r3, [r7, #96]	@ 0x60
    	  for (int i = 0; i < numOrangeFlashes; i++) {
 8002808:	2300      	movs	r3, #0
 800280a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800280c:	e051      	b.n	80028b2 <prvStartTask02+0x1ae>
    		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800280e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002812:	485b      	ldr	r0, [pc, #364]	@ (8002980 <prvStartTask02+0x27c>)
 8002814:	f000 fe4f 	bl	80034b6 <HAL_GPIO_TogglePin>
              vTaskDelay(pdMS_TO_TICKS(25-i*2));
 8002818:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	f1c3 0319 	rsb	r3, r3, #25
 8002820:	17da      	asrs	r2, r3, #31
 8002822:	633b      	str	r3, [r7, #48]	@ 0x30
 8002824:	637a      	str	r2, [r7, #52]	@ 0x34
 8002826:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800282a:	f04f 0000 	mov.w	r0, #0
 800282e:	f04f 0100 	mov.w	r1, #0
 8002832:	0159      	lsls	r1, r3, #5
 8002834:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002838:	0150      	lsls	r0, r2, #5
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002840:	ebb2 0801 	subs.w	r8, r2, r1
 8002844:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002846:	eb63 0901 	sbc.w	r9, r3, r1
 800284a:	f04f 0200 	mov.w	r2, #0
 800284e:	f04f 0300 	mov.w	r3, #0
 8002852:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8002856:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800285a:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800285e:	4690      	mov	r8, r2
 8002860:	4699      	mov	r9, r3
 8002862:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8002866:	460b      	mov	r3, r1
 8002868:	eb18 0303 	adds.w	r3, r8, r3
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	4613      	mov	r3, r2
 8002870:	eb49 0303 	adc.w	r3, r9, r3
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	6979      	ldr	r1, [r7, #20]
 8002880:	00cb      	lsls	r3, r1, #3
 8002882:	6939      	ldr	r1, [r7, #16]
 8002884:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002888:	6939      	ldr	r1, [r7, #16]
 800288a:	00ca      	lsls	r2, r1, #3
 800288c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002890:	4610      	mov	r0, r2
 8002892:	4619      	mov	r1, r3
 8002894:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	f7fd fce8 	bl	8000270 <__aeabi_uldivmod>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4613      	mov	r3, r2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe fc3a 	bl	8001120 <vTaskDelay>
    	  for (int i = 0; i < numOrangeFlashes; i++) {
 80028ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028ae:	3301      	adds	r3, #1
 80028b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80028b2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80028b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d8a9      	bhi.n	800280e <prvStartTask02+0x10a>
    	  }

    	  //numRedFlashes = (rand() % 4) + 4;
    	  numRedFlashes = 5;
 80028ba:	2305      	movs	r3, #5
 80028bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    	  for (int i = 0; i < numRedFlashes; i++) {
 80028be:	2300      	movs	r3, #0
 80028c0:	677b      	str	r3, [r7, #116]	@ 0x74
 80028c2:	e051      	b.n	8002968 <prvStartTask02+0x264>
    		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80028c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80028c8:	482d      	ldr	r0, [pc, #180]	@ (8002980 <prvStartTask02+0x27c>)
 80028ca:	f000 fdf4 	bl	80034b6 <HAL_GPIO_TogglePin>
              vTaskDelay(pdMS_TO_TICKS(25-i*2));
 80028ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	f1c3 0319 	rsb	r3, r3, #25
 80028d6:	17da      	asrs	r2, r3, #31
 80028d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80028e0:	f04f 0000 	mov.w	r0, #0
 80028e4:	f04f 0100 	mov.w	r1, #0
 80028e8:	0159      	lsls	r1, r3, #5
 80028ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028ee:	0150      	lsls	r0, r2, #5
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80028fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80028fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800290c:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 8002910:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8002914:	4692      	mov	sl, r2
 8002916:	469b      	mov	fp, r3
 8002918:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800291c:	460b      	mov	r3, r1
 800291e:	eb1a 0303 	adds.w	r3, sl, r3
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	4613      	mov	r3, r2
 8002926:	eb4b 0303 	adc.w	r3, fp, r3
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	68f9      	ldr	r1, [r7, #12]
 8002936:	00cb      	lsls	r3, r1, #3
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800293e:	68b9      	ldr	r1, [r7, #8]
 8002940:	00ca      	lsls	r2, r1, #3
 8002942:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002946:	4610      	mov	r0, r2
 8002948:	4619      	mov	r1, r3
 800294a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	f7fd fc8d 	bl	8000270 <__aeabi_uldivmod>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4613      	mov	r3, r2
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe fbdf 	bl	8001120 <vTaskDelay>
    	  for (int i = 0; i < numRedFlashes; i++) {
 8002962:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002964:	3301      	adds	r3, #1
 8002966:	677b      	str	r3, [r7, #116]	@ 0x74
 8002968:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800296a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800296c:	4293      	cmp	r3, r2
 800296e:	d8a9      	bhi.n	80028c4 <prvStartTask02+0x1c0>
    	  }

    	  //numBlueFlashes = (rand() % 4) + 4;
    	  numBlueFlashes = 5;
 8002970:	2305      	movs	r3, #5
 8002972:	65bb      	str	r3, [r7, #88]	@ 0x58
    	  for (int i = 0; i < numBlueFlashes; i++) {
 8002974:	2300      	movs	r3, #0
 8002976:	673b      	str	r3, [r7, #112]	@ 0x70
 8002978:	e058      	b.n	8002a2c <prvStartTask02+0x328>
 800297a:	bf00      	nop
 800297c:	20012da0 	.word	0x20012da0
 8002980:	40020c00 	.word	0x40020c00
    		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8002984:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002988:	4860      	ldr	r0, [pc, #384]	@ (8002b0c <prvStartTask02+0x408>)
 800298a:	f000 fd94 	bl	80034b6 <HAL_GPIO_TogglePin>
              vTaskDelay(pdMS_TO_TICKS(25-i*2));
 800298e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	f1c3 0319 	rsb	r3, r3, #25
 8002996:	17da      	asrs	r2, r3, #31
 8002998:	623b      	str	r3, [r7, #32]
 800299a:	627a      	str	r2, [r7, #36]	@ 0x24
 800299c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029a0:	f04f 0000 	mov.w	r0, #0
 80029a4:	f04f 0100 	mov.w	r1, #0
 80029a8:	0159      	lsls	r1, r3, #5
 80029aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029ae:	0150      	lsls	r0, r2, #5
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	6a39      	ldr	r1, [r7, #32]
 80029b6:	1a51      	subs	r1, r2, r1
 80029b8:	6439      	str	r1, [r7, #64]	@ 0x40
 80029ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029bc:	eb63 0301 	sbc.w	r3, r3, r1
 80029c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80029cc:	008b      	lsls	r3, r1, #2
 80029ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80029d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80029d6:	008a      	lsls	r2, r1, #2
 80029d8:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80029dc:	4613      	mov	r3, r2
 80029de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80029e2:	4602      	mov	r2, r0
 80029e4:	189b      	adds	r3, r3, r2
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029ea:	460a      	mov	r2, r1
 80029ec:	4153      	adcs	r3, r2
 80029ee:	607b      	str	r3, [r7, #4]
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	00cb      	lsls	r3, r1, #3
 80029fc:	6839      	ldr	r1, [r7, #0]
 80029fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a02:	6839      	ldr	r1, [r7, #0]
 8002a04:	00ca      	lsls	r2, r1, #3
 8002a06:	e9c7 2300 	strd	r2, r3, [r7]
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	f7fd fc2b 	bl	8000270 <__aeabi_uldivmod>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4613      	mov	r3, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fe fb7d 	bl	8001120 <vTaskDelay>
    	  for (int i = 0; i < numBlueFlashes; i++) {
 8002a26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a28:	3301      	adds	r3, #1
 8002a2a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a2c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002a2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d8a7      	bhi.n	8002984 <prvStartTask02+0x280>
    	  }



    	  GPIO_PinState pinState12 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12);
 8002a34:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a38:	4834      	ldr	r0, [pc, #208]	@ (8002b0c <prvStartTask02+0x408>)
 8002a3a:	f000 fd0b 	bl	8003454 <HAL_GPIO_ReadPin>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    	  GPIO_PinState pinState13 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13);
 8002a44:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a48:	4830      	ldr	r0, [pc, #192]	@ (8002b0c <prvStartTask02+0x408>)
 8002a4a:	f000 fd03 	bl	8003454 <HAL_GPIO_ReadPin>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
    	  GPIO_PinState pinState14 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14);
 8002a54:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002a58:	482c      	ldr	r0, [pc, #176]	@ (8002b0c <prvStartTask02+0x408>)
 8002a5a:	f000 fcfb 	bl	8003454 <HAL_GPIO_ReadPin>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    	  GPIO_PinState pinState15 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15);
 8002a64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a68:	4828      	ldr	r0, [pc, #160]	@ (8002b0c <prvStartTask02+0x408>)
 8002a6a:	f000 fcf3 	bl	8003454 <HAL_GPIO_ReadPin>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

    	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8002a74:	2200      	movs	r2, #0
 8002a76:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a7a:	4824      	ldr	r0, [pc, #144]	@ (8002b0c <prvStartTask02+0x408>)
 8002a7c:	f000 fd02 	bl	8003484 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8002a80:	2200      	movs	r2, #0
 8002a82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a86:	4821      	ldr	r0, [pc, #132]	@ (8002b0c <prvStartTask02+0x408>)
 8002a88:	f000 fcfc 	bl	8003484 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002a92:	481e      	ldr	r0, [pc, #120]	@ (8002b0c <prvStartTask02+0x408>)
 8002a94:	f000 fcf6 	bl	8003484 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a9e:	481b      	ldr	r0, [pc, #108]	@ (8002b0c <prvStartTask02+0x408>)
 8002aa0:	f000 fcf0 	bl	8003484 <HAL_GPIO_WritePin>

    	  if (pinState12 == GPIO_PIN_SET && pinState13 == GPIO_PIN_SET && pinState14 == GPIO_PIN_SET && pinState15 == GPIO_PIN_SET)
 8002aa4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d11d      	bne.n	8002ae8 <prvStartTask02+0x3e4>
 8002aac:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d119      	bne.n	8002ae8 <prvStartTask02+0x3e4>
 8002ab4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d115      	bne.n	8002ae8 <prvStartTask02+0x3e4>
 8002abc:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d111      	bne.n	8002ae8 <prvStartTask02+0x3e4>
 {
    		  for (int i = 0; i < 10; i++) {
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ac8:	e00a      	b.n	8002ae0 <prvStartTask02+0x3dc>
				  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8002aca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ace:	480f      	ldr	r0, [pc, #60]	@ (8002b0c <prvStartTask02+0x408>)
 8002ad0:	f000 fcf1 	bl	80034b6 <HAL_GPIO_TogglePin>
				  vTaskDelay(pdMS_TO_TICKS(15));
 8002ad4:	200f      	movs	r0, #15
 8002ad6:	f7fe fb23 	bl	8001120 <vTaskDelay>
    		  for (int i = 0; i < 10; i++) {
 8002ada:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002adc:	3301      	adds	r3, #1
 8002ade:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ae0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ae2:	2b09      	cmp	r3, #9
 8002ae4:	ddf1      	ble.n	8002aca <prvStartTask02+0x3c6>
 8002ae6:	e010      	b.n	8002b0a <prvStartTask02+0x406>
    		  }
    	  }

    	  else {
    		  for (int i = 0; i < 10; i++) {
 8002ae8:	2300      	movs	r3, #0
 8002aea:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002aec:	e00a      	b.n	8002b04 <prvStartTask02+0x400>
    			  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8002aee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002af2:	4806      	ldr	r0, [pc, #24]	@ (8002b0c <prvStartTask02+0x408>)
 8002af4:	f000 fcdf 	bl	80034b6 <HAL_GPIO_TogglePin>
    			  vTaskDelay(pdMS_TO_TICKS(15));
 8002af8:	200f      	movs	r0, #15
 8002afa:	f7fe fb11 	bl	8001120 <vTaskDelay>
    		  for (int i = 0; i < 10; i++) {
 8002afe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b00:	3301      	adds	r3, #1
 8002b02:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b06:	2b09      	cmp	r3, #9
 8002b08:	ddf1      	ble.n	8002aee <prvStartTask02+0x3ea>
      if (xQueueReceive(xQueue, &receivedSignal, portMAX_DELAY)) {
 8002b0a:	e600      	b.n	800270e <prvStartTask02+0xa>
 8002b0c:	40020c00 	.word	0x40020c00

08002b10 <prvStartTask03>:

  }
}

static void prvStartTask03(void  * argument)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  uint32_t currentLED = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]

  for(;;)
 8002b1c:	bf00      	nop
 8002b1e:	e7fd      	b.n	8002b1c <prvStartTask03+0xc>

08002b20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a04      	ldr	r2, [pc, #16]	@ (8002b40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d101      	bne.n	8002b36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b32:	f000 f9f1 	bl	8002f18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40010000 	.word	0x40010000

08002b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b48:	b672      	cpsid	i
}
 8002b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b4c:	bf00      	nop
 8002b4e:	e7fd      	b.n	8002b4c <Error_Handler+0x8>

08002b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	607b      	str	r3, [r7, #4]
 8002b5a:	4b10      	ldr	r3, [pc, #64]	@ (8002b9c <HAL_MspInit+0x4c>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8002b9c <HAL_MspInit+0x4c>)
 8002b60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b66:	4b0d      	ldr	r3, [pc, #52]	@ (8002b9c <HAL_MspInit+0x4c>)
 8002b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b6e:	607b      	str	r3, [r7, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	603b      	str	r3, [r7, #0]
 8002b76:	4b09      	ldr	r3, [pc, #36]	@ (8002b9c <HAL_MspInit+0x4c>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7a:	4a08      	ldr	r2, [pc, #32]	@ (8002b9c <HAL_MspInit+0x4c>)
 8002b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b82:	4b06      	ldr	r3, [pc, #24]	@ (8002b9c <HAL_MspInit+0x4c>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b8a:	603b      	str	r3, [r7, #0]
 8002b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40023800 	.word	0x40023800

08002ba0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08c      	sub	sp, #48	@ 0x30
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	4b2e      	ldr	r3, [pc, #184]	@ (8002c70 <HAL_InitTick+0xd0>)
 8002bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb8:	4a2d      	ldr	r2, [pc, #180]	@ (8002c70 <HAL_InitTick+0xd0>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bc0:	4b2b      	ldr	r3, [pc, #172]	@ (8002c70 <HAL_InitTick+0xd0>)
 8002bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bcc:	f107 020c 	add.w	r2, r7, #12
 8002bd0:	f107 0310 	add.w	r3, r7, #16
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f001 f8cc 	bl	8003d74 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002bdc:	f001 f8b6 	bl	8003d4c <HAL_RCC_GetPCLK2Freq>
 8002be0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be4:	4a23      	ldr	r2, [pc, #140]	@ (8002c74 <HAL_InitTick+0xd4>)
 8002be6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bea:	0c9b      	lsrs	r3, r3, #18
 8002bec:	3b01      	subs	r3, #1
 8002bee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002bf0:	4b21      	ldr	r3, [pc, #132]	@ (8002c78 <HAL_InitTick+0xd8>)
 8002bf2:	4a22      	ldr	r2, [pc, #136]	@ (8002c7c <HAL_InitTick+0xdc>)
 8002bf4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002bf6:	4b20      	ldr	r3, [pc, #128]	@ (8002c78 <HAL_InitTick+0xd8>)
 8002bf8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002bfc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8002c78 <HAL_InitTick+0xd8>)
 8002c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c02:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002c04:	4b1c      	ldr	r3, [pc, #112]	@ (8002c78 <HAL_InitTick+0xd8>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8002c78 <HAL_InitTick+0xd8>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c10:	4b19      	ldr	r3, [pc, #100]	@ (8002c78 <HAL_InitTick+0xd8>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002c16:	4818      	ldr	r0, [pc, #96]	@ (8002c78 <HAL_InitTick+0xd8>)
 8002c18:	f001 f8de 	bl	8003dd8 <HAL_TIM_Base_Init>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002c22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d11b      	bne.n	8002c62 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002c2a:	4813      	ldr	r0, [pc, #76]	@ (8002c78 <HAL_InitTick+0xd8>)
 8002c2c:	f001 f92e 	bl	8003e8c <HAL_TIM_Base_Start_IT>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002c36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d111      	bne.n	8002c62 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002c3e:	2019      	movs	r0, #25
 8002c40:	f000 fa5e 	bl	8003100 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b0f      	cmp	r3, #15
 8002c48:	d808      	bhi.n	8002c5c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	2019      	movs	r0, #25
 8002c50:	f000 fa3a 	bl	80030c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c54:	4a0a      	ldr	r2, [pc, #40]	@ (8002c80 <HAL_InitTick+0xe0>)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e002      	b.n	8002c62 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002c62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3730      	adds	r7, #48	@ 0x30
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800
 8002c74:	431bde83 	.word	0x431bde83
 8002c78:	20012da4 	.word	0x20012da4
 8002c7c:	40010000 	.word	0x40010000
 8002c80:	2000000c 	.word	0x2000000c

08002c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c88:	bf00      	nop
 8002c8a:	e7fd      	b.n	8002c88 <NMI_Handler+0x4>

08002c8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c90:	bf00      	nop
 8002c92:	e7fd      	b.n	8002c90 <HardFault_Handler+0x4>

08002c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c98:	bf00      	nop
 8002c9a:	e7fd      	b.n	8002c98 <MemManage_Handler+0x4>

08002c9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ca0:	bf00      	nop
 8002ca2:	e7fd      	b.n	8002ca0 <BusFault_Handler+0x4>

08002ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca8:	bf00      	nop
 8002caa:	e7fd      	b.n	8002ca8 <UsageFault_Handler+0x4>

08002cac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cb0:	bf00      	nop
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
	...

08002cbc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cc0:	4802      	ldr	r0, [pc, #8]	@ (8002ccc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002cc2:	f001 f953 	bl	8003f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20012da4 	.word	0x20012da4

08002cd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  return 1;
 8002cd4:	2301      	movs	r3, #1
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <_kill>:

int _kill(int pid, int sig)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cea:	f001 fcc7 	bl	800467c <__errno>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2216      	movs	r2, #22
 8002cf2:	601a      	str	r2, [r3, #0]
  return -1;
 8002cf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <_exit>:

void _exit (int status)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d08:	f04f 31ff 	mov.w	r1, #4294967295
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff ffe7 	bl	8002ce0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d12:	bf00      	nop
 8002d14:	e7fd      	b.n	8002d12 <_exit+0x12>

08002d16 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b086      	sub	sp, #24
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	e00a      	b.n	8002d3e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d28:	f3af 8000 	nop.w
 8002d2c:	4601      	mov	r1, r0
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	60ba      	str	r2, [r7, #8]
 8002d34:	b2ca      	uxtb	r2, r1
 8002d36:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	dbf0      	blt.n	8002d28 <_read+0x12>
  }

  return len;
 8002d46:	687b      	ldr	r3, [r7, #4]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	e009      	b.n	8002d76 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	60ba      	str	r2, [r7, #8]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	3301      	adds	r3, #1
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	dbf1      	blt.n	8002d62 <_write+0x12>
  }
  return len;
 8002d7e:	687b      	ldr	r3, [r7, #4]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <_close>:

int _close(int file)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002db0:	605a      	str	r2, [r3, #4]
  return 0;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <_isatty>:

int _isatty(int file)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002dc8:	2301      	movs	r3, #1
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b085      	sub	sp, #20
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002df8:	4a14      	ldr	r2, [pc, #80]	@ (8002e4c <_sbrk+0x5c>)
 8002dfa:	4b15      	ldr	r3, [pc, #84]	@ (8002e50 <_sbrk+0x60>)
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e04:	4b13      	ldr	r3, [pc, #76]	@ (8002e54 <_sbrk+0x64>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d102      	bne.n	8002e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e0c:	4b11      	ldr	r3, [pc, #68]	@ (8002e54 <_sbrk+0x64>)
 8002e0e:	4a12      	ldr	r2, [pc, #72]	@ (8002e58 <_sbrk+0x68>)
 8002e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e12:	4b10      	ldr	r3, [pc, #64]	@ (8002e54 <_sbrk+0x64>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4413      	add	r3, r2
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d207      	bcs.n	8002e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e20:	f001 fc2c 	bl	800467c <__errno>
 8002e24:	4603      	mov	r3, r0
 8002e26:	220c      	movs	r2, #12
 8002e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2e:	e009      	b.n	8002e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e30:	4b08      	ldr	r3, [pc, #32]	@ (8002e54 <_sbrk+0x64>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e36:	4b07      	ldr	r3, [pc, #28]	@ (8002e54 <_sbrk+0x64>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	4a05      	ldr	r2, [pc, #20]	@ (8002e54 <_sbrk+0x64>)
 8002e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e42:	68fb      	ldr	r3, [r7, #12]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20020000 	.word	0x20020000
 8002e50:	00000400 	.word	0x00000400
 8002e54:	20012dec 	.word	0x20012dec
 8002e58:	20012f40 	.word	0x20012f40

08002e5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e60:	4b06      	ldr	r3, [pc, #24]	@ (8002e7c <SystemInit+0x20>)
 8002e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e66:	4a05      	ldr	r2, [pc, #20]	@ (8002e7c <SystemInit+0x20>)
 8002e68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e70:	bf00      	nop
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <Reset_Handler>:
 8002e80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002eb8 <LoopFillZerobss+0xe>
 8002e84:	f7ff ffea 	bl	8002e5c <SystemInit>
 8002e88:	480c      	ldr	r0, [pc, #48]	@ (8002ebc <LoopFillZerobss+0x12>)
 8002e8a:	490d      	ldr	r1, [pc, #52]	@ (8002ec0 <LoopFillZerobss+0x16>)
 8002e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ec4 <LoopFillZerobss+0x1a>)
 8002e8e:	2300      	movs	r3, #0
 8002e90:	e002      	b.n	8002e98 <LoopCopyDataInit>

08002e92 <CopyDataInit>:
 8002e92:	58d4      	ldr	r4, [r2, r3]
 8002e94:	50c4      	str	r4, [r0, r3]
 8002e96:	3304      	adds	r3, #4

08002e98 <LoopCopyDataInit>:
 8002e98:	18c4      	adds	r4, r0, r3
 8002e9a:	428c      	cmp	r4, r1
 8002e9c:	d3f9      	bcc.n	8002e92 <CopyDataInit>
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec8 <LoopFillZerobss+0x1e>)
 8002ea0:	4c0a      	ldr	r4, [pc, #40]	@ (8002ecc <LoopFillZerobss+0x22>)
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e001      	b.n	8002eaa <LoopFillZerobss>

08002ea6 <FillZerobss>:
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	3204      	adds	r2, #4

08002eaa <LoopFillZerobss>:
 8002eaa:	42a2      	cmp	r2, r4
 8002eac:	d3fb      	bcc.n	8002ea6 <FillZerobss>
 8002eae:	f001 fbeb 	bl	8004688 <__libc_init_array>
 8002eb2:	f7ff fab1 	bl	8002418 <main>
 8002eb6:	4770      	bx	lr
 8002eb8:	20020000 	.word	0x20020000
 8002ebc:	20000000 	.word	0x20000000
 8002ec0:	20000070 	.word	0x20000070
 8002ec4:	08005488 	.word	0x08005488
 8002ec8:	20000070 	.word	0x20000070
 8002ecc:	20012f40 	.word	0x20012f40

08002ed0 <ADC_IRQHandler>:
 8002ed0:	e7fe      	b.n	8002ed0 <ADC_IRQHandler>
	...

08002ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8002f14 <HAL_Init+0x40>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a0d      	ldr	r2, [pc, #52]	@ (8002f14 <HAL_Init+0x40>)
 8002ede:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ee2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f14 <HAL_Init+0x40>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8002f14 <HAL_Init+0x40>)
 8002eea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ef0:	4b08      	ldr	r3, [pc, #32]	@ (8002f14 <HAL_Init+0x40>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a07      	ldr	r2, [pc, #28]	@ (8002f14 <HAL_Init+0x40>)
 8002ef6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002efa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002efc:	2003      	movs	r0, #3
 8002efe:	f000 f8d8 	bl	80030b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f02:	200f      	movs	r0, #15
 8002f04:	f7ff fe4c 	bl	8002ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f08:	f7ff fe22 	bl	8002b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40023c00 	.word	0x40023c00

08002f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f1c:	4b06      	ldr	r3, [pc, #24]	@ (8002f38 <HAL_IncTick+0x20>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	4b06      	ldr	r3, [pc, #24]	@ (8002f3c <HAL_IncTick+0x24>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4413      	add	r3, r2
 8002f28:	4a04      	ldr	r2, [pc, #16]	@ (8002f3c <HAL_IncTick+0x24>)
 8002f2a:	6013      	str	r3, [r2, #0]
}
 8002f2c:	bf00      	nop
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20000010 	.word	0x20000010
 8002f3c:	20012df0 	.word	0x20012df0

08002f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return uwTick;
 8002f44:	4b03      	ldr	r3, [pc, #12]	@ (8002f54 <HAL_GetTick+0x14>)
 8002f46:	681b      	ldr	r3, [r3, #0]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	20012df0 	.word	0x20012df0

08002f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f68:	4b0c      	ldr	r3, [pc, #48]	@ (8002f9c <__NVIC_SetPriorityGrouping+0x44>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f74:	4013      	ands	r3, r2
 8002f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f8a:	4a04      	ldr	r2, [pc, #16]	@ (8002f9c <__NVIC_SetPriorityGrouping+0x44>)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	60d3      	str	r3, [r2, #12]
}
 8002f90:	bf00      	nop
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	e000ed00 	.word	0xe000ed00

08002fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fa4:	4b04      	ldr	r3, [pc, #16]	@ (8002fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	0a1b      	lsrs	r3, r3, #8
 8002faa:	f003 0307 	and.w	r3, r3, #7
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	db0b      	blt.n	8002fe6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fce:	79fb      	ldrb	r3, [r7, #7]
 8002fd0:	f003 021f 	and.w	r2, r3, #31
 8002fd4:	4907      	ldr	r1, [pc, #28]	@ (8002ff4 <__NVIC_EnableIRQ+0x38>)
 8002fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	2001      	movs	r0, #1
 8002fde:	fa00 f202 	lsl.w	r2, r0, r2
 8002fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	e000e100 	.word	0xe000e100

08002ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	6039      	str	r1, [r7, #0]
 8003002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003008:	2b00      	cmp	r3, #0
 800300a:	db0a      	blt.n	8003022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	b2da      	uxtb	r2, r3
 8003010:	490c      	ldr	r1, [pc, #48]	@ (8003044 <__NVIC_SetPriority+0x4c>)
 8003012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003016:	0112      	lsls	r2, r2, #4
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	440b      	add	r3, r1
 800301c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003020:	e00a      	b.n	8003038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	b2da      	uxtb	r2, r3
 8003026:	4908      	ldr	r1, [pc, #32]	@ (8003048 <__NVIC_SetPriority+0x50>)
 8003028:	79fb      	ldrb	r3, [r7, #7]
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	3b04      	subs	r3, #4
 8003030:	0112      	lsls	r2, r2, #4
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	440b      	add	r3, r1
 8003036:	761a      	strb	r2, [r3, #24]
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000e100 	.word	0xe000e100
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800304c:	b480      	push	{r7}
 800304e:	b089      	sub	sp, #36	@ 0x24
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f1c3 0307 	rsb	r3, r3, #7
 8003066:	2b04      	cmp	r3, #4
 8003068:	bf28      	it	cs
 800306a:	2304      	movcs	r3, #4
 800306c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	3304      	adds	r3, #4
 8003072:	2b06      	cmp	r3, #6
 8003074:	d902      	bls.n	800307c <NVIC_EncodePriority+0x30>
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3b03      	subs	r3, #3
 800307a:	e000      	b.n	800307e <NVIC_EncodePriority+0x32>
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003080:	f04f 32ff 	mov.w	r2, #4294967295
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43da      	mvns	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	401a      	ands	r2, r3
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003094:	f04f 31ff 	mov.w	r1, #4294967295
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	fa01 f303 	lsl.w	r3, r1, r3
 800309e:	43d9      	mvns	r1, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a4:	4313      	orrs	r3, r2
         );
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3724      	adds	r7, #36	@ 0x24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7ff ff4c 	bl	8002f58 <__NVIC_SetPriorityGrouping>
}
 80030c0:	bf00      	nop
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
 80030d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030da:	f7ff ff61 	bl	8002fa0 <__NVIC_GetPriorityGrouping>
 80030de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	68b9      	ldr	r1, [r7, #8]
 80030e4:	6978      	ldr	r0, [r7, #20]
 80030e6:	f7ff ffb1 	bl	800304c <NVIC_EncodePriority>
 80030ea:	4602      	mov	r2, r0
 80030ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030f0:	4611      	mov	r1, r2
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff ff80 	bl	8002ff8 <__NVIC_SetPriority>
}
 80030f8:	bf00      	nop
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800310a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff ff54 	bl	8002fbc <__NVIC_EnableIRQ>
}
 8003114:	bf00      	nop
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800311c:	b480      	push	{r7}
 800311e:	b089      	sub	sp, #36	@ 0x24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800312a:	2300      	movs	r3, #0
 800312c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
 8003136:	e16b      	b.n	8003410 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003138:	2201      	movs	r2, #1
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4013      	ands	r3, r2
 800314a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	429a      	cmp	r2, r3
 8003152:	f040 815a 	bne.w	800340a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d005      	beq.n	800316e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800316a:	2b02      	cmp	r3, #2
 800316c:	d130      	bne.n	80031d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	2203      	movs	r2, #3
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	43db      	mvns	r3, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4013      	ands	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4313      	orrs	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031a4:	2201      	movs	r2, #1
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4013      	ands	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	f003 0201 	and.w	r2, r3, #1
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d017      	beq.n	800320c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	2203      	movs	r2, #3
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4313      	orrs	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d123      	bne.n	8003260 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	08da      	lsrs	r2, r3, #3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3208      	adds	r2, #8
 8003220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003224:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	220f      	movs	r2, #15
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	08da      	lsrs	r2, r3, #3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3208      	adds	r2, #8
 800325a:	69b9      	ldr	r1, [r7, #24]
 800325c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	2203      	movs	r2, #3
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 0203 	and.w	r2, r3, #3
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80b4 	beq.w	800340a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	4b60      	ldr	r3, [pc, #384]	@ (8003428 <HAL_GPIO_Init+0x30c>)
 80032a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032aa:	4a5f      	ldr	r2, [pc, #380]	@ (8003428 <HAL_GPIO_Init+0x30c>)
 80032ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80032b2:	4b5d      	ldr	r3, [pc, #372]	@ (8003428 <HAL_GPIO_Init+0x30c>)
 80032b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032be:	4a5b      	ldr	r2, [pc, #364]	@ (800342c <HAL_GPIO_Init+0x310>)
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	089b      	lsrs	r3, r3, #2
 80032c4:	3302      	adds	r3, #2
 80032c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	220f      	movs	r2, #15
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a52      	ldr	r2, [pc, #328]	@ (8003430 <HAL_GPIO_Init+0x314>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d02b      	beq.n	8003342 <HAL_GPIO_Init+0x226>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a51      	ldr	r2, [pc, #324]	@ (8003434 <HAL_GPIO_Init+0x318>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d025      	beq.n	800333e <HAL_GPIO_Init+0x222>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a50      	ldr	r2, [pc, #320]	@ (8003438 <HAL_GPIO_Init+0x31c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d01f      	beq.n	800333a <HAL_GPIO_Init+0x21e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a4f      	ldr	r2, [pc, #316]	@ (800343c <HAL_GPIO_Init+0x320>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d019      	beq.n	8003336 <HAL_GPIO_Init+0x21a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a4e      	ldr	r2, [pc, #312]	@ (8003440 <HAL_GPIO_Init+0x324>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d013      	beq.n	8003332 <HAL_GPIO_Init+0x216>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a4d      	ldr	r2, [pc, #308]	@ (8003444 <HAL_GPIO_Init+0x328>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00d      	beq.n	800332e <HAL_GPIO_Init+0x212>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a4c      	ldr	r2, [pc, #304]	@ (8003448 <HAL_GPIO_Init+0x32c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d007      	beq.n	800332a <HAL_GPIO_Init+0x20e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a4b      	ldr	r2, [pc, #300]	@ (800344c <HAL_GPIO_Init+0x330>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d101      	bne.n	8003326 <HAL_GPIO_Init+0x20a>
 8003322:	2307      	movs	r3, #7
 8003324:	e00e      	b.n	8003344 <HAL_GPIO_Init+0x228>
 8003326:	2308      	movs	r3, #8
 8003328:	e00c      	b.n	8003344 <HAL_GPIO_Init+0x228>
 800332a:	2306      	movs	r3, #6
 800332c:	e00a      	b.n	8003344 <HAL_GPIO_Init+0x228>
 800332e:	2305      	movs	r3, #5
 8003330:	e008      	b.n	8003344 <HAL_GPIO_Init+0x228>
 8003332:	2304      	movs	r3, #4
 8003334:	e006      	b.n	8003344 <HAL_GPIO_Init+0x228>
 8003336:	2303      	movs	r3, #3
 8003338:	e004      	b.n	8003344 <HAL_GPIO_Init+0x228>
 800333a:	2302      	movs	r3, #2
 800333c:	e002      	b.n	8003344 <HAL_GPIO_Init+0x228>
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <HAL_GPIO_Init+0x228>
 8003342:	2300      	movs	r3, #0
 8003344:	69fa      	ldr	r2, [r7, #28]
 8003346:	f002 0203 	and.w	r2, r2, #3
 800334a:	0092      	lsls	r2, r2, #2
 800334c:	4093      	lsls	r3, r2
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4313      	orrs	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003354:	4935      	ldr	r1, [pc, #212]	@ (800342c <HAL_GPIO_Init+0x310>)
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	089b      	lsrs	r3, r3, #2
 800335a:	3302      	adds	r3, #2
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003362:	4b3b      	ldr	r3, [pc, #236]	@ (8003450 <HAL_GPIO_Init+0x334>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	43db      	mvns	r3, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4013      	ands	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4313      	orrs	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003386:	4a32      	ldr	r2, [pc, #200]	@ (8003450 <HAL_GPIO_Init+0x334>)
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800338c:	4b30      	ldr	r3, [pc, #192]	@ (8003450 <HAL_GPIO_Init+0x334>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	43db      	mvns	r3, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033b0:	4a27      	ldr	r2, [pc, #156]	@ (8003450 <HAL_GPIO_Init+0x334>)
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033b6:	4b26      	ldr	r3, [pc, #152]	@ (8003450 <HAL_GPIO_Init+0x334>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	43db      	mvns	r3, r3
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4013      	ands	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033da:	4a1d      	ldr	r2, [pc, #116]	@ (8003450 <HAL_GPIO_Init+0x334>)
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003450 <HAL_GPIO_Init+0x334>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	43db      	mvns	r3, r3
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4013      	ands	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003404:	4a12      	ldr	r2, [pc, #72]	@ (8003450 <HAL_GPIO_Init+0x334>)
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	3301      	adds	r3, #1
 800340e:	61fb      	str	r3, [r7, #28]
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	2b0f      	cmp	r3, #15
 8003414:	f67f ae90 	bls.w	8003138 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003418:	bf00      	nop
 800341a:	bf00      	nop
 800341c:	3724      	adds	r7, #36	@ 0x24
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40023800 	.word	0x40023800
 800342c:	40013800 	.word	0x40013800
 8003430:	40020000 	.word	0x40020000
 8003434:	40020400 	.word	0x40020400
 8003438:	40020800 	.word	0x40020800
 800343c:	40020c00 	.word	0x40020c00
 8003440:	40021000 	.word	0x40021000
 8003444:	40021400 	.word	0x40021400
 8003448:	40021800 	.word	0x40021800
 800344c:	40021c00 	.word	0x40021c00
 8003450:	40013c00 	.word	0x40013c00

08003454 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	460b      	mov	r3, r1
 800345e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691a      	ldr	r2, [r3, #16]
 8003464:	887b      	ldrh	r3, [r7, #2]
 8003466:	4013      	ands	r3, r2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
 8003470:	e001      	b.n	8003476 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003472:	2300      	movs	r3, #0
 8003474:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003476:	7bfb      	ldrb	r3, [r7, #15]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	807b      	strh	r3, [r7, #2]
 8003490:	4613      	mov	r3, r2
 8003492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003494:	787b      	ldrb	r3, [r7, #1]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800349a:	887a      	ldrh	r2, [r7, #2]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034a0:	e003      	b.n	80034aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034a2:	887b      	ldrh	r3, [r7, #2]
 80034a4:	041a      	lsls	r2, r3, #16
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	619a      	str	r2, [r3, #24]
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b085      	sub	sp, #20
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	460b      	mov	r3, r1
 80034c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034c8:	887a      	ldrh	r2, [r7, #2]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4013      	ands	r3, r2
 80034ce:	041a      	lsls	r2, r3, #16
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	43d9      	mvns	r1, r3
 80034d4:	887b      	ldrh	r3, [r7, #2]
 80034d6:	400b      	ands	r3, r1
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	619a      	str	r2, [r3, #24]
}
 80034de:	bf00      	nop
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
	...

080034ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e267      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d075      	beq.n	80035f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800350a:	4b88      	ldr	r3, [pc, #544]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 030c 	and.w	r3, r3, #12
 8003512:	2b04      	cmp	r3, #4
 8003514:	d00c      	beq.n	8003530 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003516:	4b85      	ldr	r3, [pc, #532]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800351e:	2b08      	cmp	r3, #8
 8003520:	d112      	bne.n	8003548 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003522:	4b82      	ldr	r3, [pc, #520]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800352a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800352e:	d10b      	bne.n	8003548 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003530:	4b7e      	ldr	r3, [pc, #504]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d05b      	beq.n	80035f4 <HAL_RCC_OscConfig+0x108>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d157      	bne.n	80035f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e242      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003550:	d106      	bne.n	8003560 <HAL_RCC_OscConfig+0x74>
 8003552:	4b76      	ldr	r3, [pc, #472]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a75      	ldr	r2, [pc, #468]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	e01d      	b.n	800359c <HAL_RCC_OscConfig+0xb0>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003568:	d10c      	bne.n	8003584 <HAL_RCC_OscConfig+0x98>
 800356a:	4b70      	ldr	r3, [pc, #448]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a6f      	ldr	r2, [pc, #444]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003570:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	4b6d      	ldr	r3, [pc, #436]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a6c      	ldr	r2, [pc, #432]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800357c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	e00b      	b.n	800359c <HAL_RCC_OscConfig+0xb0>
 8003584:	4b69      	ldr	r3, [pc, #420]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a68      	ldr	r2, [pc, #416]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800358a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800358e:	6013      	str	r3, [r2, #0]
 8003590:	4b66      	ldr	r3, [pc, #408]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a65      	ldr	r2, [pc, #404]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003596:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800359a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d013      	beq.n	80035cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a4:	f7ff fccc 	bl	8002f40 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ac:	f7ff fcc8 	bl	8002f40 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b64      	cmp	r3, #100	@ 0x64
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e207      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035be:	4b5b      	ldr	r3, [pc, #364]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f0      	beq.n	80035ac <HAL_RCC_OscConfig+0xc0>
 80035ca:	e014      	b.n	80035f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035cc:	f7ff fcb8 	bl	8002f40 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d4:	f7ff fcb4 	bl	8002f40 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b64      	cmp	r3, #100	@ 0x64
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e1f3      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035e6:	4b51      	ldr	r3, [pc, #324]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f0      	bne.n	80035d4 <HAL_RCC_OscConfig+0xe8>
 80035f2:	e000      	b.n	80035f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d063      	beq.n	80036ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003602:	4b4a      	ldr	r3, [pc, #296]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 030c 	and.w	r3, r3, #12
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00b      	beq.n	8003626 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800360e:	4b47      	ldr	r3, [pc, #284]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003616:	2b08      	cmp	r3, #8
 8003618:	d11c      	bne.n	8003654 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800361a:	4b44      	ldr	r3, [pc, #272]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d116      	bne.n	8003654 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003626:	4b41      	ldr	r3, [pc, #260]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d005      	beq.n	800363e <HAL_RCC_OscConfig+0x152>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d001      	beq.n	800363e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e1c7      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363e:	4b3b      	ldr	r3, [pc, #236]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4937      	ldr	r1, [pc, #220]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800364e:	4313      	orrs	r3, r2
 8003650:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003652:	e03a      	b.n	80036ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d020      	beq.n	800369e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800365c:	4b34      	ldr	r3, [pc, #208]	@ (8003730 <HAL_RCC_OscConfig+0x244>)
 800365e:	2201      	movs	r2, #1
 8003660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003662:	f7ff fc6d 	bl	8002f40 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800366a:	f7ff fc69 	bl	8002f40 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e1a8      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367c:	4b2b      	ldr	r3, [pc, #172]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f0      	beq.n	800366a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003688:	4b28      	ldr	r3, [pc, #160]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4925      	ldr	r1, [pc, #148]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003698:	4313      	orrs	r3, r2
 800369a:	600b      	str	r3, [r1, #0]
 800369c:	e015      	b.n	80036ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800369e:	4b24      	ldr	r3, [pc, #144]	@ (8003730 <HAL_RCC_OscConfig+0x244>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7ff fc4c 	bl	8002f40 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ac:	f7ff fc48 	bl	8002f40 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e187      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036be:	4b1b      	ldr	r3, [pc, #108]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f0      	bne.n	80036ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d036      	beq.n	8003744 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d016      	beq.n	800370c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036de:	4b15      	ldr	r3, [pc, #84]	@ (8003734 <HAL_RCC_OscConfig+0x248>)
 80036e0:	2201      	movs	r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e4:	f7ff fc2c 	bl	8002f40 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ec:	f7ff fc28 	bl	8002f40 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e167      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036fe:	4b0b      	ldr	r3, [pc, #44]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0x200>
 800370a:	e01b      	b.n	8003744 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800370c:	4b09      	ldr	r3, [pc, #36]	@ (8003734 <HAL_RCC_OscConfig+0x248>)
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003712:	f7ff fc15 	bl	8002f40 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003718:	e00e      	b.n	8003738 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800371a:	f7ff fc11 	bl	8002f40 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d907      	bls.n	8003738 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e150      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
 800372c:	40023800 	.word	0x40023800
 8003730:	42470000 	.word	0x42470000
 8003734:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003738:	4b88      	ldr	r3, [pc, #544]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 800373a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1ea      	bne.n	800371a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 8097 	beq.w	8003880 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003752:	2300      	movs	r3, #0
 8003754:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003756:	4b81      	ldr	r3, [pc, #516]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10f      	bne.n	8003782 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	4b7d      	ldr	r3, [pc, #500]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376a:	4a7c      	ldr	r2, [pc, #496]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 800376c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003770:	6413      	str	r3, [r2, #64]	@ 0x40
 8003772:	4b7a      	ldr	r3, [pc, #488]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800377e:	2301      	movs	r3, #1
 8003780:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003782:	4b77      	ldr	r3, [pc, #476]	@ (8003960 <HAL_RCC_OscConfig+0x474>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378a:	2b00      	cmp	r3, #0
 800378c:	d118      	bne.n	80037c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800378e:	4b74      	ldr	r3, [pc, #464]	@ (8003960 <HAL_RCC_OscConfig+0x474>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a73      	ldr	r2, [pc, #460]	@ (8003960 <HAL_RCC_OscConfig+0x474>)
 8003794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800379a:	f7ff fbd1 	bl	8002f40 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a2:	f7ff fbcd 	bl	8002f40 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e10c      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003960 <HAL_RCC_OscConfig+0x474>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d106      	bne.n	80037d6 <HAL_RCC_OscConfig+0x2ea>
 80037c8:	4b64      	ldr	r3, [pc, #400]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037cc:	4a63      	ldr	r2, [pc, #396]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037d4:	e01c      	b.n	8003810 <HAL_RCC_OscConfig+0x324>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b05      	cmp	r3, #5
 80037dc:	d10c      	bne.n	80037f8 <HAL_RCC_OscConfig+0x30c>
 80037de:	4b5f      	ldr	r3, [pc, #380]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e2:	4a5e      	ldr	r2, [pc, #376]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037e4:	f043 0304 	orr.w	r3, r3, #4
 80037e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ea:	4b5c      	ldr	r3, [pc, #368]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ee:	4a5b      	ldr	r2, [pc, #364]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037f6:	e00b      	b.n	8003810 <HAL_RCC_OscConfig+0x324>
 80037f8:	4b58      	ldr	r3, [pc, #352]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fc:	4a57      	ldr	r2, [pc, #348]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037fe:	f023 0301 	bic.w	r3, r3, #1
 8003802:	6713      	str	r3, [r2, #112]	@ 0x70
 8003804:	4b55      	ldr	r3, [pc, #340]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003808:	4a54      	ldr	r2, [pc, #336]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 800380a:	f023 0304 	bic.w	r3, r3, #4
 800380e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d015      	beq.n	8003844 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003818:	f7ff fb92 	bl	8002f40 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381e:	e00a      	b.n	8003836 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003820:	f7ff fb8e 	bl	8002f40 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800382e:	4293      	cmp	r3, r2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e0cb      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003836:	4b49      	ldr	r3, [pc, #292]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0ee      	beq.n	8003820 <HAL_RCC_OscConfig+0x334>
 8003842:	e014      	b.n	800386e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003844:	f7ff fb7c 	bl	8002f40 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384a:	e00a      	b.n	8003862 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384c:	f7ff fb78 	bl	8002f40 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e0b5      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003862:	4b3e      	ldr	r3, [pc, #248]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1ee      	bne.n	800384c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800386e:	7dfb      	ldrb	r3, [r7, #23]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d105      	bne.n	8003880 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003874:	4b39      	ldr	r3, [pc, #228]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003878:	4a38      	ldr	r2, [pc, #224]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 800387a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800387e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80a1 	beq.w	80039cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800388a:	4b34      	ldr	r3, [pc, #208]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 030c 	and.w	r3, r3, #12
 8003892:	2b08      	cmp	r3, #8
 8003894:	d05c      	beq.n	8003950 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d141      	bne.n	8003922 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389e:	4b31      	ldr	r3, [pc, #196]	@ (8003964 <HAL_RCC_OscConfig+0x478>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a4:	f7ff fb4c 	bl	8002f40 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ac:	f7ff fb48 	bl	8002f40 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e087      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038be:	4b27      	ldr	r3, [pc, #156]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69da      	ldr	r2, [r3, #28]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d8:	019b      	lsls	r3, r3, #6
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e0:	085b      	lsrs	r3, r3, #1
 80038e2:	3b01      	subs	r3, #1
 80038e4:	041b      	lsls	r3, r3, #16
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ec:	061b      	lsls	r3, r3, #24
 80038ee:	491b      	ldr	r1, [pc, #108]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003964 <HAL_RCC_OscConfig+0x478>)
 80038f6:	2201      	movs	r2, #1
 80038f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fa:	f7ff fb21 	bl	8002f40 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003902:	f7ff fb1d 	bl	8002f40 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e05c      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003914:	4b11      	ldr	r3, [pc, #68]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0f0      	beq.n	8003902 <HAL_RCC_OscConfig+0x416>
 8003920:	e054      	b.n	80039cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003922:	4b10      	ldr	r3, [pc, #64]	@ (8003964 <HAL_RCC_OscConfig+0x478>)
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003928:	f7ff fb0a 	bl	8002f40 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003930:	f7ff fb06 	bl	8002f40 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e045      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003942:	4b06      	ldr	r3, [pc, #24]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0x444>
 800394e:	e03d      	b.n	80039cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d107      	bne.n	8003968 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e038      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
 800395c:	40023800 	.word	0x40023800
 8003960:	40007000 	.word	0x40007000
 8003964:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003968:	4b1b      	ldr	r3, [pc, #108]	@ (80039d8 <HAL_RCC_OscConfig+0x4ec>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d028      	beq.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003980:	429a      	cmp	r2, r3
 8003982:	d121      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398e:	429a      	cmp	r2, r3
 8003990:	d11a      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003998:	4013      	ands	r3, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800399e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d111      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ae:	085b      	lsrs	r3, r3, #1
 80039b0:	3b01      	subs	r3, #1
 80039b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d107      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e000      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800

080039dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0cc      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039f0:	4b68      	ldr	r3, [pc, #416]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d90c      	bls.n	8003a18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fe:	4b65      	ldr	r3, [pc, #404]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a06:	4b63      	ldr	r3, [pc, #396]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d001      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e0b8      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d020      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a30:	4b59      	ldr	r3, [pc, #356]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	4a58      	ldr	r2, [pc, #352]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a48:	4b53      	ldr	r3, [pc, #332]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	4a52      	ldr	r2, [pc, #328]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a54:	4b50      	ldr	r3, [pc, #320]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	494d      	ldr	r1, [pc, #308]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d044      	beq.n	8003afc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d107      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7a:	4b47      	ldr	r3, [pc, #284]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d119      	bne.n	8003aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e07f      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d003      	beq.n	8003a9a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d107      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d109      	bne.n	8003aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e06f      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e067      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aba:	4b37      	ldr	r3, [pc, #220]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f023 0203 	bic.w	r2, r3, #3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	4934      	ldr	r1, [pc, #208]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003acc:	f7ff fa38 	bl	8002f40 <HAL_GetTick>
 8003ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad2:	e00a      	b.n	8003aea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad4:	f7ff fa34 	bl	8002f40 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e04f      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aea:	4b2b      	ldr	r3, [pc, #172]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 020c 	and.w	r2, r3, #12
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d1eb      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003afc:	4b25      	ldr	r3, [pc, #148]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d20c      	bcs.n	8003b24 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0a:	4b22      	ldr	r3, [pc, #136]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b12:	4b20      	ldr	r3, [pc, #128]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d001      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e032      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b30:	4b19      	ldr	r3, [pc, #100]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	4916      	ldr	r1, [pc, #88]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d009      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b4e:	4b12      	ldr	r3, [pc, #72]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	490e      	ldr	r1, [pc, #56]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b62:	f000 f821 	bl	8003ba8 <HAL_RCC_GetSysClockFreq>
 8003b66:	4602      	mov	r2, r0
 8003b68:	4b0b      	ldr	r3, [pc, #44]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	490a      	ldr	r1, [pc, #40]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c0>)
 8003b74:	5ccb      	ldrb	r3, [r1, r3]
 8003b76:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7a:	4a09      	ldr	r2, [pc, #36]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b7e:	4b09      	ldr	r3, [pc, #36]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff f80c 	bl	8002ba0 <HAL_InitTick>

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40023c00 	.word	0x40023c00
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	08005380 	.word	0x08005380
 8003ba0:	20000008 	.word	0x20000008
 8003ba4:	2000000c 	.word	0x2000000c

08003ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bac:	b090      	sub	sp, #64	@ 0x40
 8003bae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bc0:	4b59      	ldr	r3, [pc, #356]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 030c 	and.w	r3, r3, #12
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d00d      	beq.n	8003be8 <HAL_RCC_GetSysClockFreq+0x40>
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	f200 80a1 	bhi.w	8003d14 <HAL_RCC_GetSysClockFreq+0x16c>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <HAL_RCC_GetSysClockFreq+0x34>
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d003      	beq.n	8003be2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bda:	e09b      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bdc:	4b53      	ldr	r3, [pc, #332]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x184>)
 8003bde:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003be0:	e09b      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003be2:	4b53      	ldr	r3, [pc, #332]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x188>)
 8003be4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003be6:	e098      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003be8:	4b4f      	ldr	r3, [pc, #316]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bf0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bf2:	4b4d      	ldr	r3, [pc, #308]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d028      	beq.n	8003c50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bfe:	4b4a      	ldr	r3, [pc, #296]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	099b      	lsrs	r3, r3, #6
 8003c04:	2200      	movs	r2, #0
 8003c06:	623b      	str	r3, [r7, #32]
 8003c08:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c10:	2100      	movs	r1, #0
 8003c12:	4b47      	ldr	r3, [pc, #284]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c14:	fb03 f201 	mul.w	r2, r3, r1
 8003c18:	2300      	movs	r3, #0
 8003c1a:	fb00 f303 	mul.w	r3, r0, r3
 8003c1e:	4413      	add	r3, r2
 8003c20:	4a43      	ldr	r2, [pc, #268]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c22:	fba0 1202 	umull	r1, r2, r0, r2
 8003c26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c28:	460a      	mov	r2, r1
 8003c2a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003c2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c2e:	4413      	add	r3, r2
 8003c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c34:	2200      	movs	r2, #0
 8003c36:	61bb      	str	r3, [r7, #24]
 8003c38:	61fa      	str	r2, [r7, #28]
 8003c3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003c42:	f7fc fb15 	bl	8000270 <__aeabi_uldivmod>
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c4e:	e053      	b.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c50:	4b35      	ldr	r3, [pc, #212]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	099b      	lsrs	r3, r3, #6
 8003c56:	2200      	movs	r2, #0
 8003c58:	613b      	str	r3, [r7, #16]
 8003c5a:	617a      	str	r2, [r7, #20]
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c62:	f04f 0b00 	mov.w	fp, #0
 8003c66:	4652      	mov	r2, sl
 8003c68:	465b      	mov	r3, fp
 8003c6a:	f04f 0000 	mov.w	r0, #0
 8003c6e:	f04f 0100 	mov.w	r1, #0
 8003c72:	0159      	lsls	r1, r3, #5
 8003c74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c78:	0150      	lsls	r0, r2, #5
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	ebb2 080a 	subs.w	r8, r2, sl
 8003c82:	eb63 090b 	sbc.w	r9, r3, fp
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c9a:	ebb2 0408 	subs.w	r4, r2, r8
 8003c9e:	eb63 0509 	sbc.w	r5, r3, r9
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	f04f 0300 	mov.w	r3, #0
 8003caa:	00eb      	lsls	r3, r5, #3
 8003cac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cb0:	00e2      	lsls	r2, r4, #3
 8003cb2:	4614      	mov	r4, r2
 8003cb4:	461d      	mov	r5, r3
 8003cb6:	eb14 030a 	adds.w	r3, r4, sl
 8003cba:	603b      	str	r3, [r7, #0]
 8003cbc:	eb45 030b 	adc.w	r3, r5, fp
 8003cc0:	607b      	str	r3, [r7, #4]
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cce:	4629      	mov	r1, r5
 8003cd0:	028b      	lsls	r3, r1, #10
 8003cd2:	4621      	mov	r1, r4
 8003cd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cd8:	4621      	mov	r1, r4
 8003cda:	028a      	lsls	r2, r1, #10
 8003cdc:	4610      	mov	r0, r2
 8003cde:	4619      	mov	r1, r3
 8003ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	60bb      	str	r3, [r7, #8]
 8003ce6:	60fa      	str	r2, [r7, #12]
 8003ce8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cec:	f7fc fac0 	bl	8000270 <__aeabi_uldivmod>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	0c1b      	lsrs	r3, r3, #16
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	3301      	adds	r3, #1
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003d08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d12:	e002      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d14:	4b05      	ldr	r3, [pc, #20]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x184>)
 8003d16:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3740      	adds	r7, #64	@ 0x40
 8003d20:	46bd      	mov	sp, r7
 8003d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d26:	bf00      	nop
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	00f42400 	.word	0x00f42400
 8003d30:	017d7840 	.word	0x017d7840

08003d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d38:	4b03      	ldr	r3, [pc, #12]	@ (8003d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	20000008 	.word	0x20000008

08003d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d50:	f7ff fff0 	bl	8003d34 <HAL_RCC_GetHCLKFreq>
 8003d54:	4602      	mov	r2, r0
 8003d56:	4b05      	ldr	r3, [pc, #20]	@ (8003d6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	0b5b      	lsrs	r3, r3, #13
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	4903      	ldr	r1, [pc, #12]	@ (8003d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d62:	5ccb      	ldrb	r3, [r1, r3]
 8003d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	08005390 	.word	0x08005390

08003d74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	220f      	movs	r2, #15
 8003d82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d84:	4b12      	ldr	r3, [pc, #72]	@ (8003dd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 0203 	and.w	r2, r3, #3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d90:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003da8:	4b09      	ldr	r3, [pc, #36]	@ (8003dd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	08db      	lsrs	r3, r3, #3
 8003dae:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003db6:	4b07      	ldr	r3, [pc, #28]	@ (8003dd4 <HAL_RCC_GetClockConfig+0x60>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0207 	and.w	r2, r3, #7
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	601a      	str	r2, [r3, #0]
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	40023c00 	.word	0x40023c00

08003dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e041      	b.n	8003e6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d106      	bne.n	8003e04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f839 	bl	8003e76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3304      	adds	r3, #4
 8003e14:	4619      	mov	r1, r3
 8003e16:	4610      	mov	r0, r2
 8003e18:	f000 f9c0 	bl	800419c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
	...

08003e8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d001      	beq.n	8003ea4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e04e      	b.n	8003f42 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0201 	orr.w	r2, r2, #1
 8003eba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a23      	ldr	r2, [pc, #140]	@ (8003f50 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d022      	beq.n	8003f0c <HAL_TIM_Base_Start_IT+0x80>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ece:	d01d      	beq.n	8003f0c <HAL_TIM_Base_Start_IT+0x80>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a1f      	ldr	r2, [pc, #124]	@ (8003f54 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d018      	beq.n	8003f0c <HAL_TIM_Base_Start_IT+0x80>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a1e      	ldr	r2, [pc, #120]	@ (8003f58 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d013      	beq.n	8003f0c <HAL_TIM_Base_Start_IT+0x80>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8003f5c <HAL_TIM_Base_Start_IT+0xd0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00e      	beq.n	8003f0c <HAL_TIM_Base_Start_IT+0x80>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a1b      	ldr	r2, [pc, #108]	@ (8003f60 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d009      	beq.n	8003f0c <HAL_TIM_Base_Start_IT+0x80>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a19      	ldr	r2, [pc, #100]	@ (8003f64 <HAL_TIM_Base_Start_IT+0xd8>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d004      	beq.n	8003f0c <HAL_TIM_Base_Start_IT+0x80>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a18      	ldr	r2, [pc, #96]	@ (8003f68 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d111      	bne.n	8003f30 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2b06      	cmp	r3, #6
 8003f1c:	d010      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f042 0201 	orr.w	r2, r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2e:	e007      	b.n	8003f40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0201 	orr.w	r2, r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40010000 	.word	0x40010000
 8003f54:	40000400 	.word	0x40000400
 8003f58:	40000800 	.word	0x40000800
 8003f5c:	40000c00 	.word	0x40000c00
 8003f60:	40010400 	.word	0x40010400
 8003f64:	40014000 	.word	0x40014000
 8003f68:	40001800 	.word	0x40001800

08003f6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d020      	beq.n	8003fd0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d01b      	beq.n	8003fd0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f06f 0202 	mvn.w	r2, #2
 8003fa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f8d2 	bl	8004160 <HAL_TIM_IC_CaptureCallback>
 8003fbc:	e005      	b.n	8003fca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f8c4 	bl	800414c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f8d5 	bl	8004174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f003 0304 	and.w	r3, r3, #4
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d020      	beq.n	800401c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01b      	beq.n	800401c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f06f 0204 	mvn.w	r2, #4
 8003fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f8ac 	bl	8004160 <HAL_TIM_IC_CaptureCallback>
 8004008:	e005      	b.n	8004016 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f89e 	bl	800414c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f8af 	bl	8004174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b00      	cmp	r3, #0
 8004024:	d020      	beq.n	8004068 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f003 0308 	and.w	r3, r3, #8
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01b      	beq.n	8004068 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f06f 0208 	mvn.w	r2, #8
 8004038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2204      	movs	r2, #4
 800403e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f886 	bl	8004160 <HAL_TIM_IC_CaptureCallback>
 8004054:	e005      	b.n	8004062 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f878 	bl	800414c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f889 	bl	8004174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f003 0310 	and.w	r3, r3, #16
 800406e:	2b00      	cmp	r3, #0
 8004070:	d020      	beq.n	80040b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f003 0310 	and.w	r3, r3, #16
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01b      	beq.n	80040b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0210 	mvn.w	r2, #16
 8004084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2208      	movs	r2, #8
 800408a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f860 	bl	8004160 <HAL_TIM_IC_CaptureCallback>
 80040a0:	e005      	b.n	80040ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f852 	bl	800414c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f863 	bl	8004174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00c      	beq.n	80040d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d007      	beq.n	80040d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f06f 0201 	mvn.w	r2, #1
 80040d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7fe fd24 	bl	8002b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00c      	beq.n	80040fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d007      	beq.n	80040fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f906 	bl	8004308 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00c      	beq.n	8004120 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800410c:	2b00      	cmp	r3, #0
 800410e:	d007      	beq.n	8004120 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f834 	bl	8004188 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00c      	beq.n	8004144 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b00      	cmp	r3, #0
 8004132:	d007      	beq.n	8004144 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0220 	mvn.w	r2, #32
 800413c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f8d8 	bl	80042f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004144:	bf00      	nop
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a46      	ldr	r2, [pc, #280]	@ (80042c8 <TIM_Base_SetConfig+0x12c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d013      	beq.n	80041dc <TIM_Base_SetConfig+0x40>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ba:	d00f      	beq.n	80041dc <TIM_Base_SetConfig+0x40>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a43      	ldr	r2, [pc, #268]	@ (80042cc <TIM_Base_SetConfig+0x130>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00b      	beq.n	80041dc <TIM_Base_SetConfig+0x40>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a42      	ldr	r2, [pc, #264]	@ (80042d0 <TIM_Base_SetConfig+0x134>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d007      	beq.n	80041dc <TIM_Base_SetConfig+0x40>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a41      	ldr	r2, [pc, #260]	@ (80042d4 <TIM_Base_SetConfig+0x138>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d003      	beq.n	80041dc <TIM_Base_SetConfig+0x40>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a40      	ldr	r2, [pc, #256]	@ (80042d8 <TIM_Base_SetConfig+0x13c>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d108      	bne.n	80041ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a35      	ldr	r2, [pc, #212]	@ (80042c8 <TIM_Base_SetConfig+0x12c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d02b      	beq.n	800424e <TIM_Base_SetConfig+0xb2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041fc:	d027      	beq.n	800424e <TIM_Base_SetConfig+0xb2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a32      	ldr	r2, [pc, #200]	@ (80042cc <TIM_Base_SetConfig+0x130>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d023      	beq.n	800424e <TIM_Base_SetConfig+0xb2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a31      	ldr	r2, [pc, #196]	@ (80042d0 <TIM_Base_SetConfig+0x134>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d01f      	beq.n	800424e <TIM_Base_SetConfig+0xb2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a30      	ldr	r2, [pc, #192]	@ (80042d4 <TIM_Base_SetConfig+0x138>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d01b      	beq.n	800424e <TIM_Base_SetConfig+0xb2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a2f      	ldr	r2, [pc, #188]	@ (80042d8 <TIM_Base_SetConfig+0x13c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d017      	beq.n	800424e <TIM_Base_SetConfig+0xb2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a2e      	ldr	r2, [pc, #184]	@ (80042dc <TIM_Base_SetConfig+0x140>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d013      	beq.n	800424e <TIM_Base_SetConfig+0xb2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a2d      	ldr	r2, [pc, #180]	@ (80042e0 <TIM_Base_SetConfig+0x144>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00f      	beq.n	800424e <TIM_Base_SetConfig+0xb2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a2c      	ldr	r2, [pc, #176]	@ (80042e4 <TIM_Base_SetConfig+0x148>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00b      	beq.n	800424e <TIM_Base_SetConfig+0xb2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a2b      	ldr	r2, [pc, #172]	@ (80042e8 <TIM_Base_SetConfig+0x14c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d007      	beq.n	800424e <TIM_Base_SetConfig+0xb2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a2a      	ldr	r2, [pc, #168]	@ (80042ec <TIM_Base_SetConfig+0x150>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d003      	beq.n	800424e <TIM_Base_SetConfig+0xb2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a29      	ldr	r2, [pc, #164]	@ (80042f0 <TIM_Base_SetConfig+0x154>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d108      	bne.n	8004260 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a10      	ldr	r2, [pc, #64]	@ (80042c8 <TIM_Base_SetConfig+0x12c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d003      	beq.n	8004294 <TIM_Base_SetConfig+0xf8>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a12      	ldr	r2, [pc, #72]	@ (80042d8 <TIM_Base_SetConfig+0x13c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d103      	bne.n	800429c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d105      	bne.n	80042ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	f023 0201 	bic.w	r2, r3, #1
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	611a      	str	r2, [r3, #16]
  }
}
 80042ba:	bf00      	nop
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40010000 	.word	0x40010000
 80042cc:	40000400 	.word	0x40000400
 80042d0:	40000800 	.word	0x40000800
 80042d4:	40000c00 	.word	0x40000c00
 80042d8:	40010400 	.word	0x40010400
 80042dc:	40014000 	.word	0x40014000
 80042e0:	40014400 	.word	0x40014400
 80042e4:	40014800 	.word	0x40014800
 80042e8:	40001800 	.word	0x40001800
 80042ec:	40001c00 	.word	0x40001c00
 80042f0:	40002000 	.word	0x40002000

080042f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <srand>:
 800431c:	b538      	push	{r3, r4, r5, lr}
 800431e:	4b10      	ldr	r3, [pc, #64]	@ (8004360 <srand+0x44>)
 8004320:	681d      	ldr	r5, [r3, #0]
 8004322:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004324:	4604      	mov	r4, r0
 8004326:	b9b3      	cbnz	r3, 8004356 <srand+0x3a>
 8004328:	2018      	movs	r0, #24
 800432a:	f000 fa4b 	bl	80047c4 <malloc>
 800432e:	4602      	mov	r2, r0
 8004330:	6328      	str	r0, [r5, #48]	@ 0x30
 8004332:	b920      	cbnz	r0, 800433e <srand+0x22>
 8004334:	4b0b      	ldr	r3, [pc, #44]	@ (8004364 <srand+0x48>)
 8004336:	480c      	ldr	r0, [pc, #48]	@ (8004368 <srand+0x4c>)
 8004338:	2146      	movs	r1, #70	@ 0x46
 800433a:	f000 f9db 	bl	80046f4 <__assert_func>
 800433e:	490b      	ldr	r1, [pc, #44]	@ (800436c <srand+0x50>)
 8004340:	4b0b      	ldr	r3, [pc, #44]	@ (8004370 <srand+0x54>)
 8004342:	e9c0 1300 	strd	r1, r3, [r0]
 8004346:	4b0b      	ldr	r3, [pc, #44]	@ (8004374 <srand+0x58>)
 8004348:	6083      	str	r3, [r0, #8]
 800434a:	230b      	movs	r3, #11
 800434c:	8183      	strh	r3, [r0, #12]
 800434e:	2100      	movs	r1, #0
 8004350:	2001      	movs	r0, #1
 8004352:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004356:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004358:	2200      	movs	r2, #0
 800435a:	611c      	str	r4, [r3, #16]
 800435c:	615a      	str	r2, [r3, #20]
 800435e:	bd38      	pop	{r3, r4, r5, pc}
 8004360:	20000020 	.word	0x20000020
 8004364:	08005398 	.word	0x08005398
 8004368:	080053af 	.word	0x080053af
 800436c:	abcd330e 	.word	0xabcd330e
 8004370:	e66d1234 	.word	0xe66d1234
 8004374:	0005deec 	.word	0x0005deec

08004378 <std>:
 8004378:	2300      	movs	r3, #0
 800437a:	b510      	push	{r4, lr}
 800437c:	4604      	mov	r4, r0
 800437e:	e9c0 3300 	strd	r3, r3, [r0]
 8004382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004386:	6083      	str	r3, [r0, #8]
 8004388:	8181      	strh	r1, [r0, #12]
 800438a:	6643      	str	r3, [r0, #100]	@ 0x64
 800438c:	81c2      	strh	r2, [r0, #14]
 800438e:	6183      	str	r3, [r0, #24]
 8004390:	4619      	mov	r1, r3
 8004392:	2208      	movs	r2, #8
 8004394:	305c      	adds	r0, #92	@ 0x5c
 8004396:	f000 f8f4 	bl	8004582 <memset>
 800439a:	4b0d      	ldr	r3, [pc, #52]	@ (80043d0 <std+0x58>)
 800439c:	6263      	str	r3, [r4, #36]	@ 0x24
 800439e:	4b0d      	ldr	r3, [pc, #52]	@ (80043d4 <std+0x5c>)
 80043a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80043a2:	4b0d      	ldr	r3, [pc, #52]	@ (80043d8 <std+0x60>)
 80043a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80043a6:	4b0d      	ldr	r3, [pc, #52]	@ (80043dc <std+0x64>)
 80043a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80043aa:	4b0d      	ldr	r3, [pc, #52]	@ (80043e0 <std+0x68>)
 80043ac:	6224      	str	r4, [r4, #32]
 80043ae:	429c      	cmp	r4, r3
 80043b0:	d006      	beq.n	80043c0 <std+0x48>
 80043b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80043b6:	4294      	cmp	r4, r2
 80043b8:	d002      	beq.n	80043c0 <std+0x48>
 80043ba:	33d0      	adds	r3, #208	@ 0xd0
 80043bc:	429c      	cmp	r4, r3
 80043be:	d105      	bne.n	80043cc <std+0x54>
 80043c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80043c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043c8:	f000 b982 	b.w	80046d0 <__retarget_lock_init_recursive>
 80043cc:	bd10      	pop	{r4, pc}
 80043ce:	bf00      	nop
 80043d0:	080044fd 	.word	0x080044fd
 80043d4:	0800451f 	.word	0x0800451f
 80043d8:	08004557 	.word	0x08004557
 80043dc:	0800457b 	.word	0x0800457b
 80043e0:	20012df4 	.word	0x20012df4

080043e4 <stdio_exit_handler>:
 80043e4:	4a02      	ldr	r2, [pc, #8]	@ (80043f0 <stdio_exit_handler+0xc>)
 80043e6:	4903      	ldr	r1, [pc, #12]	@ (80043f4 <stdio_exit_handler+0x10>)
 80043e8:	4803      	ldr	r0, [pc, #12]	@ (80043f8 <stdio_exit_handler+0x14>)
 80043ea:	f000 b869 	b.w	80044c0 <_fwalk_sglue>
 80043ee:	bf00      	nop
 80043f0:	20000014 	.word	0x20000014
 80043f4:	08004a39 	.word	0x08004a39
 80043f8:	20000024 	.word	0x20000024

080043fc <cleanup_stdio>:
 80043fc:	6841      	ldr	r1, [r0, #4]
 80043fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004430 <cleanup_stdio+0x34>)
 8004400:	4299      	cmp	r1, r3
 8004402:	b510      	push	{r4, lr}
 8004404:	4604      	mov	r4, r0
 8004406:	d001      	beq.n	800440c <cleanup_stdio+0x10>
 8004408:	f000 fb16 	bl	8004a38 <_fflush_r>
 800440c:	68a1      	ldr	r1, [r4, #8]
 800440e:	4b09      	ldr	r3, [pc, #36]	@ (8004434 <cleanup_stdio+0x38>)
 8004410:	4299      	cmp	r1, r3
 8004412:	d002      	beq.n	800441a <cleanup_stdio+0x1e>
 8004414:	4620      	mov	r0, r4
 8004416:	f000 fb0f 	bl	8004a38 <_fflush_r>
 800441a:	68e1      	ldr	r1, [r4, #12]
 800441c:	4b06      	ldr	r3, [pc, #24]	@ (8004438 <cleanup_stdio+0x3c>)
 800441e:	4299      	cmp	r1, r3
 8004420:	d004      	beq.n	800442c <cleanup_stdio+0x30>
 8004422:	4620      	mov	r0, r4
 8004424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004428:	f000 bb06 	b.w	8004a38 <_fflush_r>
 800442c:	bd10      	pop	{r4, pc}
 800442e:	bf00      	nop
 8004430:	20012df4 	.word	0x20012df4
 8004434:	20012e5c 	.word	0x20012e5c
 8004438:	20012ec4 	.word	0x20012ec4

0800443c <global_stdio_init.part.0>:
 800443c:	b510      	push	{r4, lr}
 800443e:	4b0b      	ldr	r3, [pc, #44]	@ (800446c <global_stdio_init.part.0+0x30>)
 8004440:	4c0b      	ldr	r4, [pc, #44]	@ (8004470 <global_stdio_init.part.0+0x34>)
 8004442:	4a0c      	ldr	r2, [pc, #48]	@ (8004474 <global_stdio_init.part.0+0x38>)
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	4620      	mov	r0, r4
 8004448:	2200      	movs	r2, #0
 800444a:	2104      	movs	r1, #4
 800444c:	f7ff ff94 	bl	8004378 <std>
 8004450:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004454:	2201      	movs	r2, #1
 8004456:	2109      	movs	r1, #9
 8004458:	f7ff ff8e 	bl	8004378 <std>
 800445c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004460:	2202      	movs	r2, #2
 8004462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004466:	2112      	movs	r1, #18
 8004468:	f7ff bf86 	b.w	8004378 <std>
 800446c:	20012f2c 	.word	0x20012f2c
 8004470:	20012df4 	.word	0x20012df4
 8004474:	080043e5 	.word	0x080043e5

08004478 <__sfp_lock_acquire>:
 8004478:	4801      	ldr	r0, [pc, #4]	@ (8004480 <__sfp_lock_acquire+0x8>)
 800447a:	f000 b92a 	b.w	80046d2 <__retarget_lock_acquire_recursive>
 800447e:	bf00      	nop
 8004480:	20012f35 	.word	0x20012f35

08004484 <__sfp_lock_release>:
 8004484:	4801      	ldr	r0, [pc, #4]	@ (800448c <__sfp_lock_release+0x8>)
 8004486:	f000 b925 	b.w	80046d4 <__retarget_lock_release_recursive>
 800448a:	bf00      	nop
 800448c:	20012f35 	.word	0x20012f35

08004490 <__sinit>:
 8004490:	b510      	push	{r4, lr}
 8004492:	4604      	mov	r4, r0
 8004494:	f7ff fff0 	bl	8004478 <__sfp_lock_acquire>
 8004498:	6a23      	ldr	r3, [r4, #32]
 800449a:	b11b      	cbz	r3, 80044a4 <__sinit+0x14>
 800449c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044a0:	f7ff bff0 	b.w	8004484 <__sfp_lock_release>
 80044a4:	4b04      	ldr	r3, [pc, #16]	@ (80044b8 <__sinit+0x28>)
 80044a6:	6223      	str	r3, [r4, #32]
 80044a8:	4b04      	ldr	r3, [pc, #16]	@ (80044bc <__sinit+0x2c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1f5      	bne.n	800449c <__sinit+0xc>
 80044b0:	f7ff ffc4 	bl	800443c <global_stdio_init.part.0>
 80044b4:	e7f2      	b.n	800449c <__sinit+0xc>
 80044b6:	bf00      	nop
 80044b8:	080043fd 	.word	0x080043fd
 80044bc:	20012f2c 	.word	0x20012f2c

080044c0 <_fwalk_sglue>:
 80044c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044c4:	4607      	mov	r7, r0
 80044c6:	4688      	mov	r8, r1
 80044c8:	4614      	mov	r4, r2
 80044ca:	2600      	movs	r6, #0
 80044cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044d0:	f1b9 0901 	subs.w	r9, r9, #1
 80044d4:	d505      	bpl.n	80044e2 <_fwalk_sglue+0x22>
 80044d6:	6824      	ldr	r4, [r4, #0]
 80044d8:	2c00      	cmp	r4, #0
 80044da:	d1f7      	bne.n	80044cc <_fwalk_sglue+0xc>
 80044dc:	4630      	mov	r0, r6
 80044de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044e2:	89ab      	ldrh	r3, [r5, #12]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d907      	bls.n	80044f8 <_fwalk_sglue+0x38>
 80044e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044ec:	3301      	adds	r3, #1
 80044ee:	d003      	beq.n	80044f8 <_fwalk_sglue+0x38>
 80044f0:	4629      	mov	r1, r5
 80044f2:	4638      	mov	r0, r7
 80044f4:	47c0      	blx	r8
 80044f6:	4306      	orrs	r6, r0
 80044f8:	3568      	adds	r5, #104	@ 0x68
 80044fa:	e7e9      	b.n	80044d0 <_fwalk_sglue+0x10>

080044fc <__sread>:
 80044fc:	b510      	push	{r4, lr}
 80044fe:	460c      	mov	r4, r1
 8004500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004504:	f000 f896 	bl	8004634 <_read_r>
 8004508:	2800      	cmp	r0, #0
 800450a:	bfab      	itete	ge
 800450c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800450e:	89a3      	ldrhlt	r3, [r4, #12]
 8004510:	181b      	addge	r3, r3, r0
 8004512:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004516:	bfac      	ite	ge
 8004518:	6563      	strge	r3, [r4, #84]	@ 0x54
 800451a:	81a3      	strhlt	r3, [r4, #12]
 800451c:	bd10      	pop	{r4, pc}

0800451e <__swrite>:
 800451e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004522:	461f      	mov	r7, r3
 8004524:	898b      	ldrh	r3, [r1, #12]
 8004526:	05db      	lsls	r3, r3, #23
 8004528:	4605      	mov	r5, r0
 800452a:	460c      	mov	r4, r1
 800452c:	4616      	mov	r6, r2
 800452e:	d505      	bpl.n	800453c <__swrite+0x1e>
 8004530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004534:	2302      	movs	r3, #2
 8004536:	2200      	movs	r2, #0
 8004538:	f000 f86a 	bl	8004610 <_lseek_r>
 800453c:	89a3      	ldrh	r3, [r4, #12]
 800453e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004542:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004546:	81a3      	strh	r3, [r4, #12]
 8004548:	4632      	mov	r2, r6
 800454a:	463b      	mov	r3, r7
 800454c:	4628      	mov	r0, r5
 800454e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004552:	f000 b881 	b.w	8004658 <_write_r>

08004556 <__sseek>:
 8004556:	b510      	push	{r4, lr}
 8004558:	460c      	mov	r4, r1
 800455a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800455e:	f000 f857 	bl	8004610 <_lseek_r>
 8004562:	1c43      	adds	r3, r0, #1
 8004564:	89a3      	ldrh	r3, [r4, #12]
 8004566:	bf15      	itete	ne
 8004568:	6560      	strne	r0, [r4, #84]	@ 0x54
 800456a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800456e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004572:	81a3      	strheq	r3, [r4, #12]
 8004574:	bf18      	it	ne
 8004576:	81a3      	strhne	r3, [r4, #12]
 8004578:	bd10      	pop	{r4, pc}

0800457a <__sclose>:
 800457a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800457e:	f000 b825 	b.w	80045cc <_close_r>

08004582 <memset>:
 8004582:	4402      	add	r2, r0
 8004584:	4603      	mov	r3, r0
 8004586:	4293      	cmp	r3, r2
 8004588:	d100      	bne.n	800458c <memset+0xa>
 800458a:	4770      	bx	lr
 800458c:	f803 1b01 	strb.w	r1, [r3], #1
 8004590:	e7f9      	b.n	8004586 <memset+0x4>
	...

08004594 <time>:
 8004594:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8004596:	4b0c      	ldr	r3, [pc, #48]	@ (80045c8 <time+0x34>)
 8004598:	f04f 36ff 	mov.w	r6, #4294967295
 800459c:	f04f 37ff 	mov.w	r7, #4294967295
 80045a0:	4669      	mov	r1, sp
 80045a2:	4604      	mov	r4, r0
 80045a4:	2200      	movs	r2, #0
 80045a6:	6818      	ldr	r0, [r3, #0]
 80045a8:	e9cd 6700 	strd	r6, r7, [sp]
 80045ac:	f000 f81e 	bl	80045ec <_gettimeofday_r>
 80045b0:	2800      	cmp	r0, #0
 80045b2:	bfb8      	it	lt
 80045b4:	e9cd 6700 	strdlt	r6, r7, [sp]
 80045b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045bc:	b10c      	cbz	r4, 80045c2 <time+0x2e>
 80045be:	e9c4 0100 	strd	r0, r1, [r4]
 80045c2:	b004      	add	sp, #16
 80045c4:	bdd0      	pop	{r4, r6, r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20000020 	.word	0x20000020

080045cc <_close_r>:
 80045cc:	b538      	push	{r3, r4, r5, lr}
 80045ce:	4d06      	ldr	r5, [pc, #24]	@ (80045e8 <_close_r+0x1c>)
 80045d0:	2300      	movs	r3, #0
 80045d2:	4604      	mov	r4, r0
 80045d4:	4608      	mov	r0, r1
 80045d6:	602b      	str	r3, [r5, #0]
 80045d8:	f7fe fbd6 	bl	8002d88 <_close>
 80045dc:	1c43      	adds	r3, r0, #1
 80045de:	d102      	bne.n	80045e6 <_close_r+0x1a>
 80045e0:	682b      	ldr	r3, [r5, #0]
 80045e2:	b103      	cbz	r3, 80045e6 <_close_r+0x1a>
 80045e4:	6023      	str	r3, [r4, #0]
 80045e6:	bd38      	pop	{r3, r4, r5, pc}
 80045e8:	20012f30 	.word	0x20012f30

080045ec <_gettimeofday_r>:
 80045ec:	b538      	push	{r3, r4, r5, lr}
 80045ee:	4d07      	ldr	r5, [pc, #28]	@ (800460c <_gettimeofday_r+0x20>)
 80045f0:	2300      	movs	r3, #0
 80045f2:	4604      	mov	r4, r0
 80045f4:	4608      	mov	r0, r1
 80045f6:	4611      	mov	r1, r2
 80045f8:	602b      	str	r3, [r5, #0]
 80045fa:	f000 fe99 	bl	8005330 <_gettimeofday>
 80045fe:	1c43      	adds	r3, r0, #1
 8004600:	d102      	bne.n	8004608 <_gettimeofday_r+0x1c>
 8004602:	682b      	ldr	r3, [r5, #0]
 8004604:	b103      	cbz	r3, 8004608 <_gettimeofday_r+0x1c>
 8004606:	6023      	str	r3, [r4, #0]
 8004608:	bd38      	pop	{r3, r4, r5, pc}
 800460a:	bf00      	nop
 800460c:	20012f30 	.word	0x20012f30

08004610 <_lseek_r>:
 8004610:	b538      	push	{r3, r4, r5, lr}
 8004612:	4d07      	ldr	r5, [pc, #28]	@ (8004630 <_lseek_r+0x20>)
 8004614:	4604      	mov	r4, r0
 8004616:	4608      	mov	r0, r1
 8004618:	4611      	mov	r1, r2
 800461a:	2200      	movs	r2, #0
 800461c:	602a      	str	r2, [r5, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	f7fe fbd9 	bl	8002dd6 <_lseek>
 8004624:	1c43      	adds	r3, r0, #1
 8004626:	d102      	bne.n	800462e <_lseek_r+0x1e>
 8004628:	682b      	ldr	r3, [r5, #0]
 800462a:	b103      	cbz	r3, 800462e <_lseek_r+0x1e>
 800462c:	6023      	str	r3, [r4, #0]
 800462e:	bd38      	pop	{r3, r4, r5, pc}
 8004630:	20012f30 	.word	0x20012f30

08004634 <_read_r>:
 8004634:	b538      	push	{r3, r4, r5, lr}
 8004636:	4d07      	ldr	r5, [pc, #28]	@ (8004654 <_read_r+0x20>)
 8004638:	4604      	mov	r4, r0
 800463a:	4608      	mov	r0, r1
 800463c:	4611      	mov	r1, r2
 800463e:	2200      	movs	r2, #0
 8004640:	602a      	str	r2, [r5, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	f7fe fb67 	bl	8002d16 <_read>
 8004648:	1c43      	adds	r3, r0, #1
 800464a:	d102      	bne.n	8004652 <_read_r+0x1e>
 800464c:	682b      	ldr	r3, [r5, #0]
 800464e:	b103      	cbz	r3, 8004652 <_read_r+0x1e>
 8004650:	6023      	str	r3, [r4, #0]
 8004652:	bd38      	pop	{r3, r4, r5, pc}
 8004654:	20012f30 	.word	0x20012f30

08004658 <_write_r>:
 8004658:	b538      	push	{r3, r4, r5, lr}
 800465a:	4d07      	ldr	r5, [pc, #28]	@ (8004678 <_write_r+0x20>)
 800465c:	4604      	mov	r4, r0
 800465e:	4608      	mov	r0, r1
 8004660:	4611      	mov	r1, r2
 8004662:	2200      	movs	r2, #0
 8004664:	602a      	str	r2, [r5, #0]
 8004666:	461a      	mov	r2, r3
 8004668:	f7fe fb72 	bl	8002d50 <_write>
 800466c:	1c43      	adds	r3, r0, #1
 800466e:	d102      	bne.n	8004676 <_write_r+0x1e>
 8004670:	682b      	ldr	r3, [r5, #0]
 8004672:	b103      	cbz	r3, 8004676 <_write_r+0x1e>
 8004674:	6023      	str	r3, [r4, #0]
 8004676:	bd38      	pop	{r3, r4, r5, pc}
 8004678:	20012f30 	.word	0x20012f30

0800467c <__errno>:
 800467c:	4b01      	ldr	r3, [pc, #4]	@ (8004684 <__errno+0x8>)
 800467e:	6818      	ldr	r0, [r3, #0]
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	20000020 	.word	0x20000020

08004688 <__libc_init_array>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	4d0d      	ldr	r5, [pc, #52]	@ (80046c0 <__libc_init_array+0x38>)
 800468c:	4c0d      	ldr	r4, [pc, #52]	@ (80046c4 <__libc_init_array+0x3c>)
 800468e:	1b64      	subs	r4, r4, r5
 8004690:	10a4      	asrs	r4, r4, #2
 8004692:	2600      	movs	r6, #0
 8004694:	42a6      	cmp	r6, r4
 8004696:	d109      	bne.n	80046ac <__libc_init_array+0x24>
 8004698:	4d0b      	ldr	r5, [pc, #44]	@ (80046c8 <__libc_init_array+0x40>)
 800469a:	4c0c      	ldr	r4, [pc, #48]	@ (80046cc <__libc_init_array+0x44>)
 800469c:	f000 fe50 	bl	8005340 <_init>
 80046a0:	1b64      	subs	r4, r4, r5
 80046a2:	10a4      	asrs	r4, r4, #2
 80046a4:	2600      	movs	r6, #0
 80046a6:	42a6      	cmp	r6, r4
 80046a8:	d105      	bne.n	80046b6 <__libc_init_array+0x2e>
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
 80046ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80046b0:	4798      	blx	r3
 80046b2:	3601      	adds	r6, #1
 80046b4:	e7ee      	b.n	8004694 <__libc_init_array+0xc>
 80046b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ba:	4798      	blx	r3
 80046bc:	3601      	adds	r6, #1
 80046be:	e7f2      	b.n	80046a6 <__libc_init_array+0x1e>
 80046c0:	08005480 	.word	0x08005480
 80046c4:	08005480 	.word	0x08005480
 80046c8:	08005480 	.word	0x08005480
 80046cc:	08005484 	.word	0x08005484

080046d0 <__retarget_lock_init_recursive>:
 80046d0:	4770      	bx	lr

080046d2 <__retarget_lock_acquire_recursive>:
 80046d2:	4770      	bx	lr

080046d4 <__retarget_lock_release_recursive>:
 80046d4:	4770      	bx	lr

080046d6 <memcpy>:
 80046d6:	440a      	add	r2, r1
 80046d8:	4291      	cmp	r1, r2
 80046da:	f100 33ff 	add.w	r3, r0, #4294967295
 80046de:	d100      	bne.n	80046e2 <memcpy+0xc>
 80046e0:	4770      	bx	lr
 80046e2:	b510      	push	{r4, lr}
 80046e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046ec:	4291      	cmp	r1, r2
 80046ee:	d1f9      	bne.n	80046e4 <memcpy+0xe>
 80046f0:	bd10      	pop	{r4, pc}
	...

080046f4 <__assert_func>:
 80046f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80046f6:	4614      	mov	r4, r2
 80046f8:	461a      	mov	r2, r3
 80046fa:	4b09      	ldr	r3, [pc, #36]	@ (8004720 <__assert_func+0x2c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4605      	mov	r5, r0
 8004700:	68d8      	ldr	r0, [r3, #12]
 8004702:	b954      	cbnz	r4, 800471a <__assert_func+0x26>
 8004704:	4b07      	ldr	r3, [pc, #28]	@ (8004724 <__assert_func+0x30>)
 8004706:	461c      	mov	r4, r3
 8004708:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800470c:	9100      	str	r1, [sp, #0]
 800470e:	462b      	mov	r3, r5
 8004710:	4905      	ldr	r1, [pc, #20]	@ (8004728 <__assert_func+0x34>)
 8004712:	f000 f9b9 	bl	8004a88 <fiprintf>
 8004716:	f000 f9d9 	bl	8004acc <abort>
 800471a:	4b04      	ldr	r3, [pc, #16]	@ (800472c <__assert_func+0x38>)
 800471c:	e7f4      	b.n	8004708 <__assert_func+0x14>
 800471e:	bf00      	nop
 8004720:	20000020 	.word	0x20000020
 8004724:	08005442 	.word	0x08005442
 8004728:	08005414 	.word	0x08005414
 800472c:	08005407 	.word	0x08005407

08004730 <_free_r>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	4605      	mov	r5, r0
 8004734:	2900      	cmp	r1, #0
 8004736:	d041      	beq.n	80047bc <_free_r+0x8c>
 8004738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800473c:	1f0c      	subs	r4, r1, #4
 800473e:	2b00      	cmp	r3, #0
 8004740:	bfb8      	it	lt
 8004742:	18e4      	addlt	r4, r4, r3
 8004744:	f000 f8e8 	bl	8004918 <__malloc_lock>
 8004748:	4a1d      	ldr	r2, [pc, #116]	@ (80047c0 <_free_r+0x90>)
 800474a:	6813      	ldr	r3, [r2, #0]
 800474c:	b933      	cbnz	r3, 800475c <_free_r+0x2c>
 800474e:	6063      	str	r3, [r4, #4]
 8004750:	6014      	str	r4, [r2, #0]
 8004752:	4628      	mov	r0, r5
 8004754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004758:	f000 b8e4 	b.w	8004924 <__malloc_unlock>
 800475c:	42a3      	cmp	r3, r4
 800475e:	d908      	bls.n	8004772 <_free_r+0x42>
 8004760:	6820      	ldr	r0, [r4, #0]
 8004762:	1821      	adds	r1, r4, r0
 8004764:	428b      	cmp	r3, r1
 8004766:	bf01      	itttt	eq
 8004768:	6819      	ldreq	r1, [r3, #0]
 800476a:	685b      	ldreq	r3, [r3, #4]
 800476c:	1809      	addeq	r1, r1, r0
 800476e:	6021      	streq	r1, [r4, #0]
 8004770:	e7ed      	b.n	800474e <_free_r+0x1e>
 8004772:	461a      	mov	r2, r3
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	b10b      	cbz	r3, 800477c <_free_r+0x4c>
 8004778:	42a3      	cmp	r3, r4
 800477a:	d9fa      	bls.n	8004772 <_free_r+0x42>
 800477c:	6811      	ldr	r1, [r2, #0]
 800477e:	1850      	adds	r0, r2, r1
 8004780:	42a0      	cmp	r0, r4
 8004782:	d10b      	bne.n	800479c <_free_r+0x6c>
 8004784:	6820      	ldr	r0, [r4, #0]
 8004786:	4401      	add	r1, r0
 8004788:	1850      	adds	r0, r2, r1
 800478a:	4283      	cmp	r3, r0
 800478c:	6011      	str	r1, [r2, #0]
 800478e:	d1e0      	bne.n	8004752 <_free_r+0x22>
 8004790:	6818      	ldr	r0, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	6053      	str	r3, [r2, #4]
 8004796:	4408      	add	r0, r1
 8004798:	6010      	str	r0, [r2, #0]
 800479a:	e7da      	b.n	8004752 <_free_r+0x22>
 800479c:	d902      	bls.n	80047a4 <_free_r+0x74>
 800479e:	230c      	movs	r3, #12
 80047a0:	602b      	str	r3, [r5, #0]
 80047a2:	e7d6      	b.n	8004752 <_free_r+0x22>
 80047a4:	6820      	ldr	r0, [r4, #0]
 80047a6:	1821      	adds	r1, r4, r0
 80047a8:	428b      	cmp	r3, r1
 80047aa:	bf04      	itt	eq
 80047ac:	6819      	ldreq	r1, [r3, #0]
 80047ae:	685b      	ldreq	r3, [r3, #4]
 80047b0:	6063      	str	r3, [r4, #4]
 80047b2:	bf04      	itt	eq
 80047b4:	1809      	addeq	r1, r1, r0
 80047b6:	6021      	streq	r1, [r4, #0]
 80047b8:	6054      	str	r4, [r2, #4]
 80047ba:	e7ca      	b.n	8004752 <_free_r+0x22>
 80047bc:	bd38      	pop	{r3, r4, r5, pc}
 80047be:	bf00      	nop
 80047c0:	20012f3c 	.word	0x20012f3c

080047c4 <malloc>:
 80047c4:	4b02      	ldr	r3, [pc, #8]	@ (80047d0 <malloc+0xc>)
 80047c6:	4601      	mov	r1, r0
 80047c8:	6818      	ldr	r0, [r3, #0]
 80047ca:	f000 b825 	b.w	8004818 <_malloc_r>
 80047ce:	bf00      	nop
 80047d0:	20000020 	.word	0x20000020

080047d4 <sbrk_aligned>:
 80047d4:	b570      	push	{r4, r5, r6, lr}
 80047d6:	4e0f      	ldr	r6, [pc, #60]	@ (8004814 <sbrk_aligned+0x40>)
 80047d8:	460c      	mov	r4, r1
 80047da:	6831      	ldr	r1, [r6, #0]
 80047dc:	4605      	mov	r5, r0
 80047de:	b911      	cbnz	r1, 80047e6 <sbrk_aligned+0x12>
 80047e0:	f000 f964 	bl	8004aac <_sbrk_r>
 80047e4:	6030      	str	r0, [r6, #0]
 80047e6:	4621      	mov	r1, r4
 80047e8:	4628      	mov	r0, r5
 80047ea:	f000 f95f 	bl	8004aac <_sbrk_r>
 80047ee:	1c43      	adds	r3, r0, #1
 80047f0:	d103      	bne.n	80047fa <sbrk_aligned+0x26>
 80047f2:	f04f 34ff 	mov.w	r4, #4294967295
 80047f6:	4620      	mov	r0, r4
 80047f8:	bd70      	pop	{r4, r5, r6, pc}
 80047fa:	1cc4      	adds	r4, r0, #3
 80047fc:	f024 0403 	bic.w	r4, r4, #3
 8004800:	42a0      	cmp	r0, r4
 8004802:	d0f8      	beq.n	80047f6 <sbrk_aligned+0x22>
 8004804:	1a21      	subs	r1, r4, r0
 8004806:	4628      	mov	r0, r5
 8004808:	f000 f950 	bl	8004aac <_sbrk_r>
 800480c:	3001      	adds	r0, #1
 800480e:	d1f2      	bne.n	80047f6 <sbrk_aligned+0x22>
 8004810:	e7ef      	b.n	80047f2 <sbrk_aligned+0x1e>
 8004812:	bf00      	nop
 8004814:	20012f38 	.word	0x20012f38

08004818 <_malloc_r>:
 8004818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800481c:	1ccd      	adds	r5, r1, #3
 800481e:	f025 0503 	bic.w	r5, r5, #3
 8004822:	3508      	adds	r5, #8
 8004824:	2d0c      	cmp	r5, #12
 8004826:	bf38      	it	cc
 8004828:	250c      	movcc	r5, #12
 800482a:	2d00      	cmp	r5, #0
 800482c:	4606      	mov	r6, r0
 800482e:	db01      	blt.n	8004834 <_malloc_r+0x1c>
 8004830:	42a9      	cmp	r1, r5
 8004832:	d904      	bls.n	800483e <_malloc_r+0x26>
 8004834:	230c      	movs	r3, #12
 8004836:	6033      	str	r3, [r6, #0]
 8004838:	2000      	movs	r0, #0
 800483a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800483e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004914 <_malloc_r+0xfc>
 8004842:	f000 f869 	bl	8004918 <__malloc_lock>
 8004846:	f8d8 3000 	ldr.w	r3, [r8]
 800484a:	461c      	mov	r4, r3
 800484c:	bb44      	cbnz	r4, 80048a0 <_malloc_r+0x88>
 800484e:	4629      	mov	r1, r5
 8004850:	4630      	mov	r0, r6
 8004852:	f7ff ffbf 	bl	80047d4 <sbrk_aligned>
 8004856:	1c43      	adds	r3, r0, #1
 8004858:	4604      	mov	r4, r0
 800485a:	d158      	bne.n	800490e <_malloc_r+0xf6>
 800485c:	f8d8 4000 	ldr.w	r4, [r8]
 8004860:	4627      	mov	r7, r4
 8004862:	2f00      	cmp	r7, #0
 8004864:	d143      	bne.n	80048ee <_malloc_r+0xd6>
 8004866:	2c00      	cmp	r4, #0
 8004868:	d04b      	beq.n	8004902 <_malloc_r+0xea>
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	4639      	mov	r1, r7
 800486e:	4630      	mov	r0, r6
 8004870:	eb04 0903 	add.w	r9, r4, r3
 8004874:	f000 f91a 	bl	8004aac <_sbrk_r>
 8004878:	4581      	cmp	r9, r0
 800487a:	d142      	bne.n	8004902 <_malloc_r+0xea>
 800487c:	6821      	ldr	r1, [r4, #0]
 800487e:	1a6d      	subs	r5, r5, r1
 8004880:	4629      	mov	r1, r5
 8004882:	4630      	mov	r0, r6
 8004884:	f7ff ffa6 	bl	80047d4 <sbrk_aligned>
 8004888:	3001      	adds	r0, #1
 800488a:	d03a      	beq.n	8004902 <_malloc_r+0xea>
 800488c:	6823      	ldr	r3, [r4, #0]
 800488e:	442b      	add	r3, r5
 8004890:	6023      	str	r3, [r4, #0]
 8004892:	f8d8 3000 	ldr.w	r3, [r8]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	bb62      	cbnz	r2, 80048f4 <_malloc_r+0xdc>
 800489a:	f8c8 7000 	str.w	r7, [r8]
 800489e:	e00f      	b.n	80048c0 <_malloc_r+0xa8>
 80048a0:	6822      	ldr	r2, [r4, #0]
 80048a2:	1b52      	subs	r2, r2, r5
 80048a4:	d420      	bmi.n	80048e8 <_malloc_r+0xd0>
 80048a6:	2a0b      	cmp	r2, #11
 80048a8:	d917      	bls.n	80048da <_malloc_r+0xc2>
 80048aa:	1961      	adds	r1, r4, r5
 80048ac:	42a3      	cmp	r3, r4
 80048ae:	6025      	str	r5, [r4, #0]
 80048b0:	bf18      	it	ne
 80048b2:	6059      	strne	r1, [r3, #4]
 80048b4:	6863      	ldr	r3, [r4, #4]
 80048b6:	bf08      	it	eq
 80048b8:	f8c8 1000 	streq.w	r1, [r8]
 80048bc:	5162      	str	r2, [r4, r5]
 80048be:	604b      	str	r3, [r1, #4]
 80048c0:	4630      	mov	r0, r6
 80048c2:	f000 f82f 	bl	8004924 <__malloc_unlock>
 80048c6:	f104 000b 	add.w	r0, r4, #11
 80048ca:	1d23      	adds	r3, r4, #4
 80048cc:	f020 0007 	bic.w	r0, r0, #7
 80048d0:	1ac2      	subs	r2, r0, r3
 80048d2:	bf1c      	itt	ne
 80048d4:	1a1b      	subne	r3, r3, r0
 80048d6:	50a3      	strne	r3, [r4, r2]
 80048d8:	e7af      	b.n	800483a <_malloc_r+0x22>
 80048da:	6862      	ldr	r2, [r4, #4]
 80048dc:	42a3      	cmp	r3, r4
 80048de:	bf0c      	ite	eq
 80048e0:	f8c8 2000 	streq.w	r2, [r8]
 80048e4:	605a      	strne	r2, [r3, #4]
 80048e6:	e7eb      	b.n	80048c0 <_malloc_r+0xa8>
 80048e8:	4623      	mov	r3, r4
 80048ea:	6864      	ldr	r4, [r4, #4]
 80048ec:	e7ae      	b.n	800484c <_malloc_r+0x34>
 80048ee:	463c      	mov	r4, r7
 80048f0:	687f      	ldr	r7, [r7, #4]
 80048f2:	e7b6      	b.n	8004862 <_malloc_r+0x4a>
 80048f4:	461a      	mov	r2, r3
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	42a3      	cmp	r3, r4
 80048fa:	d1fb      	bne.n	80048f4 <_malloc_r+0xdc>
 80048fc:	2300      	movs	r3, #0
 80048fe:	6053      	str	r3, [r2, #4]
 8004900:	e7de      	b.n	80048c0 <_malloc_r+0xa8>
 8004902:	230c      	movs	r3, #12
 8004904:	6033      	str	r3, [r6, #0]
 8004906:	4630      	mov	r0, r6
 8004908:	f000 f80c 	bl	8004924 <__malloc_unlock>
 800490c:	e794      	b.n	8004838 <_malloc_r+0x20>
 800490e:	6005      	str	r5, [r0, #0]
 8004910:	e7d6      	b.n	80048c0 <_malloc_r+0xa8>
 8004912:	bf00      	nop
 8004914:	20012f3c 	.word	0x20012f3c

08004918 <__malloc_lock>:
 8004918:	4801      	ldr	r0, [pc, #4]	@ (8004920 <__malloc_lock+0x8>)
 800491a:	f7ff beda 	b.w	80046d2 <__retarget_lock_acquire_recursive>
 800491e:	bf00      	nop
 8004920:	20012f34 	.word	0x20012f34

08004924 <__malloc_unlock>:
 8004924:	4801      	ldr	r0, [pc, #4]	@ (800492c <__malloc_unlock+0x8>)
 8004926:	f7ff bed5 	b.w	80046d4 <__retarget_lock_release_recursive>
 800492a:	bf00      	nop
 800492c:	20012f34 	.word	0x20012f34

08004930 <__sflush_r>:
 8004930:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004938:	0716      	lsls	r6, r2, #28
 800493a:	4605      	mov	r5, r0
 800493c:	460c      	mov	r4, r1
 800493e:	d454      	bmi.n	80049ea <__sflush_r+0xba>
 8004940:	684b      	ldr	r3, [r1, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	dc02      	bgt.n	800494c <__sflush_r+0x1c>
 8004946:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	dd48      	ble.n	80049de <__sflush_r+0xae>
 800494c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800494e:	2e00      	cmp	r6, #0
 8004950:	d045      	beq.n	80049de <__sflush_r+0xae>
 8004952:	2300      	movs	r3, #0
 8004954:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004958:	682f      	ldr	r7, [r5, #0]
 800495a:	6a21      	ldr	r1, [r4, #32]
 800495c:	602b      	str	r3, [r5, #0]
 800495e:	d030      	beq.n	80049c2 <__sflush_r+0x92>
 8004960:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004962:	89a3      	ldrh	r3, [r4, #12]
 8004964:	0759      	lsls	r1, r3, #29
 8004966:	d505      	bpl.n	8004974 <__sflush_r+0x44>
 8004968:	6863      	ldr	r3, [r4, #4]
 800496a:	1ad2      	subs	r2, r2, r3
 800496c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800496e:	b10b      	cbz	r3, 8004974 <__sflush_r+0x44>
 8004970:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004972:	1ad2      	subs	r2, r2, r3
 8004974:	2300      	movs	r3, #0
 8004976:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004978:	6a21      	ldr	r1, [r4, #32]
 800497a:	4628      	mov	r0, r5
 800497c:	47b0      	blx	r6
 800497e:	1c43      	adds	r3, r0, #1
 8004980:	89a3      	ldrh	r3, [r4, #12]
 8004982:	d106      	bne.n	8004992 <__sflush_r+0x62>
 8004984:	6829      	ldr	r1, [r5, #0]
 8004986:	291d      	cmp	r1, #29
 8004988:	d82b      	bhi.n	80049e2 <__sflush_r+0xb2>
 800498a:	4a2a      	ldr	r2, [pc, #168]	@ (8004a34 <__sflush_r+0x104>)
 800498c:	410a      	asrs	r2, r1
 800498e:	07d6      	lsls	r6, r2, #31
 8004990:	d427      	bmi.n	80049e2 <__sflush_r+0xb2>
 8004992:	2200      	movs	r2, #0
 8004994:	6062      	str	r2, [r4, #4]
 8004996:	04d9      	lsls	r1, r3, #19
 8004998:	6922      	ldr	r2, [r4, #16]
 800499a:	6022      	str	r2, [r4, #0]
 800499c:	d504      	bpl.n	80049a8 <__sflush_r+0x78>
 800499e:	1c42      	adds	r2, r0, #1
 80049a0:	d101      	bne.n	80049a6 <__sflush_r+0x76>
 80049a2:	682b      	ldr	r3, [r5, #0]
 80049a4:	b903      	cbnz	r3, 80049a8 <__sflush_r+0x78>
 80049a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80049a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049aa:	602f      	str	r7, [r5, #0]
 80049ac:	b1b9      	cbz	r1, 80049de <__sflush_r+0xae>
 80049ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049b2:	4299      	cmp	r1, r3
 80049b4:	d002      	beq.n	80049bc <__sflush_r+0x8c>
 80049b6:	4628      	mov	r0, r5
 80049b8:	f7ff feba 	bl	8004730 <_free_r>
 80049bc:	2300      	movs	r3, #0
 80049be:	6363      	str	r3, [r4, #52]	@ 0x34
 80049c0:	e00d      	b.n	80049de <__sflush_r+0xae>
 80049c2:	2301      	movs	r3, #1
 80049c4:	4628      	mov	r0, r5
 80049c6:	47b0      	blx	r6
 80049c8:	4602      	mov	r2, r0
 80049ca:	1c50      	adds	r0, r2, #1
 80049cc:	d1c9      	bne.n	8004962 <__sflush_r+0x32>
 80049ce:	682b      	ldr	r3, [r5, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0c6      	beq.n	8004962 <__sflush_r+0x32>
 80049d4:	2b1d      	cmp	r3, #29
 80049d6:	d001      	beq.n	80049dc <__sflush_r+0xac>
 80049d8:	2b16      	cmp	r3, #22
 80049da:	d11e      	bne.n	8004a1a <__sflush_r+0xea>
 80049dc:	602f      	str	r7, [r5, #0]
 80049de:	2000      	movs	r0, #0
 80049e0:	e022      	b.n	8004a28 <__sflush_r+0xf8>
 80049e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049e6:	b21b      	sxth	r3, r3
 80049e8:	e01b      	b.n	8004a22 <__sflush_r+0xf2>
 80049ea:	690f      	ldr	r7, [r1, #16]
 80049ec:	2f00      	cmp	r7, #0
 80049ee:	d0f6      	beq.n	80049de <__sflush_r+0xae>
 80049f0:	0793      	lsls	r3, r2, #30
 80049f2:	680e      	ldr	r6, [r1, #0]
 80049f4:	bf08      	it	eq
 80049f6:	694b      	ldreq	r3, [r1, #20]
 80049f8:	600f      	str	r7, [r1, #0]
 80049fa:	bf18      	it	ne
 80049fc:	2300      	movne	r3, #0
 80049fe:	eba6 0807 	sub.w	r8, r6, r7
 8004a02:	608b      	str	r3, [r1, #8]
 8004a04:	f1b8 0f00 	cmp.w	r8, #0
 8004a08:	dde9      	ble.n	80049de <__sflush_r+0xae>
 8004a0a:	6a21      	ldr	r1, [r4, #32]
 8004a0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004a0e:	4643      	mov	r3, r8
 8004a10:	463a      	mov	r2, r7
 8004a12:	4628      	mov	r0, r5
 8004a14:	47b0      	blx	r6
 8004a16:	2800      	cmp	r0, #0
 8004a18:	dc08      	bgt.n	8004a2c <__sflush_r+0xfc>
 8004a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a22:	81a3      	strh	r3, [r4, #12]
 8004a24:	f04f 30ff 	mov.w	r0, #4294967295
 8004a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a2c:	4407      	add	r7, r0
 8004a2e:	eba8 0800 	sub.w	r8, r8, r0
 8004a32:	e7e7      	b.n	8004a04 <__sflush_r+0xd4>
 8004a34:	dfbffffe 	.word	0xdfbffffe

08004a38 <_fflush_r>:
 8004a38:	b538      	push	{r3, r4, r5, lr}
 8004a3a:	690b      	ldr	r3, [r1, #16]
 8004a3c:	4605      	mov	r5, r0
 8004a3e:	460c      	mov	r4, r1
 8004a40:	b913      	cbnz	r3, 8004a48 <_fflush_r+0x10>
 8004a42:	2500      	movs	r5, #0
 8004a44:	4628      	mov	r0, r5
 8004a46:	bd38      	pop	{r3, r4, r5, pc}
 8004a48:	b118      	cbz	r0, 8004a52 <_fflush_r+0x1a>
 8004a4a:	6a03      	ldr	r3, [r0, #32]
 8004a4c:	b90b      	cbnz	r3, 8004a52 <_fflush_r+0x1a>
 8004a4e:	f7ff fd1f 	bl	8004490 <__sinit>
 8004a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0f3      	beq.n	8004a42 <_fflush_r+0xa>
 8004a5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a5c:	07d0      	lsls	r0, r2, #31
 8004a5e:	d404      	bmi.n	8004a6a <_fflush_r+0x32>
 8004a60:	0599      	lsls	r1, r3, #22
 8004a62:	d402      	bmi.n	8004a6a <_fflush_r+0x32>
 8004a64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a66:	f7ff fe34 	bl	80046d2 <__retarget_lock_acquire_recursive>
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	4621      	mov	r1, r4
 8004a6e:	f7ff ff5f 	bl	8004930 <__sflush_r>
 8004a72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a74:	07da      	lsls	r2, r3, #31
 8004a76:	4605      	mov	r5, r0
 8004a78:	d4e4      	bmi.n	8004a44 <_fflush_r+0xc>
 8004a7a:	89a3      	ldrh	r3, [r4, #12]
 8004a7c:	059b      	lsls	r3, r3, #22
 8004a7e:	d4e1      	bmi.n	8004a44 <_fflush_r+0xc>
 8004a80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a82:	f7ff fe27 	bl	80046d4 <__retarget_lock_release_recursive>
 8004a86:	e7dd      	b.n	8004a44 <_fflush_r+0xc>

08004a88 <fiprintf>:
 8004a88:	b40e      	push	{r1, r2, r3}
 8004a8a:	b503      	push	{r0, r1, lr}
 8004a8c:	4601      	mov	r1, r0
 8004a8e:	ab03      	add	r3, sp, #12
 8004a90:	4805      	ldr	r0, [pc, #20]	@ (8004aa8 <fiprintf+0x20>)
 8004a92:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a96:	6800      	ldr	r0, [r0, #0]
 8004a98:	9301      	str	r3, [sp, #4]
 8004a9a:	f000 f847 	bl	8004b2c <_vfiprintf_r>
 8004a9e:	b002      	add	sp, #8
 8004aa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004aa4:	b003      	add	sp, #12
 8004aa6:	4770      	bx	lr
 8004aa8:	20000020 	.word	0x20000020

08004aac <_sbrk_r>:
 8004aac:	b538      	push	{r3, r4, r5, lr}
 8004aae:	4d06      	ldr	r5, [pc, #24]	@ (8004ac8 <_sbrk_r+0x1c>)
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	4604      	mov	r4, r0
 8004ab4:	4608      	mov	r0, r1
 8004ab6:	602b      	str	r3, [r5, #0]
 8004ab8:	f7fe f99a 	bl	8002df0 <_sbrk>
 8004abc:	1c43      	adds	r3, r0, #1
 8004abe:	d102      	bne.n	8004ac6 <_sbrk_r+0x1a>
 8004ac0:	682b      	ldr	r3, [r5, #0]
 8004ac2:	b103      	cbz	r3, 8004ac6 <_sbrk_r+0x1a>
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	bd38      	pop	{r3, r4, r5, pc}
 8004ac8:	20012f30 	.word	0x20012f30

08004acc <abort>:
 8004acc:	b508      	push	{r3, lr}
 8004ace:	2006      	movs	r0, #6
 8004ad0:	f000 fb8e 	bl	80051f0 <raise>
 8004ad4:	2001      	movs	r0, #1
 8004ad6:	f7fe f913 	bl	8002d00 <_exit>

08004ada <__sfputc_r>:
 8004ada:	6893      	ldr	r3, [r2, #8]
 8004adc:	3b01      	subs	r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	b410      	push	{r4}
 8004ae2:	6093      	str	r3, [r2, #8]
 8004ae4:	da08      	bge.n	8004af8 <__sfputc_r+0x1e>
 8004ae6:	6994      	ldr	r4, [r2, #24]
 8004ae8:	42a3      	cmp	r3, r4
 8004aea:	db01      	blt.n	8004af0 <__sfputc_r+0x16>
 8004aec:	290a      	cmp	r1, #10
 8004aee:	d103      	bne.n	8004af8 <__sfputc_r+0x1e>
 8004af0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004af4:	f000 bac0 	b.w	8005078 <__swbuf_r>
 8004af8:	6813      	ldr	r3, [r2, #0]
 8004afa:	1c58      	adds	r0, r3, #1
 8004afc:	6010      	str	r0, [r2, #0]
 8004afe:	7019      	strb	r1, [r3, #0]
 8004b00:	4608      	mov	r0, r1
 8004b02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <__sfputs_r>:
 8004b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0a:	4606      	mov	r6, r0
 8004b0c:	460f      	mov	r7, r1
 8004b0e:	4614      	mov	r4, r2
 8004b10:	18d5      	adds	r5, r2, r3
 8004b12:	42ac      	cmp	r4, r5
 8004b14:	d101      	bne.n	8004b1a <__sfputs_r+0x12>
 8004b16:	2000      	movs	r0, #0
 8004b18:	e007      	b.n	8004b2a <__sfputs_r+0x22>
 8004b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b1e:	463a      	mov	r2, r7
 8004b20:	4630      	mov	r0, r6
 8004b22:	f7ff ffda 	bl	8004ada <__sfputc_r>
 8004b26:	1c43      	adds	r3, r0, #1
 8004b28:	d1f3      	bne.n	8004b12 <__sfputs_r+0xa>
 8004b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b2c <_vfiprintf_r>:
 8004b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b30:	460d      	mov	r5, r1
 8004b32:	b09d      	sub	sp, #116	@ 0x74
 8004b34:	4614      	mov	r4, r2
 8004b36:	4698      	mov	r8, r3
 8004b38:	4606      	mov	r6, r0
 8004b3a:	b118      	cbz	r0, 8004b44 <_vfiprintf_r+0x18>
 8004b3c:	6a03      	ldr	r3, [r0, #32]
 8004b3e:	b90b      	cbnz	r3, 8004b44 <_vfiprintf_r+0x18>
 8004b40:	f7ff fca6 	bl	8004490 <__sinit>
 8004b44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b46:	07d9      	lsls	r1, r3, #31
 8004b48:	d405      	bmi.n	8004b56 <_vfiprintf_r+0x2a>
 8004b4a:	89ab      	ldrh	r3, [r5, #12]
 8004b4c:	059a      	lsls	r2, r3, #22
 8004b4e:	d402      	bmi.n	8004b56 <_vfiprintf_r+0x2a>
 8004b50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b52:	f7ff fdbe 	bl	80046d2 <__retarget_lock_acquire_recursive>
 8004b56:	89ab      	ldrh	r3, [r5, #12]
 8004b58:	071b      	lsls	r3, r3, #28
 8004b5a:	d501      	bpl.n	8004b60 <_vfiprintf_r+0x34>
 8004b5c:	692b      	ldr	r3, [r5, #16]
 8004b5e:	b99b      	cbnz	r3, 8004b88 <_vfiprintf_r+0x5c>
 8004b60:	4629      	mov	r1, r5
 8004b62:	4630      	mov	r0, r6
 8004b64:	f000 fac6 	bl	80050f4 <__swsetup_r>
 8004b68:	b170      	cbz	r0, 8004b88 <_vfiprintf_r+0x5c>
 8004b6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b6c:	07dc      	lsls	r4, r3, #31
 8004b6e:	d504      	bpl.n	8004b7a <_vfiprintf_r+0x4e>
 8004b70:	f04f 30ff 	mov.w	r0, #4294967295
 8004b74:	b01d      	add	sp, #116	@ 0x74
 8004b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b7a:	89ab      	ldrh	r3, [r5, #12]
 8004b7c:	0598      	lsls	r0, r3, #22
 8004b7e:	d4f7      	bmi.n	8004b70 <_vfiprintf_r+0x44>
 8004b80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b82:	f7ff fda7 	bl	80046d4 <__retarget_lock_release_recursive>
 8004b86:	e7f3      	b.n	8004b70 <_vfiprintf_r+0x44>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b8c:	2320      	movs	r3, #32
 8004b8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b92:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b96:	2330      	movs	r3, #48	@ 0x30
 8004b98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004d48 <_vfiprintf_r+0x21c>
 8004b9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ba0:	f04f 0901 	mov.w	r9, #1
 8004ba4:	4623      	mov	r3, r4
 8004ba6:	469a      	mov	sl, r3
 8004ba8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bac:	b10a      	cbz	r2, 8004bb2 <_vfiprintf_r+0x86>
 8004bae:	2a25      	cmp	r2, #37	@ 0x25
 8004bb0:	d1f9      	bne.n	8004ba6 <_vfiprintf_r+0x7a>
 8004bb2:	ebba 0b04 	subs.w	fp, sl, r4
 8004bb6:	d00b      	beq.n	8004bd0 <_vfiprintf_r+0xa4>
 8004bb8:	465b      	mov	r3, fp
 8004bba:	4622      	mov	r2, r4
 8004bbc:	4629      	mov	r1, r5
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	f7ff ffa2 	bl	8004b08 <__sfputs_r>
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	f000 80a7 	beq.w	8004d18 <_vfiprintf_r+0x1ec>
 8004bca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bcc:	445a      	add	r2, fp
 8004bce:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bd0:	f89a 3000 	ldrb.w	r3, [sl]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 809f 	beq.w	8004d18 <_vfiprintf_r+0x1ec>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8004be0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004be4:	f10a 0a01 	add.w	sl, sl, #1
 8004be8:	9304      	str	r3, [sp, #16]
 8004bea:	9307      	str	r3, [sp, #28]
 8004bec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004bf0:	931a      	str	r3, [sp, #104]	@ 0x68
 8004bf2:	4654      	mov	r4, sl
 8004bf4:	2205      	movs	r2, #5
 8004bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bfa:	4853      	ldr	r0, [pc, #332]	@ (8004d48 <_vfiprintf_r+0x21c>)
 8004bfc:	f7fb fae8 	bl	80001d0 <memchr>
 8004c00:	9a04      	ldr	r2, [sp, #16]
 8004c02:	b9d8      	cbnz	r0, 8004c3c <_vfiprintf_r+0x110>
 8004c04:	06d1      	lsls	r1, r2, #27
 8004c06:	bf44      	itt	mi
 8004c08:	2320      	movmi	r3, #32
 8004c0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c0e:	0713      	lsls	r3, r2, #28
 8004c10:	bf44      	itt	mi
 8004c12:	232b      	movmi	r3, #43	@ 0x2b
 8004c14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c18:	f89a 3000 	ldrb.w	r3, [sl]
 8004c1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c1e:	d015      	beq.n	8004c4c <_vfiprintf_r+0x120>
 8004c20:	9a07      	ldr	r2, [sp, #28]
 8004c22:	4654      	mov	r4, sl
 8004c24:	2000      	movs	r0, #0
 8004c26:	f04f 0c0a 	mov.w	ip, #10
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c30:	3b30      	subs	r3, #48	@ 0x30
 8004c32:	2b09      	cmp	r3, #9
 8004c34:	d94b      	bls.n	8004cce <_vfiprintf_r+0x1a2>
 8004c36:	b1b0      	cbz	r0, 8004c66 <_vfiprintf_r+0x13a>
 8004c38:	9207      	str	r2, [sp, #28]
 8004c3a:	e014      	b.n	8004c66 <_vfiprintf_r+0x13a>
 8004c3c:	eba0 0308 	sub.w	r3, r0, r8
 8004c40:	fa09 f303 	lsl.w	r3, r9, r3
 8004c44:	4313      	orrs	r3, r2
 8004c46:	9304      	str	r3, [sp, #16]
 8004c48:	46a2      	mov	sl, r4
 8004c4a:	e7d2      	b.n	8004bf2 <_vfiprintf_r+0xc6>
 8004c4c:	9b03      	ldr	r3, [sp, #12]
 8004c4e:	1d19      	adds	r1, r3, #4
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	9103      	str	r1, [sp, #12]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	bfbb      	ittet	lt
 8004c58:	425b      	neglt	r3, r3
 8004c5a:	f042 0202 	orrlt.w	r2, r2, #2
 8004c5e:	9307      	strge	r3, [sp, #28]
 8004c60:	9307      	strlt	r3, [sp, #28]
 8004c62:	bfb8      	it	lt
 8004c64:	9204      	strlt	r2, [sp, #16]
 8004c66:	7823      	ldrb	r3, [r4, #0]
 8004c68:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c6a:	d10a      	bne.n	8004c82 <_vfiprintf_r+0x156>
 8004c6c:	7863      	ldrb	r3, [r4, #1]
 8004c6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c70:	d132      	bne.n	8004cd8 <_vfiprintf_r+0x1ac>
 8004c72:	9b03      	ldr	r3, [sp, #12]
 8004c74:	1d1a      	adds	r2, r3, #4
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	9203      	str	r2, [sp, #12]
 8004c7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c7e:	3402      	adds	r4, #2
 8004c80:	9305      	str	r3, [sp, #20]
 8004c82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004d58 <_vfiprintf_r+0x22c>
 8004c86:	7821      	ldrb	r1, [r4, #0]
 8004c88:	2203      	movs	r2, #3
 8004c8a:	4650      	mov	r0, sl
 8004c8c:	f7fb faa0 	bl	80001d0 <memchr>
 8004c90:	b138      	cbz	r0, 8004ca2 <_vfiprintf_r+0x176>
 8004c92:	9b04      	ldr	r3, [sp, #16]
 8004c94:	eba0 000a 	sub.w	r0, r0, sl
 8004c98:	2240      	movs	r2, #64	@ 0x40
 8004c9a:	4082      	lsls	r2, r0
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	3401      	adds	r4, #1
 8004ca0:	9304      	str	r3, [sp, #16]
 8004ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ca6:	4829      	ldr	r0, [pc, #164]	@ (8004d4c <_vfiprintf_r+0x220>)
 8004ca8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004cac:	2206      	movs	r2, #6
 8004cae:	f7fb fa8f 	bl	80001d0 <memchr>
 8004cb2:	2800      	cmp	r0, #0
 8004cb4:	d03f      	beq.n	8004d36 <_vfiprintf_r+0x20a>
 8004cb6:	4b26      	ldr	r3, [pc, #152]	@ (8004d50 <_vfiprintf_r+0x224>)
 8004cb8:	bb1b      	cbnz	r3, 8004d02 <_vfiprintf_r+0x1d6>
 8004cba:	9b03      	ldr	r3, [sp, #12]
 8004cbc:	3307      	adds	r3, #7
 8004cbe:	f023 0307 	bic.w	r3, r3, #7
 8004cc2:	3308      	adds	r3, #8
 8004cc4:	9303      	str	r3, [sp, #12]
 8004cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cc8:	443b      	add	r3, r7
 8004cca:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ccc:	e76a      	b.n	8004ba4 <_vfiprintf_r+0x78>
 8004cce:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	2001      	movs	r0, #1
 8004cd6:	e7a8      	b.n	8004c2a <_vfiprintf_r+0xfe>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	3401      	adds	r4, #1
 8004cdc:	9305      	str	r3, [sp, #20]
 8004cde:	4619      	mov	r1, r3
 8004ce0:	f04f 0c0a 	mov.w	ip, #10
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cea:	3a30      	subs	r2, #48	@ 0x30
 8004cec:	2a09      	cmp	r2, #9
 8004cee:	d903      	bls.n	8004cf8 <_vfiprintf_r+0x1cc>
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0c6      	beq.n	8004c82 <_vfiprintf_r+0x156>
 8004cf4:	9105      	str	r1, [sp, #20]
 8004cf6:	e7c4      	b.n	8004c82 <_vfiprintf_r+0x156>
 8004cf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cfc:	4604      	mov	r4, r0
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e7f0      	b.n	8004ce4 <_vfiprintf_r+0x1b8>
 8004d02:	ab03      	add	r3, sp, #12
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	462a      	mov	r2, r5
 8004d08:	4b12      	ldr	r3, [pc, #72]	@ (8004d54 <_vfiprintf_r+0x228>)
 8004d0a:	a904      	add	r1, sp, #16
 8004d0c:	4630      	mov	r0, r6
 8004d0e:	f3af 8000 	nop.w
 8004d12:	4607      	mov	r7, r0
 8004d14:	1c78      	adds	r0, r7, #1
 8004d16:	d1d6      	bne.n	8004cc6 <_vfiprintf_r+0x19a>
 8004d18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d1a:	07d9      	lsls	r1, r3, #31
 8004d1c:	d405      	bmi.n	8004d2a <_vfiprintf_r+0x1fe>
 8004d1e:	89ab      	ldrh	r3, [r5, #12]
 8004d20:	059a      	lsls	r2, r3, #22
 8004d22:	d402      	bmi.n	8004d2a <_vfiprintf_r+0x1fe>
 8004d24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d26:	f7ff fcd5 	bl	80046d4 <__retarget_lock_release_recursive>
 8004d2a:	89ab      	ldrh	r3, [r5, #12]
 8004d2c:	065b      	lsls	r3, r3, #25
 8004d2e:	f53f af1f 	bmi.w	8004b70 <_vfiprintf_r+0x44>
 8004d32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d34:	e71e      	b.n	8004b74 <_vfiprintf_r+0x48>
 8004d36:	ab03      	add	r3, sp, #12
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	462a      	mov	r2, r5
 8004d3c:	4b05      	ldr	r3, [pc, #20]	@ (8004d54 <_vfiprintf_r+0x228>)
 8004d3e:	a904      	add	r1, sp, #16
 8004d40:	4630      	mov	r0, r6
 8004d42:	f000 f879 	bl	8004e38 <_printf_i>
 8004d46:	e7e4      	b.n	8004d12 <_vfiprintf_r+0x1e6>
 8004d48:	08005443 	.word	0x08005443
 8004d4c:	0800544d 	.word	0x0800544d
 8004d50:	00000000 	.word	0x00000000
 8004d54:	08004b09 	.word	0x08004b09
 8004d58:	08005449 	.word	0x08005449

08004d5c <_printf_common>:
 8004d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d60:	4616      	mov	r6, r2
 8004d62:	4698      	mov	r8, r3
 8004d64:	688a      	ldr	r2, [r1, #8]
 8004d66:	690b      	ldr	r3, [r1, #16]
 8004d68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	bfb8      	it	lt
 8004d70:	4613      	movlt	r3, r2
 8004d72:	6033      	str	r3, [r6, #0]
 8004d74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d78:	4607      	mov	r7, r0
 8004d7a:	460c      	mov	r4, r1
 8004d7c:	b10a      	cbz	r2, 8004d82 <_printf_common+0x26>
 8004d7e:	3301      	adds	r3, #1
 8004d80:	6033      	str	r3, [r6, #0]
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	0699      	lsls	r1, r3, #26
 8004d86:	bf42      	ittt	mi
 8004d88:	6833      	ldrmi	r3, [r6, #0]
 8004d8a:	3302      	addmi	r3, #2
 8004d8c:	6033      	strmi	r3, [r6, #0]
 8004d8e:	6825      	ldr	r5, [r4, #0]
 8004d90:	f015 0506 	ands.w	r5, r5, #6
 8004d94:	d106      	bne.n	8004da4 <_printf_common+0x48>
 8004d96:	f104 0a19 	add.w	sl, r4, #25
 8004d9a:	68e3      	ldr	r3, [r4, #12]
 8004d9c:	6832      	ldr	r2, [r6, #0]
 8004d9e:	1a9b      	subs	r3, r3, r2
 8004da0:	42ab      	cmp	r3, r5
 8004da2:	dc26      	bgt.n	8004df2 <_printf_common+0x96>
 8004da4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004da8:	6822      	ldr	r2, [r4, #0]
 8004daa:	3b00      	subs	r3, #0
 8004dac:	bf18      	it	ne
 8004dae:	2301      	movne	r3, #1
 8004db0:	0692      	lsls	r2, r2, #26
 8004db2:	d42b      	bmi.n	8004e0c <_printf_common+0xb0>
 8004db4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004db8:	4641      	mov	r1, r8
 8004dba:	4638      	mov	r0, r7
 8004dbc:	47c8      	blx	r9
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	d01e      	beq.n	8004e00 <_printf_common+0xa4>
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	6922      	ldr	r2, [r4, #16]
 8004dc6:	f003 0306 	and.w	r3, r3, #6
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	bf02      	ittt	eq
 8004dce:	68e5      	ldreq	r5, [r4, #12]
 8004dd0:	6833      	ldreq	r3, [r6, #0]
 8004dd2:	1aed      	subeq	r5, r5, r3
 8004dd4:	68a3      	ldr	r3, [r4, #8]
 8004dd6:	bf0c      	ite	eq
 8004dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ddc:	2500      	movne	r5, #0
 8004dde:	4293      	cmp	r3, r2
 8004de0:	bfc4      	itt	gt
 8004de2:	1a9b      	subgt	r3, r3, r2
 8004de4:	18ed      	addgt	r5, r5, r3
 8004de6:	2600      	movs	r6, #0
 8004de8:	341a      	adds	r4, #26
 8004dea:	42b5      	cmp	r5, r6
 8004dec:	d11a      	bne.n	8004e24 <_printf_common+0xc8>
 8004dee:	2000      	movs	r0, #0
 8004df0:	e008      	b.n	8004e04 <_printf_common+0xa8>
 8004df2:	2301      	movs	r3, #1
 8004df4:	4652      	mov	r2, sl
 8004df6:	4641      	mov	r1, r8
 8004df8:	4638      	mov	r0, r7
 8004dfa:	47c8      	blx	r9
 8004dfc:	3001      	adds	r0, #1
 8004dfe:	d103      	bne.n	8004e08 <_printf_common+0xac>
 8004e00:	f04f 30ff 	mov.w	r0, #4294967295
 8004e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e08:	3501      	adds	r5, #1
 8004e0a:	e7c6      	b.n	8004d9a <_printf_common+0x3e>
 8004e0c:	18e1      	adds	r1, r4, r3
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	2030      	movs	r0, #48	@ 0x30
 8004e12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e16:	4422      	add	r2, r4
 8004e18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e20:	3302      	adds	r3, #2
 8004e22:	e7c7      	b.n	8004db4 <_printf_common+0x58>
 8004e24:	2301      	movs	r3, #1
 8004e26:	4622      	mov	r2, r4
 8004e28:	4641      	mov	r1, r8
 8004e2a:	4638      	mov	r0, r7
 8004e2c:	47c8      	blx	r9
 8004e2e:	3001      	adds	r0, #1
 8004e30:	d0e6      	beq.n	8004e00 <_printf_common+0xa4>
 8004e32:	3601      	adds	r6, #1
 8004e34:	e7d9      	b.n	8004dea <_printf_common+0x8e>
	...

08004e38 <_printf_i>:
 8004e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e3c:	7e0f      	ldrb	r7, [r1, #24]
 8004e3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e40:	2f78      	cmp	r7, #120	@ 0x78
 8004e42:	4691      	mov	r9, r2
 8004e44:	4680      	mov	r8, r0
 8004e46:	460c      	mov	r4, r1
 8004e48:	469a      	mov	sl, r3
 8004e4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e4e:	d807      	bhi.n	8004e60 <_printf_i+0x28>
 8004e50:	2f62      	cmp	r7, #98	@ 0x62
 8004e52:	d80a      	bhi.n	8004e6a <_printf_i+0x32>
 8004e54:	2f00      	cmp	r7, #0
 8004e56:	f000 80d2 	beq.w	8004ffe <_printf_i+0x1c6>
 8004e5a:	2f58      	cmp	r7, #88	@ 0x58
 8004e5c:	f000 80b9 	beq.w	8004fd2 <_printf_i+0x19a>
 8004e60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e68:	e03a      	b.n	8004ee0 <_printf_i+0xa8>
 8004e6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e6e:	2b15      	cmp	r3, #21
 8004e70:	d8f6      	bhi.n	8004e60 <_printf_i+0x28>
 8004e72:	a101      	add	r1, pc, #4	@ (adr r1, 8004e78 <_printf_i+0x40>)
 8004e74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e78:	08004ed1 	.word	0x08004ed1
 8004e7c:	08004ee5 	.word	0x08004ee5
 8004e80:	08004e61 	.word	0x08004e61
 8004e84:	08004e61 	.word	0x08004e61
 8004e88:	08004e61 	.word	0x08004e61
 8004e8c:	08004e61 	.word	0x08004e61
 8004e90:	08004ee5 	.word	0x08004ee5
 8004e94:	08004e61 	.word	0x08004e61
 8004e98:	08004e61 	.word	0x08004e61
 8004e9c:	08004e61 	.word	0x08004e61
 8004ea0:	08004e61 	.word	0x08004e61
 8004ea4:	08004fe5 	.word	0x08004fe5
 8004ea8:	08004f0f 	.word	0x08004f0f
 8004eac:	08004f9f 	.word	0x08004f9f
 8004eb0:	08004e61 	.word	0x08004e61
 8004eb4:	08004e61 	.word	0x08004e61
 8004eb8:	08005007 	.word	0x08005007
 8004ebc:	08004e61 	.word	0x08004e61
 8004ec0:	08004f0f 	.word	0x08004f0f
 8004ec4:	08004e61 	.word	0x08004e61
 8004ec8:	08004e61 	.word	0x08004e61
 8004ecc:	08004fa7 	.word	0x08004fa7
 8004ed0:	6833      	ldr	r3, [r6, #0]
 8004ed2:	1d1a      	adds	r2, r3, #4
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6032      	str	r2, [r6, #0]
 8004ed8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004edc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e09d      	b.n	8005020 <_printf_i+0x1e8>
 8004ee4:	6833      	ldr	r3, [r6, #0]
 8004ee6:	6820      	ldr	r0, [r4, #0]
 8004ee8:	1d19      	adds	r1, r3, #4
 8004eea:	6031      	str	r1, [r6, #0]
 8004eec:	0606      	lsls	r6, r0, #24
 8004eee:	d501      	bpl.n	8004ef4 <_printf_i+0xbc>
 8004ef0:	681d      	ldr	r5, [r3, #0]
 8004ef2:	e003      	b.n	8004efc <_printf_i+0xc4>
 8004ef4:	0645      	lsls	r5, r0, #25
 8004ef6:	d5fb      	bpl.n	8004ef0 <_printf_i+0xb8>
 8004ef8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004efc:	2d00      	cmp	r5, #0
 8004efe:	da03      	bge.n	8004f08 <_printf_i+0xd0>
 8004f00:	232d      	movs	r3, #45	@ 0x2d
 8004f02:	426d      	negs	r5, r5
 8004f04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f08:	4859      	ldr	r0, [pc, #356]	@ (8005070 <_printf_i+0x238>)
 8004f0a:	230a      	movs	r3, #10
 8004f0c:	e011      	b.n	8004f32 <_printf_i+0xfa>
 8004f0e:	6821      	ldr	r1, [r4, #0]
 8004f10:	6833      	ldr	r3, [r6, #0]
 8004f12:	0608      	lsls	r0, r1, #24
 8004f14:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f18:	d402      	bmi.n	8004f20 <_printf_i+0xe8>
 8004f1a:	0649      	lsls	r1, r1, #25
 8004f1c:	bf48      	it	mi
 8004f1e:	b2ad      	uxthmi	r5, r5
 8004f20:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f22:	4853      	ldr	r0, [pc, #332]	@ (8005070 <_printf_i+0x238>)
 8004f24:	6033      	str	r3, [r6, #0]
 8004f26:	bf14      	ite	ne
 8004f28:	230a      	movne	r3, #10
 8004f2a:	2308      	moveq	r3, #8
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f32:	6866      	ldr	r6, [r4, #4]
 8004f34:	60a6      	str	r6, [r4, #8]
 8004f36:	2e00      	cmp	r6, #0
 8004f38:	bfa2      	ittt	ge
 8004f3a:	6821      	ldrge	r1, [r4, #0]
 8004f3c:	f021 0104 	bicge.w	r1, r1, #4
 8004f40:	6021      	strge	r1, [r4, #0]
 8004f42:	b90d      	cbnz	r5, 8004f48 <_printf_i+0x110>
 8004f44:	2e00      	cmp	r6, #0
 8004f46:	d04b      	beq.n	8004fe0 <_printf_i+0x1a8>
 8004f48:	4616      	mov	r6, r2
 8004f4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f4e:	fb03 5711 	mls	r7, r3, r1, r5
 8004f52:	5dc7      	ldrb	r7, [r0, r7]
 8004f54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f58:	462f      	mov	r7, r5
 8004f5a:	42bb      	cmp	r3, r7
 8004f5c:	460d      	mov	r5, r1
 8004f5e:	d9f4      	bls.n	8004f4a <_printf_i+0x112>
 8004f60:	2b08      	cmp	r3, #8
 8004f62:	d10b      	bne.n	8004f7c <_printf_i+0x144>
 8004f64:	6823      	ldr	r3, [r4, #0]
 8004f66:	07df      	lsls	r7, r3, #31
 8004f68:	d508      	bpl.n	8004f7c <_printf_i+0x144>
 8004f6a:	6923      	ldr	r3, [r4, #16]
 8004f6c:	6861      	ldr	r1, [r4, #4]
 8004f6e:	4299      	cmp	r1, r3
 8004f70:	bfde      	ittt	le
 8004f72:	2330      	movle	r3, #48	@ 0x30
 8004f74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f7c:	1b92      	subs	r2, r2, r6
 8004f7e:	6122      	str	r2, [r4, #16]
 8004f80:	f8cd a000 	str.w	sl, [sp]
 8004f84:	464b      	mov	r3, r9
 8004f86:	aa03      	add	r2, sp, #12
 8004f88:	4621      	mov	r1, r4
 8004f8a:	4640      	mov	r0, r8
 8004f8c:	f7ff fee6 	bl	8004d5c <_printf_common>
 8004f90:	3001      	adds	r0, #1
 8004f92:	d14a      	bne.n	800502a <_printf_i+0x1f2>
 8004f94:	f04f 30ff 	mov.w	r0, #4294967295
 8004f98:	b004      	add	sp, #16
 8004f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	f043 0320 	orr.w	r3, r3, #32
 8004fa4:	6023      	str	r3, [r4, #0]
 8004fa6:	4833      	ldr	r0, [pc, #204]	@ (8005074 <_printf_i+0x23c>)
 8004fa8:	2778      	movs	r7, #120	@ 0x78
 8004faa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	6831      	ldr	r1, [r6, #0]
 8004fb2:	061f      	lsls	r7, r3, #24
 8004fb4:	f851 5b04 	ldr.w	r5, [r1], #4
 8004fb8:	d402      	bmi.n	8004fc0 <_printf_i+0x188>
 8004fba:	065f      	lsls	r7, r3, #25
 8004fbc:	bf48      	it	mi
 8004fbe:	b2ad      	uxthmi	r5, r5
 8004fc0:	6031      	str	r1, [r6, #0]
 8004fc2:	07d9      	lsls	r1, r3, #31
 8004fc4:	bf44      	itt	mi
 8004fc6:	f043 0320 	orrmi.w	r3, r3, #32
 8004fca:	6023      	strmi	r3, [r4, #0]
 8004fcc:	b11d      	cbz	r5, 8004fd6 <_printf_i+0x19e>
 8004fce:	2310      	movs	r3, #16
 8004fd0:	e7ac      	b.n	8004f2c <_printf_i+0xf4>
 8004fd2:	4827      	ldr	r0, [pc, #156]	@ (8005070 <_printf_i+0x238>)
 8004fd4:	e7e9      	b.n	8004faa <_printf_i+0x172>
 8004fd6:	6823      	ldr	r3, [r4, #0]
 8004fd8:	f023 0320 	bic.w	r3, r3, #32
 8004fdc:	6023      	str	r3, [r4, #0]
 8004fde:	e7f6      	b.n	8004fce <_printf_i+0x196>
 8004fe0:	4616      	mov	r6, r2
 8004fe2:	e7bd      	b.n	8004f60 <_printf_i+0x128>
 8004fe4:	6833      	ldr	r3, [r6, #0]
 8004fe6:	6825      	ldr	r5, [r4, #0]
 8004fe8:	6961      	ldr	r1, [r4, #20]
 8004fea:	1d18      	adds	r0, r3, #4
 8004fec:	6030      	str	r0, [r6, #0]
 8004fee:	062e      	lsls	r6, r5, #24
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	d501      	bpl.n	8004ff8 <_printf_i+0x1c0>
 8004ff4:	6019      	str	r1, [r3, #0]
 8004ff6:	e002      	b.n	8004ffe <_printf_i+0x1c6>
 8004ff8:	0668      	lsls	r0, r5, #25
 8004ffa:	d5fb      	bpl.n	8004ff4 <_printf_i+0x1bc>
 8004ffc:	8019      	strh	r1, [r3, #0]
 8004ffe:	2300      	movs	r3, #0
 8005000:	6123      	str	r3, [r4, #16]
 8005002:	4616      	mov	r6, r2
 8005004:	e7bc      	b.n	8004f80 <_printf_i+0x148>
 8005006:	6833      	ldr	r3, [r6, #0]
 8005008:	1d1a      	adds	r2, r3, #4
 800500a:	6032      	str	r2, [r6, #0]
 800500c:	681e      	ldr	r6, [r3, #0]
 800500e:	6862      	ldr	r2, [r4, #4]
 8005010:	2100      	movs	r1, #0
 8005012:	4630      	mov	r0, r6
 8005014:	f7fb f8dc 	bl	80001d0 <memchr>
 8005018:	b108      	cbz	r0, 800501e <_printf_i+0x1e6>
 800501a:	1b80      	subs	r0, r0, r6
 800501c:	6060      	str	r0, [r4, #4]
 800501e:	6863      	ldr	r3, [r4, #4]
 8005020:	6123      	str	r3, [r4, #16]
 8005022:	2300      	movs	r3, #0
 8005024:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005028:	e7aa      	b.n	8004f80 <_printf_i+0x148>
 800502a:	6923      	ldr	r3, [r4, #16]
 800502c:	4632      	mov	r2, r6
 800502e:	4649      	mov	r1, r9
 8005030:	4640      	mov	r0, r8
 8005032:	47d0      	blx	sl
 8005034:	3001      	adds	r0, #1
 8005036:	d0ad      	beq.n	8004f94 <_printf_i+0x15c>
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	079b      	lsls	r3, r3, #30
 800503c:	d413      	bmi.n	8005066 <_printf_i+0x22e>
 800503e:	68e0      	ldr	r0, [r4, #12]
 8005040:	9b03      	ldr	r3, [sp, #12]
 8005042:	4298      	cmp	r0, r3
 8005044:	bfb8      	it	lt
 8005046:	4618      	movlt	r0, r3
 8005048:	e7a6      	b.n	8004f98 <_printf_i+0x160>
 800504a:	2301      	movs	r3, #1
 800504c:	4632      	mov	r2, r6
 800504e:	4649      	mov	r1, r9
 8005050:	4640      	mov	r0, r8
 8005052:	47d0      	blx	sl
 8005054:	3001      	adds	r0, #1
 8005056:	d09d      	beq.n	8004f94 <_printf_i+0x15c>
 8005058:	3501      	adds	r5, #1
 800505a:	68e3      	ldr	r3, [r4, #12]
 800505c:	9903      	ldr	r1, [sp, #12]
 800505e:	1a5b      	subs	r3, r3, r1
 8005060:	42ab      	cmp	r3, r5
 8005062:	dcf2      	bgt.n	800504a <_printf_i+0x212>
 8005064:	e7eb      	b.n	800503e <_printf_i+0x206>
 8005066:	2500      	movs	r5, #0
 8005068:	f104 0619 	add.w	r6, r4, #25
 800506c:	e7f5      	b.n	800505a <_printf_i+0x222>
 800506e:	bf00      	nop
 8005070:	08005454 	.word	0x08005454
 8005074:	08005465 	.word	0x08005465

08005078 <__swbuf_r>:
 8005078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507a:	460e      	mov	r6, r1
 800507c:	4614      	mov	r4, r2
 800507e:	4605      	mov	r5, r0
 8005080:	b118      	cbz	r0, 800508a <__swbuf_r+0x12>
 8005082:	6a03      	ldr	r3, [r0, #32]
 8005084:	b90b      	cbnz	r3, 800508a <__swbuf_r+0x12>
 8005086:	f7ff fa03 	bl	8004490 <__sinit>
 800508a:	69a3      	ldr	r3, [r4, #24]
 800508c:	60a3      	str	r3, [r4, #8]
 800508e:	89a3      	ldrh	r3, [r4, #12]
 8005090:	071a      	lsls	r2, r3, #28
 8005092:	d501      	bpl.n	8005098 <__swbuf_r+0x20>
 8005094:	6923      	ldr	r3, [r4, #16]
 8005096:	b943      	cbnz	r3, 80050aa <__swbuf_r+0x32>
 8005098:	4621      	mov	r1, r4
 800509a:	4628      	mov	r0, r5
 800509c:	f000 f82a 	bl	80050f4 <__swsetup_r>
 80050a0:	b118      	cbz	r0, 80050aa <__swbuf_r+0x32>
 80050a2:	f04f 37ff 	mov.w	r7, #4294967295
 80050a6:	4638      	mov	r0, r7
 80050a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	6922      	ldr	r2, [r4, #16]
 80050ae:	1a98      	subs	r0, r3, r2
 80050b0:	6963      	ldr	r3, [r4, #20]
 80050b2:	b2f6      	uxtb	r6, r6
 80050b4:	4283      	cmp	r3, r0
 80050b6:	4637      	mov	r7, r6
 80050b8:	dc05      	bgt.n	80050c6 <__swbuf_r+0x4e>
 80050ba:	4621      	mov	r1, r4
 80050bc:	4628      	mov	r0, r5
 80050be:	f7ff fcbb 	bl	8004a38 <_fflush_r>
 80050c2:	2800      	cmp	r0, #0
 80050c4:	d1ed      	bne.n	80050a2 <__swbuf_r+0x2a>
 80050c6:	68a3      	ldr	r3, [r4, #8]
 80050c8:	3b01      	subs	r3, #1
 80050ca:	60a3      	str	r3, [r4, #8]
 80050cc:	6823      	ldr	r3, [r4, #0]
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	6022      	str	r2, [r4, #0]
 80050d2:	701e      	strb	r6, [r3, #0]
 80050d4:	6962      	ldr	r2, [r4, #20]
 80050d6:	1c43      	adds	r3, r0, #1
 80050d8:	429a      	cmp	r2, r3
 80050da:	d004      	beq.n	80050e6 <__swbuf_r+0x6e>
 80050dc:	89a3      	ldrh	r3, [r4, #12]
 80050de:	07db      	lsls	r3, r3, #31
 80050e0:	d5e1      	bpl.n	80050a6 <__swbuf_r+0x2e>
 80050e2:	2e0a      	cmp	r6, #10
 80050e4:	d1df      	bne.n	80050a6 <__swbuf_r+0x2e>
 80050e6:	4621      	mov	r1, r4
 80050e8:	4628      	mov	r0, r5
 80050ea:	f7ff fca5 	bl	8004a38 <_fflush_r>
 80050ee:	2800      	cmp	r0, #0
 80050f0:	d0d9      	beq.n	80050a6 <__swbuf_r+0x2e>
 80050f2:	e7d6      	b.n	80050a2 <__swbuf_r+0x2a>

080050f4 <__swsetup_r>:
 80050f4:	b538      	push	{r3, r4, r5, lr}
 80050f6:	4b29      	ldr	r3, [pc, #164]	@ (800519c <__swsetup_r+0xa8>)
 80050f8:	4605      	mov	r5, r0
 80050fa:	6818      	ldr	r0, [r3, #0]
 80050fc:	460c      	mov	r4, r1
 80050fe:	b118      	cbz	r0, 8005108 <__swsetup_r+0x14>
 8005100:	6a03      	ldr	r3, [r0, #32]
 8005102:	b90b      	cbnz	r3, 8005108 <__swsetup_r+0x14>
 8005104:	f7ff f9c4 	bl	8004490 <__sinit>
 8005108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800510c:	0719      	lsls	r1, r3, #28
 800510e:	d422      	bmi.n	8005156 <__swsetup_r+0x62>
 8005110:	06da      	lsls	r2, r3, #27
 8005112:	d407      	bmi.n	8005124 <__swsetup_r+0x30>
 8005114:	2209      	movs	r2, #9
 8005116:	602a      	str	r2, [r5, #0]
 8005118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800511c:	81a3      	strh	r3, [r4, #12]
 800511e:	f04f 30ff 	mov.w	r0, #4294967295
 8005122:	e033      	b.n	800518c <__swsetup_r+0x98>
 8005124:	0758      	lsls	r0, r3, #29
 8005126:	d512      	bpl.n	800514e <__swsetup_r+0x5a>
 8005128:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800512a:	b141      	cbz	r1, 800513e <__swsetup_r+0x4a>
 800512c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005130:	4299      	cmp	r1, r3
 8005132:	d002      	beq.n	800513a <__swsetup_r+0x46>
 8005134:	4628      	mov	r0, r5
 8005136:	f7ff fafb 	bl	8004730 <_free_r>
 800513a:	2300      	movs	r3, #0
 800513c:	6363      	str	r3, [r4, #52]	@ 0x34
 800513e:	89a3      	ldrh	r3, [r4, #12]
 8005140:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005144:	81a3      	strh	r3, [r4, #12]
 8005146:	2300      	movs	r3, #0
 8005148:	6063      	str	r3, [r4, #4]
 800514a:	6923      	ldr	r3, [r4, #16]
 800514c:	6023      	str	r3, [r4, #0]
 800514e:	89a3      	ldrh	r3, [r4, #12]
 8005150:	f043 0308 	orr.w	r3, r3, #8
 8005154:	81a3      	strh	r3, [r4, #12]
 8005156:	6923      	ldr	r3, [r4, #16]
 8005158:	b94b      	cbnz	r3, 800516e <__swsetup_r+0x7a>
 800515a:	89a3      	ldrh	r3, [r4, #12]
 800515c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005164:	d003      	beq.n	800516e <__swsetup_r+0x7a>
 8005166:	4621      	mov	r1, r4
 8005168:	4628      	mov	r0, r5
 800516a:	f000 f883 	bl	8005274 <__smakebuf_r>
 800516e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005172:	f013 0201 	ands.w	r2, r3, #1
 8005176:	d00a      	beq.n	800518e <__swsetup_r+0x9a>
 8005178:	2200      	movs	r2, #0
 800517a:	60a2      	str	r2, [r4, #8]
 800517c:	6962      	ldr	r2, [r4, #20]
 800517e:	4252      	negs	r2, r2
 8005180:	61a2      	str	r2, [r4, #24]
 8005182:	6922      	ldr	r2, [r4, #16]
 8005184:	b942      	cbnz	r2, 8005198 <__swsetup_r+0xa4>
 8005186:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800518a:	d1c5      	bne.n	8005118 <__swsetup_r+0x24>
 800518c:	bd38      	pop	{r3, r4, r5, pc}
 800518e:	0799      	lsls	r1, r3, #30
 8005190:	bf58      	it	pl
 8005192:	6962      	ldrpl	r2, [r4, #20]
 8005194:	60a2      	str	r2, [r4, #8]
 8005196:	e7f4      	b.n	8005182 <__swsetup_r+0x8e>
 8005198:	2000      	movs	r0, #0
 800519a:	e7f7      	b.n	800518c <__swsetup_r+0x98>
 800519c:	20000020 	.word	0x20000020

080051a0 <_raise_r>:
 80051a0:	291f      	cmp	r1, #31
 80051a2:	b538      	push	{r3, r4, r5, lr}
 80051a4:	4605      	mov	r5, r0
 80051a6:	460c      	mov	r4, r1
 80051a8:	d904      	bls.n	80051b4 <_raise_r+0x14>
 80051aa:	2316      	movs	r3, #22
 80051ac:	6003      	str	r3, [r0, #0]
 80051ae:	f04f 30ff 	mov.w	r0, #4294967295
 80051b2:	bd38      	pop	{r3, r4, r5, pc}
 80051b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80051b6:	b112      	cbz	r2, 80051be <_raise_r+0x1e>
 80051b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80051bc:	b94b      	cbnz	r3, 80051d2 <_raise_r+0x32>
 80051be:	4628      	mov	r0, r5
 80051c0:	f000 f830 	bl	8005224 <_getpid_r>
 80051c4:	4622      	mov	r2, r4
 80051c6:	4601      	mov	r1, r0
 80051c8:	4628      	mov	r0, r5
 80051ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051ce:	f000 b817 	b.w	8005200 <_kill_r>
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d00a      	beq.n	80051ec <_raise_r+0x4c>
 80051d6:	1c59      	adds	r1, r3, #1
 80051d8:	d103      	bne.n	80051e2 <_raise_r+0x42>
 80051da:	2316      	movs	r3, #22
 80051dc:	6003      	str	r3, [r0, #0]
 80051de:	2001      	movs	r0, #1
 80051e0:	e7e7      	b.n	80051b2 <_raise_r+0x12>
 80051e2:	2100      	movs	r1, #0
 80051e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80051e8:	4620      	mov	r0, r4
 80051ea:	4798      	blx	r3
 80051ec:	2000      	movs	r0, #0
 80051ee:	e7e0      	b.n	80051b2 <_raise_r+0x12>

080051f0 <raise>:
 80051f0:	4b02      	ldr	r3, [pc, #8]	@ (80051fc <raise+0xc>)
 80051f2:	4601      	mov	r1, r0
 80051f4:	6818      	ldr	r0, [r3, #0]
 80051f6:	f7ff bfd3 	b.w	80051a0 <_raise_r>
 80051fa:	bf00      	nop
 80051fc:	20000020 	.word	0x20000020

08005200 <_kill_r>:
 8005200:	b538      	push	{r3, r4, r5, lr}
 8005202:	4d07      	ldr	r5, [pc, #28]	@ (8005220 <_kill_r+0x20>)
 8005204:	2300      	movs	r3, #0
 8005206:	4604      	mov	r4, r0
 8005208:	4608      	mov	r0, r1
 800520a:	4611      	mov	r1, r2
 800520c:	602b      	str	r3, [r5, #0]
 800520e:	f7fd fd67 	bl	8002ce0 <_kill>
 8005212:	1c43      	adds	r3, r0, #1
 8005214:	d102      	bne.n	800521c <_kill_r+0x1c>
 8005216:	682b      	ldr	r3, [r5, #0]
 8005218:	b103      	cbz	r3, 800521c <_kill_r+0x1c>
 800521a:	6023      	str	r3, [r4, #0]
 800521c:	bd38      	pop	{r3, r4, r5, pc}
 800521e:	bf00      	nop
 8005220:	20012f30 	.word	0x20012f30

08005224 <_getpid_r>:
 8005224:	f7fd bd54 	b.w	8002cd0 <_getpid>

08005228 <__swhatbuf_r>:
 8005228:	b570      	push	{r4, r5, r6, lr}
 800522a:	460c      	mov	r4, r1
 800522c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005230:	2900      	cmp	r1, #0
 8005232:	b096      	sub	sp, #88	@ 0x58
 8005234:	4615      	mov	r5, r2
 8005236:	461e      	mov	r6, r3
 8005238:	da0d      	bge.n	8005256 <__swhatbuf_r+0x2e>
 800523a:	89a3      	ldrh	r3, [r4, #12]
 800523c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005240:	f04f 0100 	mov.w	r1, #0
 8005244:	bf14      	ite	ne
 8005246:	2340      	movne	r3, #64	@ 0x40
 8005248:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800524c:	2000      	movs	r0, #0
 800524e:	6031      	str	r1, [r6, #0]
 8005250:	602b      	str	r3, [r5, #0]
 8005252:	b016      	add	sp, #88	@ 0x58
 8005254:	bd70      	pop	{r4, r5, r6, pc}
 8005256:	466a      	mov	r2, sp
 8005258:	f000 f848 	bl	80052ec <_fstat_r>
 800525c:	2800      	cmp	r0, #0
 800525e:	dbec      	blt.n	800523a <__swhatbuf_r+0x12>
 8005260:	9901      	ldr	r1, [sp, #4]
 8005262:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005266:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800526a:	4259      	negs	r1, r3
 800526c:	4159      	adcs	r1, r3
 800526e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005272:	e7eb      	b.n	800524c <__swhatbuf_r+0x24>

08005274 <__smakebuf_r>:
 8005274:	898b      	ldrh	r3, [r1, #12]
 8005276:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005278:	079d      	lsls	r5, r3, #30
 800527a:	4606      	mov	r6, r0
 800527c:	460c      	mov	r4, r1
 800527e:	d507      	bpl.n	8005290 <__smakebuf_r+0x1c>
 8005280:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	6123      	str	r3, [r4, #16]
 8005288:	2301      	movs	r3, #1
 800528a:	6163      	str	r3, [r4, #20]
 800528c:	b003      	add	sp, #12
 800528e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005290:	ab01      	add	r3, sp, #4
 8005292:	466a      	mov	r2, sp
 8005294:	f7ff ffc8 	bl	8005228 <__swhatbuf_r>
 8005298:	9f00      	ldr	r7, [sp, #0]
 800529a:	4605      	mov	r5, r0
 800529c:	4639      	mov	r1, r7
 800529e:	4630      	mov	r0, r6
 80052a0:	f7ff faba 	bl	8004818 <_malloc_r>
 80052a4:	b948      	cbnz	r0, 80052ba <__smakebuf_r+0x46>
 80052a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052aa:	059a      	lsls	r2, r3, #22
 80052ac:	d4ee      	bmi.n	800528c <__smakebuf_r+0x18>
 80052ae:	f023 0303 	bic.w	r3, r3, #3
 80052b2:	f043 0302 	orr.w	r3, r3, #2
 80052b6:	81a3      	strh	r3, [r4, #12]
 80052b8:	e7e2      	b.n	8005280 <__smakebuf_r+0xc>
 80052ba:	89a3      	ldrh	r3, [r4, #12]
 80052bc:	6020      	str	r0, [r4, #0]
 80052be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052c2:	81a3      	strh	r3, [r4, #12]
 80052c4:	9b01      	ldr	r3, [sp, #4]
 80052c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80052ca:	b15b      	cbz	r3, 80052e4 <__smakebuf_r+0x70>
 80052cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052d0:	4630      	mov	r0, r6
 80052d2:	f000 f81d 	bl	8005310 <_isatty_r>
 80052d6:	b128      	cbz	r0, 80052e4 <__smakebuf_r+0x70>
 80052d8:	89a3      	ldrh	r3, [r4, #12]
 80052da:	f023 0303 	bic.w	r3, r3, #3
 80052de:	f043 0301 	orr.w	r3, r3, #1
 80052e2:	81a3      	strh	r3, [r4, #12]
 80052e4:	89a3      	ldrh	r3, [r4, #12]
 80052e6:	431d      	orrs	r5, r3
 80052e8:	81a5      	strh	r5, [r4, #12]
 80052ea:	e7cf      	b.n	800528c <__smakebuf_r+0x18>

080052ec <_fstat_r>:
 80052ec:	b538      	push	{r3, r4, r5, lr}
 80052ee:	4d07      	ldr	r5, [pc, #28]	@ (800530c <_fstat_r+0x20>)
 80052f0:	2300      	movs	r3, #0
 80052f2:	4604      	mov	r4, r0
 80052f4:	4608      	mov	r0, r1
 80052f6:	4611      	mov	r1, r2
 80052f8:	602b      	str	r3, [r5, #0]
 80052fa:	f7fd fd51 	bl	8002da0 <_fstat>
 80052fe:	1c43      	adds	r3, r0, #1
 8005300:	d102      	bne.n	8005308 <_fstat_r+0x1c>
 8005302:	682b      	ldr	r3, [r5, #0]
 8005304:	b103      	cbz	r3, 8005308 <_fstat_r+0x1c>
 8005306:	6023      	str	r3, [r4, #0]
 8005308:	bd38      	pop	{r3, r4, r5, pc}
 800530a:	bf00      	nop
 800530c:	20012f30 	.word	0x20012f30

08005310 <_isatty_r>:
 8005310:	b538      	push	{r3, r4, r5, lr}
 8005312:	4d06      	ldr	r5, [pc, #24]	@ (800532c <_isatty_r+0x1c>)
 8005314:	2300      	movs	r3, #0
 8005316:	4604      	mov	r4, r0
 8005318:	4608      	mov	r0, r1
 800531a:	602b      	str	r3, [r5, #0]
 800531c:	f7fd fd50 	bl	8002dc0 <_isatty>
 8005320:	1c43      	adds	r3, r0, #1
 8005322:	d102      	bne.n	800532a <_isatty_r+0x1a>
 8005324:	682b      	ldr	r3, [r5, #0]
 8005326:	b103      	cbz	r3, 800532a <_isatty_r+0x1a>
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	bd38      	pop	{r3, r4, r5, pc}
 800532c:	20012f30 	.word	0x20012f30

08005330 <_gettimeofday>:
 8005330:	4b02      	ldr	r3, [pc, #8]	@ (800533c <_gettimeofday+0xc>)
 8005332:	2258      	movs	r2, #88	@ 0x58
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	f04f 30ff 	mov.w	r0, #4294967295
 800533a:	4770      	bx	lr
 800533c:	20012f30 	.word	0x20012f30

08005340 <_init>:
 8005340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005342:	bf00      	nop
 8005344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005346:	bc08      	pop	{r3}
 8005348:	469e      	mov	lr, r3
 800534a:	4770      	bx	lr

0800534c <_fini>:
 800534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534e:	bf00      	nop
 8005350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005352:	bc08      	pop	{r3}
 8005354:	469e      	mov	lr, r3
 8005356:	4770      	bx	lr
